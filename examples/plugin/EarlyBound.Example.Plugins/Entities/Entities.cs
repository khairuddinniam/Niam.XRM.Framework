using System;
using Microsoft.Xrm.Sdk;

namespace Entities
{
    [System.Runtime.Serialization.DataContract]
    public abstract class EntityBase : Entity
    {
        protected EntityBase(string entityName) : base(entityName)
        {
        }

		public DateTime? CreatedOn = null;
        public DateTime? ModifiedOn = null;
        public int? VersionNumber = null;

        public EntityReference CreatedBy = null;
        public EntityReference CreatedOnBehalfBy = null;
        public int? ImportSequenceNumber = null;
        public EntityReference ModifiedBy = null;
        public EntityReference ModifiedOnBehalfBy = null;
        public DateTime? OverriddenCreatedOn = null;
        public OptionSetValue statecode = null;
        public OptionSetValue statuscode = null;
        public int? TimeZoneRuleVersionNumber = null;
        public int? UTCConversionTimeZoneCode = null;
    }

	[System.Runtime.Serialization.DataContract]
    public abstract class UserOrTeamEntity : EntityBase
    {
        protected UserOrTeamEntity(string entityName) : base(entityName)
        {
        }

        public EntityReference OwningBusinessUnit = null;
        public EntityReference OwningTeam = null;
        public EntityReference OwningUser = null;
        public EntityReference OwnerId = null;
    }

    [System.Runtime.Serialization.DataContract]
    public abstract class OrganizationEntity : EntityBase
    {
        protected OrganizationEntity(string entityName) : base(entityName)
        {
        }
    }

    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_playbookcategory")]
	public class msdyn_playbookcategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_playbookcategory";
        public msdyn_playbookcategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_playbookcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_playbookcategoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? msdyn_playbookcategoryId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("topichistory")]
	public class TopicHistory : Entity
    {
        public const string EntityLogicalName = "topichistory";
        public TopicHistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topichistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topichistoryid"] = value;
            }
        }
		
		public readonly int? Weight = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference TopicModelExecutionHistoryId = null;
		
		public readonly string KeyPhrase = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? TopicHistoryId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_invoicefrequencydetail")]
	public class msdyn_invoicefrequencydetail : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_invoicefrequencydetail";
        public msdyn_invoicefrequencydetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_invoicefrequencydetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_invoicefrequencydetailid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_invoicefrequency = null;
		
		public readonly OptionSetValue msdyn_dayofmonth = null;
		
		public readonly OptionSetValue msdyn_occurrenceofweekday = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_invoicefrequencydetailId = null;
		
		public readonly OptionSetValue msdyn_weekday = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_dayofmonth
            {
                _1 = 192350001,
                _2 = 192350002,
                _3 = 192350003,
                _4 = 192350004,
                _5 = 192350005,
                _6 = 192350006,
                _7 = 192350007,
                _8 = 192350008,
                _9 = 192350009,
                _10 = 192350010,
                _11 = 192350011,
                _12 = 192350012,
                _13 = 192350013,
                _14 = 192350014,
                _15 = 192350015,
                _16 = 192350016,
                _17 = 192350017,
                _18 = 192350018,
                _19 = 192350019,
                _20 = 192350020,
                _21 = 192350021,
                _22 = 192350022,
                _23 = 192350023,
                _24 = 192350024,
                _25 = 192350025,
                _26 = 192350026,
                _27 = 192350027,
                _28 = 192350028,
                _29 = 192350029,
                _30 = 192350030,
                _31 = 192350031
            }
            public enum msdyn_occurrenceofweekday
            {
                First = 192350000,
                Second = 192350001,
                Third = 192350002,
                Fourth = 192350003,
                Last = 192350004
            }
            public enum msdyn_weekday
            {
                Sunday = 192350000,
                Monday = 192350001,
                Tuesday = 192350002,
                Wednesday = 192350003,
                Thursday = 192350004,
                Friday = 192350005,
                Saturday = 192350006
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelpropertygroup")]
	public class ChannelPropertyGroup : Entity
    {
        public const string EntityLogicalName = "channelpropertygroup";
        public ChannelPropertyGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertygroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertygroupid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? ChannelPropertyGroupIdUnique = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ChannelPropertyGroupId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue RegardingTypeCode = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RegardingTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                Task = 4212,
                SocialActivity = 4216,
                ServiceActivity = 4214,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bulkdeleteoperation")]
	public class BulkDeleteOperation : Entity
    {
        public const string EntityLogicalName = "bulkdeleteoperation";
        public BulkDeleteOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeleteoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeleteoperationid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? NextRun = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? BulkDeleteOperationId = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly bool? IsRecurring = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? ProcessingQEIndex = null;
		
		public readonly int? FailureCount = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? SuccessCount = null;
		
		public readonly string OrderedQuerySetXml = null;

        public new static class Options
        {
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                Retrying = 11,
                Paused = 12,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderpricelist")]
	public class msdyn_orderpricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderpricelist";
        public msdyn_orderpricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderpricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderpricelistid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Contract = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_orderpricelistId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("discounttype")]
	public class DiscountType : Entity
    {
        public const string EntityLogicalName = "discounttype";
        public DiscountType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("discounttypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["discounttypeid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? DiscountTypeId = null;
		
		public readonly bool? IsAmountType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 100001,
                Inactive = 100002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("connectionrole")]
	public class ConnectionRole : Entity
    {
        public const string EntityLogicalName = "connectionrole";
        public ConnectionRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue Category = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ConnectionRoleId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? ConnectionRoleIdUnique = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum Category
            {
                Business = 1,
                Family = 2,
                Social = 3,
                Sales = 4,
                Other = 5,
                Stakeholder = 1000,
                SalesTeam = 1001,
                Service = 1002
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userqueryvisualization")]
	public class UserQueryVisualization : Entity
    {
        public const string EntityLogicalName = "userqueryvisualization";
        public UserQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryvisualizationid"] = value;
            }
        }
		
		public readonly string DataDescription = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string PresentationDescription = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? UserQueryVisualizationId = null;
		
		public readonly OptionSetValue ChartType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WebResourceId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importfile")]
	public class ImportFile : Entity
    {
        public const string EntityLogicalName = "importfile";
        public ImportFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importfileid"] = value;
            }
        }
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference RecordsOwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? SuccessCount = null;
		
		public readonly int? TotalCount = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly OptionSetValue FileTypeCode = null;
		
		public readonly OptionSetValue FieldDelimiterCode = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string HeaderRow = null;
		
		public readonly string Source = null;
		
		public readonly bool? EnableDuplicateDetection = null;
		
		public readonly string Size = null;
		
		public readonly int? ParsedTableColumnsNumber = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue DataDelimiterCode = null;
		
		public readonly OptionSetValue UpsertModeCode = null;
		
		public readonly int? PartialFailureCount = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ProgressCounter = null;
		
		public readonly Guid? ImportFileId = null;
		
		public readonly OptionSetValue ProcessingStatus = null;
		
		public readonly bool? UseSystemMap = null;
		
		public readonly string RelatedEntityColumns = null;
		
		public readonly string ParsedTableName = null;
		
		public readonly string ParsedTableColumnPrefix = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly string AdditionalHeaderRow = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? FailureCount = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? EntityKeyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Content = null;
		
		public readonly bool? IsFirstRowHeader = null;
		
		public readonly EntityReference ImportId = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum FileTypeCode
            {
                CSV = 0,
                XMLSpreadsheet2003 = 1,
                Attachment = 2,
                XLSX = 3
            }
            public enum FieldDelimiterCode
            {
                Colon = 1,
                Comma = 2,
                Tab = 3,
                Semicolon = 4
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum DataDelimiterCode
            {
                DoubleQuote = 1,
                None = 2,
                SingleQuote = 3
            }
            public enum UpsertModeCode
            {
                Create = 0,
                Update = 1,
                Ignore = 2
            }
            public enum ProcessingStatus
            {
                NotStarted = 1,
                Parsing = 2,
                ParsingComplete = 3,
                ComplexTransformation = 4,
                LookupTransformation = 5,
                PicklistTransformation = 6,
                OwnerTransformation = 7,
                TransformationComplete = 8,
                ImportPass1 = 9,
                ImportPass2 = 10,
                ImportComplete = 11,
                PrimaryKeyTransformation = 12
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("processsession")]
	public class ProcessSession : Entity
    {
        public const string EntityLogicalName = "processsession";
        public ProcessSession() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processsessionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processsessionid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ProcessSessionId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ProcessState = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CanceledOn = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference NextLinkedSessionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OriginatingSessionId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Comments = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string StepName = null;
		
		public readonly EntityReference StartedBy = null;
		
		public readonly EntityReference CanceledBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly string ProtectionKey = null;
		
		public readonly EntityReference CompletedBy = null;
		
		public readonly DateTime? ExecutedOn = null;
		
		public readonly EntityReference ExecutedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference PreviousLinkedSessionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string InputArguments = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ProcessStageName = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ActivityName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Incomplete = 0,
                Complete = 1
            }
            public enum StatusCode
            {
                NotStarted = 1,
                InProgress = 2,
                Paused = 3,
                Completed = 4,
                Canceled = 5,
                Failed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_expense")]
	public class msdyn_expense : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_expense";
        public msdyn_expense() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_expenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_expenseid"] = value;
            }
        }
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly Money msdyn_salestaxamount_Base = null;
		
		public readonly EntityReference msdyn_manager = null;
		
		public readonly string msdyn_externaldescription = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_totalamount = null;
		
		public readonly OptionSetValue msdyn_ExpenseStatus = null;
		
		public readonly DateTime? msdyn_TransactionDate = null;
		
		public readonly string traversedpath = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly Guid? msdyn_expenseId = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly EntityReference msdyn_UnitGroup = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly EntityReference msdyn_ExpenseCategory = null;
		
		public readonly OptionSetValue msdyn_targetExpenseStatus = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_Salestaxamount = null;

        public new static class Options
        {
            public enum msdyn_ExpenseStatus
            {
                Draft = 192350000,
                Submitted = 192350001,
                Approved = 192350002,
                Rejected = 192350003,
                Posted = 192350004,
                Paid = 192350005,
                RecallRequested = 192350006
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Draft = 867380000,
                Rejected = 867380001,
                Submitted = 867380002,
                Approved = 867380003,
                Posted = 867380004,
                Paid = 867380005
            }
            public enum msdyn_targetExpenseStatus
            {
                Draft = 192350000,
                Submitted = 192350001,
                Approved = 192350002,
                Rejected = 192350003,
                Posted = 192350004,
                Paid = 192350005,
                RecallRequested = 192350006
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("documenttemplate")]
	public class DocumentTemplate : Entity
    {
        public const string EntityLogicalName = "documenttemplate";
        public DocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documenttemplateid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string AssociatedEntityTypeCode = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ClientData = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? Status = null;
		
		public readonly string Content = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? DocumentTemplateId = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum AssociatedEntityTypeCode
            {

            }
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_integrationjob")]
	public class msdyn_integrationjob : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_integrationjob";
        public msdyn_integrationjob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_integrationjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_integrationjobid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly string msdyn_ResponseJSON = null;
		
		public readonly string msdyn_RegardingEntity = null;
		
		public readonly string msdyn_RegardingEntityId = null;
		
		public readonly Guid? msdyn_integrationjobId = null;
		
		public readonly int? msdyn_NumberOfPackets = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Waiting = 192350000,
                Ready = 192350001,
                Skipped = 192350002,
                Processing = 192350003,
                Succeeded = 192350004,
                Failed = 192350005
            }
            public enum msdyn_Type
            {
                MSProjectClient = 192350000
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_paymentmethod")]
	public class msdyn_paymentmethod : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_paymentmethod";
        public msdyn_paymentmethod() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_paymentmethodid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_paymentmethodid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_paymentmethodId = null;
		
		public readonly OptionSetValue msdyn_PaymentType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_PaymentType
            {
                Cash = 690970000,
                Check = 690970001,
                CreditCard = 690970002,
                Other = 690970003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("roletemplateprivileges")]
	public class RoleTemplatePrivileges : Entity
    {
        public const string EntityLogicalName = "roletemplateprivileges";
        public RoleTemplatePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateprivilegeid"] = value;
            }
        }
		
		public readonly bool? Upgrading = null;
		
		public readonly bool? IsDeep = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly bool? IsBasic = null;
		
		public readonly Guid? RoleTemplateId = null;
		
		public readonly bool? IsGlobal = null;
		
		public readonly bool? IsLocal = null;
		
		public readonly Guid? RoleTemplatePrivilegeId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectparameterpricelist")]
	public class msdyn_projectparameterpricelist : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_projectparameterpricelist";
        public msdyn_projectparameterpricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectparameterpricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectparameterpricelistid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ProjectParameter = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdyn_projectparameterpricelistId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("privilege")]
	public class Privilege : Entity
    {
        public const string EntityLogicalName = "privilege";
        public Privilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? CanBeBasic = null;
		
		public readonly bool? CanBeDeep = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly int? AccessRight = null;
		
		public readonly Guid? PrivilegeRowId = null;
		
		public readonly bool? CanBeEntityReference = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? CanBeLocal = null;
		
		public readonly bool? CanBeGlobal = null;
		
		public readonly bool? IsDisabledWhenIntegrated = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? CanBeParentEntityReference = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_2c5fe86acc8b414b8322ae571000c799")]
	public class msdyn_bpf_2c5fe86acc8b414b8322ae571000c799 : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_2c5fe86acc8b414b8322ae571000c799";
        public msdyn_bpf_2c5fe86acc8b414b8322ae571000c799() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference bpf_msdyn_purchaseorderreceiptid = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly EntityReference bpf_msdyn_purchaseorderid = null;
		
		public readonly EntityReference bpf_msdyn_purchaseorderbillid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("multiselectattributeoptionvalues")]
	public class MultiSelectAttributeOptionValues : Entity
    {
        public const string EntityLogicalName = "multiselectattributeoptionvalues";
        public MultiSelectAttributeOptionValues() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multiselectfulltextidkey")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multiselectfulltextidkey"] = value;
            }
        }
		
		public readonly int? MultiSelectFullTextIdKey = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? ObjectColumnNumber = null;
		
		public readonly string SelectedOptionValues = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_d8f9dc7f099f44db9d641dd81fbd470d")]
	public class msdyn_bpf_d8f9dc7f099f44db9d641dd81fbd470d : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_d8f9dc7f099f44db9d641dd81fbd470d";
        public msdyn_bpf_d8f9dc7f099f44db9d641dd81fbd470d() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly EntityReference bpf_invoiceid = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("rollupjob")]
	public class RollupJob : Entity
    {
        public const string EntityLogicalName = "rollupjob";
        public RollupJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupjobid"] = value;
            }
        }
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? SourceEntityTypeCode = null;
		
		public readonly int? DepthProcessed = null;
		
		public readonly int? RetryCount = null;
		
		public readonly DateTime? PostponeUntil = null;
		
		public readonly int? RollupJobId = null;
		
		public readonly DateTime? RecordCreatedOn = null;
		
		public readonly EntityReference RollupPropertiesId = null;
		
		public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmodulemetadatadependency")]
	public class AppModuleMetadataDependency : Entity
    {
        public const string EntityLogicalName = "appmodulemetadatadependency";
        public AppModuleMetadataDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadatadependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadatadependencyid"] = value;
            }
        }
		
		public readonly Guid? DependentComponentId = null;
		
		public readonly int? RequiredComponentVersion = null;
		
		public readonly int? RequiredComponentType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? RequiredComponentId = null;
		
		public readonly int? State = null;
		
		public readonly int? RequiredComponentSubType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string RequiredComponentInternalId = null;
		
		public readonly Guid? AppModuleMetadataDependencyId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_opportunitylinetransactioncategory")]
	public class msdyn_opportunitylinetransactioncategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_opportunitylinetransactioncategory";
        public msdyn_opportunitylinetransactioncategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_opportunitylinetransactioncategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_opportunitylinetransactioncategoryid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_OpportunityLineTransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly Guid? msdyn_opportunitylinetransactioncategoryId = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("template")]
	public class Template : Entity
    {
        public const string EntityLogicalName = "template";
        public Template() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("templateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["templateid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsRecommended = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Subject = null;
		
		public readonly int? OpenRate = null;
		
		public readonly int? OpenCount = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? GenerationTypeCode = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? TemplateIdUnique = null;
		
		public readonly string PresentationXml = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly int? ReplyRate = null;
		
		public readonly int? ReplyCount = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TemplateTypeCode = null;
		
		public readonly string Body = null;
		
		public readonly Guid? TemplateId = null;
		
		public readonly string SubjectPresentationXml = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? UsedCount = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum TemplateTypeCode
            {
                Global = 8,
                Account = 1,
                Contact = 2,
                SystemJob = 4700,
                Lead = 4,
                CampaignActivity = 4402,
                Case = 112,
                Contract = 1010,
                ServiceActivity = 4214,
                Opportunity = 3,
                Quote = 1084,
                Order = 1088,
                Invoice = 1090
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("fileattachment")]
	public class FileAttachment : Entity
    {
        public const string EntityLogicalName = "fileattachment";
        public FileAttachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fileattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fileattachmentid"] = value;
            }
        }
		
		public readonly int? FileSizeInBytes = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly string RegardingFieldName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Prefix = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string FilePointer = null;
		
		public readonly string StoragePointer = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? FileAttachmentId = null;
		
		public readonly string MimeType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FileName = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Account = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_contactpricelist")]
	public class msdyn_contactpricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_contactpricelist";
        public msdyn_contactpricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_contactpricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_contactpricelistid"] = value;
            }
        }
		
		public readonly Guid? msdyn_contactpricelistId = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_Contact = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("new_child")]
	public class new_child : OrganizationEntity
    {
        public const string EntityLogicalName = "new_child";
        public new_child() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_childid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_childid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string new_number = null;
		
		public readonly Guid? new_childId = null;
		
		public readonly string new_operation = null;
		
		public readonly EntityReference new_master2 = null;
		
		public readonly EntityReference new_master1 = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("opportunitycompetitors")]
	public class OpportunityCompetitors : Entity
    {
        public const string EntityLogicalName = "opportunitycompetitors";
        public OpportunityCompetitors() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunitycompetitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunitycompetitorid"] = value;
            }
        }
		
		public readonly Guid? CompetitorId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? OpportunityCompetitorId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? OpportunityId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionmanuallytrackedobject")]
	public class SubscriptionManuallyTrackedObject : Entity
    {
        public const string EntityLogicalName = "subscriptionmanuallytrackedobject";
        public SubscriptionManuallyTrackedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionmanuallytrackedobjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionmanuallytrackedobjectid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? Track = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly Guid? SubscriptionManuallyTrackedObjectId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Contact = 2,
                Task = 4212
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactionorigin")]
	public class msdyn_transactionorigin : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_transactionorigin";
        public msdyn_transactionorigin() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactionoriginid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactionoriginid"] = value;
            }
        }
		
		public readonly string msdyn_Origin = null;
		
		public readonly string msdyn_TransactionType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_OriginType = null;
		
		public readonly Guid? msdyn_transactionoriginId = null;
		
		public readonly string msdyn_Transaction = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdynsm_servicessitemap")]
	public class msdynsm_servicessitemap : OrganizationEntity
    {
        public const string EntityLogicalName = "msdynsm_servicessitemap";
        public msdynsm_servicessitemap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdynsm_servicessitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdynsm_servicessitemapid"] = value;
            }
        }
		
		public readonly Guid? msdynsm_servicessitemapId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdynsm_name = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importlog")]
	public class ImportLog : Entity
    {
        public const string EntityLogicalName = "importlog";
        public ImportLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importlogid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string AdditionalInfo = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? ImportLogId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ErrorDescription = null;
		
		public readonly OptionSetValue LogPhaseCode = null;
		
		public readonly string ColumnValue = null;
		
		public readonly EntityReference ImportDataId = null;
		
		public readonly int? LineNumber = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string HeaderColumn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ImportFileId = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum LogPhaseCode
            {
                Parse = 0,
                Transform = 1,
                ImportCreate = 2,
                ImportUpdate = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fieldservicepricelistitem")]
	public class msdyn_fieldservicepricelistitem : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_fieldservicepricelistitem";
        public msdyn_fieldservicepricelistitem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_fieldservicepricelistitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_fieldservicepricelistitemid"] = value;
            }
        }
		
		public readonly int? msdyn_DurationRoundTo = null;
		
		public readonly bool? msdyn_FlatFee = null;
		
		public readonly Money msdyn_minimumchargeamount_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? msdyn_MinimumChargeDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_fieldservicepricelistitemId = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly OptionSetValue msdyn_DurationRoundingPolicy = null;
		
		public readonly EntityReference msdyn_ProductService = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_MinimumChargeAmount = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_DurationRoundingPolicy
            {
                None = 690970000,
                Up = 690970001,
                Down = 690970002,
                Nearest = 690970003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementcontacts")]
	public class EntitlementContacts : Entity
    {
        public const string EntityLogicalName = "entitlementcontacts";
        public EntitlementContacts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementcontactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementcontactid"] = value;
            }
        }
		
		public readonly Guid? EntitlementContactId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? EntitlementId = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("externalpartyitem")]
	public class ExternalPartyItem : Entity
    {
        public const string EntityLogicalName = "externalpartyitem";
        public ExternalPartyItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyitemid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? LastDisabledOn = null;
		
		public readonly DateTime? LastEnabledOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ExternalPartyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ChannelAccessProfileId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ExternalPartyItemId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("resource")]
	public class Resource : Entity
    {
        public const string EntityLogicalName = "resource";
        public Resource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourceid"] = value;
            }
        }
		
		public readonly bool? IsDisabled = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ResourceId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projecttask")]
	public class msdyn_projecttask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projecttask";
        public msdyn_projecttask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projecttaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projecttaskid"] = value;
            }
        }
		
		public readonly double? msdyn_RemainingHours = null;
		
		public readonly Money msdyn_plannedcost_Base = null;
		
		public readonly string msdyn_SalesEstimateContour = null;
		
		public readonly decimal? msdyn_SalesConsumptionPercentage = null;
		
		public readonly double? msdyn_ScheduleVariance = null;
		
		public readonly double? msdyn_RequestedHours = null;
		
		public readonly EntityReference msdyn_parenttask = null;
		
		public readonly DateTime? msdyn_scheduledstart = null;
		
		public readonly int? msdyn_numberofresources = null;
		
		public readonly double? msdyn_ScheduledHours = null;
		
		public readonly DateTime? msdyn_actualend = null;
		
		public readonly EntityReference msdyn_AssignedTeamMembers = null;
		
		public readonly decimal? msdyn_CostConsumptionPercentage = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly Money msdyn_actualsales_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? msdyn_skipupdateestimateline = null;
		
		public readonly string msdyn_WBSID = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_subject = null;
		
		public readonly Money msdyn_RemainingSales = null;
		
		public readonly EntityReference msdyn_resourcecategory = null;
		
		public readonly Money msdyn_Actualcost = null;
		
		public readonly DateTime? msdyn_scheduledend = null;
		
		public readonly Money msdyn_VarianceOfCost = null;
		
		public readonly Money msdyn_remainingsales_Base = null;
		
		public readonly bool? msdyn_IsMilestone = null;
		
		public readonly Money msdyn_PlannedSales = null;
		
		public readonly Money msdyn_RemainingCost = null;
		
		public readonly EntityReference msdyn_transactioncategory = null;
		
		public readonly Money msdyn_plannedsales_Base = null;
		
		public readonly double? msdyn_EffortEstimateAtComplete = null;
		
		public readonly string traversedpath = null;
		
		public readonly Money msdyn_ActualSales = null;
		
		public readonly string msdyn_EffortContour = null;
		
		public readonly double? msdyn_Effort = null;
		
		public readonly Money msdyn_salesestimateatcomplete_Base = null;
		
		public readonly Money msdyn_remainingcost_Base = null;
		
		public readonly bool? msdyn_IsLineTask = null;
		
		public readonly Guid? msdyn_projecttaskId = null;
		
		public readonly double? msdyn_ActualEffort = null;
		
		public readonly Guid? processid = null;
		
		public readonly Money msdyn_varianceofcost_Base = null;
		
		public readonly Money msdyn_salesvariance_Base = null;
		
		public readonly string msdyn_CostEstimateContour = null;
		
		public readonly int? msdyn_actualdurationminutes = null;
		
		public readonly string msdyn_description = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Money msdyn_costatcompleteestimate_Base = null;
		
		public readonly Money msdyn_plannedCost = null;
		
		public readonly int? msdyn_PluginProcessingData = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_CostAtCompleteEstimate = null;
		
		public readonly EntityReference msdyn_project = null;
		
		public readonly decimal? msdyn_ResourceUtilization = null;
		
		public readonly Money msdyn_SalesEstimateAtComplete = null;
		
		public readonly string msdyn_AssignedResources = null;
		
		public readonly string msdyn_MSProjectClientId = null;
		
		public readonly OptionSetValue msdyn_AggregationDirection = null;
		
		public readonly int? msdyn_scheduleddurationminutes = null;
		
		public readonly Money msdyn_actualcost_Base = null;
		
		public readonly bool? msdyn_autoscheduling = null;
		
		public readonly double? msdyn_duration = null;
		
		public readonly decimal? msdyn_Progress = null;
		
		public readonly Money msdyn_SalesVariance = null;
		
		public readonly DateTime? msdyn_actualstart = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_AggregationDirection
            {
                Upstream = 0,
                Downstream = 1,
                Both = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcegroup")]
	public class BookableResourceGroup : Entity
    {
        public const string EntityLogicalName = "bookableresourcegroup";
        public BookableResourceGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcegroupid"] = value;
            }
        }
		
		public readonly EntityReference ChildResource = null;
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference ParentResource = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ToDate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? BookableResourceGroupId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? FromDate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("competitor")]
	public class Competitor : Entity
    {
        public const string EntityLogicalName = "competitor";
        public Competitor() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorid"] = value;
            }
        }
		
		public readonly string Strengths = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string Address1_County = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string Weaknesses = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string YomiName = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly string ReferenceInfoUrl = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly int? ReportingYear = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_City = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Overview = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly double? WinPercentage = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly Money ReportedRevenue_Base = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly int? ReportingQuarter = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Name = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly Guid? StageId = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string KeyProduct = null;
		
		public readonly string Address2_City = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string StockExchange = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly Money ReportedRevenue = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Opportunities = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Threats = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("localconfigstore")]
	public class LocalConfigStore : Entity
    {
        public const string EntityLogicalName = "localconfigstore";
        public LocalConfigStore() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("id")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["id"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("id")]
		public readonly Guid? Id1 = null;
		
		public readonly string AssemblyName = null;
		
		public readonly bool? IsValueSet = null;
		
		public readonly string Value = null;
		
		public readonly string KeyName = null;
		
		public readonly string PublicToken = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_integrationjobdetail")]
	public class msdyn_integrationjobdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_integrationjobdetail";
        public msdyn_integrationjobdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_integrationjobdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_integrationjobdetailid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_IntegrationJobHeader = null;
		
		public readonly int? msdyn_SequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_integrationjobdetailId = null;
		
		public readonly string msdyn_ChangesJSON = null;
		
		public readonly string msdyn_FullJSON = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_questionresponse")]
	public class msfp_questionresponse : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_questionresponse";
        public msfp_questionresponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msfp_questionresponseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msfp_questionresponseid"] = value;
            }
        }
		
		public readonly EntityReference msfp_surveyresponseid = null;
		
		public readonly string msfp_sourcesurveyidentifier = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msfp_name = null;
		
		public readonly EntityReference msfp_questionid = null;
		
		public readonly string msfp_sourceresponseidentifier = null;
		
		public readonly string msfp_otherproperties = null;
		
		public readonly string msfp_response = null;
		
		public readonly decimal? msfp_Sentimentvalue = null;
		
		public readonly Guid? msfp_questionresponseId = null;
		
		public readonly string msfp_sourcequestionidentifier = null;
		
		public readonly string msfp_keyphrases = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("timezonerule")]
	public class TimeZoneRule : Entity
    {
        public const string EntityLogicalName = "timezonerule";
        public TimeZoneRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezoneruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezoneruleid"] = value;
            }
        }
		
		public readonly int? DaylightYear = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? StandardMinute = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? EffectiveDateTime = null;
		
		public readonly int? StandardDay = null;
		
		public readonly int? StandardYear = null;
		
		public readonly int? StandardDayOfWeek = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? DaylightMinute = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? DaylightHour = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? StandardHour = null;
		
		public readonly int? StandardBias = null;
		
		public readonly int? DaylightSecond = null;
		
		public readonly int? Bias = null;
		
		public readonly int? DaylightMonth = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? DaylightBias = null;
		
		public readonly int? StandardSecond = null;
		
		public readonly int? DaylightDay = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TimeZoneDefinitionId = null;
		
		public readonly int? StandardMonth = null;
		
		public readonly Guid? TimeZoneRuleId = null;
		
		public readonly int? DaylightDayOfWeek = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("rollupproperties")]
	public class RollupProperties : Entity
    {
        public const string EntityLogicalName = "rollupproperties";
        public RollupProperties() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rolluppropertiesid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rolluppropertiesid"] = value;
            }
        }
		
		public readonly string RollupEntityLogicalName = null;
		
		public readonly string AggregateRelationshipName = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? RollupEntityTypeCode = null;
		
		public readonly string SourceHierarchicalRelationshipName = null;
		
		public readonly Guid? BootstrapRollupAsyncJobId = null;
		
		public readonly string RollupEntityPrimaryKeyPhysicalName = null;
		
		public readonly string RollupAttributeLogicalName = null;
		
		public readonly bool? AllowHierarchyOnSource = null;
		
		public readonly OptionSetValue AggregateType = null;
		
		public readonly string DataType = null;
		
		public readonly int? IsActivityPartyIncluded = null;
		
		public readonly OptionSetValue InitialValueCalculationStatus = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string RollupEntityBaseTableName = null;
		
		public readonly int? BootstrapTargetPointer = null;
		
		public readonly int? BootstrapCurrentDepth = null;
		
		public readonly string RollupFilterAttributes = null;
		
		public readonly int? BootstrapStepNumber = null;
		
		public readonly string RollupStateAttributePhysicalName = null;
		
		public readonly Guid? IncrementalRollupAsyncJobId = null;
		
		public readonly int? AggregateEntityTypeCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? LastCalculationTime = null;
		
		public readonly string AggregateAttributeLogicalName = null;
		
		public readonly Guid? RollupPropertiesId = null;
		
		public readonly string AggregateEntityLogicalName = null;
		
		public readonly int? BootstrapRetryCount = null;
		
		public readonly string AggregateFilterAttributes = null;

        public new static class Options
        {
            public enum StateCode
            {
                Valid = 0,
                Invalid = 1
            }
            public enum AggregateType
            {
                Count = 0,
                Sum = 1,
                Average = 2,
                Min = 3,
                Max = 4
            }
            public enum InitialValueCalculationStatus
            {
                Pending = 0,
                InProgress = 1,
                Paused = 2,
                Completed = 3,
                Failed = 4
            }
            public enum StatusCode
            {
                Valid = 1,
                Invalid = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementresourcepreference")]
	public class msdyn_requirementresourcepreference : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementresourcepreference";
        public msdyn_requirementresourcepreference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementresourcepreferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementresourcepreferenceid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_ExpirationDate = null;
		
		public readonly EntityReference msdyn_Account = null;
		
		public readonly OptionSetValue msdyn_PreferenceType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_Cascade = null;
		
		public readonly Guid? msdyn_requirementresourcepreferenceId = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly EntityReference msdyn_BookableResource = null;
		
		public readonly EntityReference msdyn_ResourceRequirement = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_PreferenceType
            {
                Preferred = 690970000,
                Restricted = 690970001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgearticleincident")]
	public class KnowledgeArticleIncident : Entity
    {
        public const string EntityLogicalName = "knowledgearticleincident";
        public KnowledgeArticleIncident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleincidentid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsSentToCustomer = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue KnowledgeUsage = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? KnowledgeArticleIncidentId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum KnowledgeUsage
            {
                Reference = 1,
                Solution = 2,
                Source = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_dimension")]
	public class msdyn_dimension : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_dimension";
        public msdyn_dimension() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_dimensionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_dimensionid"] = value;
            }
        }
		
		public readonly bool? msdyn_ApplicableToSales = null;
		
		public readonly Guid? msdyn_dimensionId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_SalesPriority = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly bool? msdyn_ApplicableToPurchase = null;
		
		public readonly int? msdyn_CostPriority = null;
		
		public readonly int? msdyn_PurchasePriority = null;
		
		public readonly bool? msdyn_ApplicableToCost = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Type
            {
                AmountBased = 192350000,
                MarkupBased = 192350001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_forecastrecurrence")]
	public class msdyn_forecastrecurrence : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_forecastrecurrence";
        public msdyn_forecastrecurrence() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_forecastrecurrenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_forecastrecurrenceid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_recalculatestatuschangedon = null;
		
		public readonly string msdyn_recalculationstatusdescription = null;
		
		public readonly int? msdyn_recurrenceindex = null;
		
		public readonly string msdyn_failureinfo = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_inprogressparticipatingrecordsfetchxml = null;
		
		public readonly Guid? msdyn_forecastrecurrenceId = null;
		
		public readonly DateTime? msdyn_lastrecalculatedon = null;
		
		public readonly bool? msdyn_ishierarchylocked = null;
		
		public readonly DateTime? msdyn_recalculationstarttime = null;
		
		public readonly string msdyn_actualparticipatingrecordsfetchxml = null;
		
		public readonly EntityReference msdyn_forecastdefinitionid = null;
		
		public readonly DateTime? msdyn_validfrom = null;
		
		public readonly DateTime? msdyn_validto = null;
		
		public readonly int? msdyn_recalculationstatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("socialinsightsconfiguration")]
	public class SocialInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "socialinsightsconfiguration";
        public SocialInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialinsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialinsightsconfigurationid"] = value;
            }
        }
		
		public readonly string ControlId = null;
		
		public readonly EntityReference FormId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string SocialDataParameters = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string SocialDataItemId = null;
		
		public readonly OptionSetValue SocialDataItemType = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SocialInsightsConfigurationId = null;

        public new static class Options
        {
            public enum SocialDataItemType
            {
                SearchItem = 1,
                Class = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("leadproduct")]
	public class LeadProduct : Entity
    {
        public const string EntityLogicalName = "leadproduct";
        public LeadProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadproductid"] = value;
            }
        }
		
		public readonly Guid? LeadId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? LeadProductId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mailboxtrackingfolder")]
	public class MailboxTrackingFolder : Entity
    {
        public const string EntityLogicalName = "mailboxtrackingfolder";
        public MailboxTrackingFolder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxtrackingfolderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxtrackingfolderid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ExchangeFolderId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ExchangeFolderName = null;
		
		public readonly Guid? MailboxTrackingFolderId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference MailboxId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? FolderOnboardingStatus = null;
		
		public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rmaproduct")]
	public class msdyn_rmaproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rmaproduct";
        public msdyn_rmaproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rmaproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rmaproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ReturntoWarehouse = null;
		
		public readonly bool? msdyn_CredittoAccount = null;
		
		public readonly EntityReference msdyn_RMA = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly double? msdyn_Quantitytoreturn = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly OptionSetValue msdyn_ItemStatus = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_WOProduct = null;
		
		public readonly double? msdyn_QtyProcessed = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly Guid? msdyn_rmaproductId = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_ReturntoVendor = null;
		
		public readonly EntityReference msdyn_Changeownership = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly double? msdyn_QtyReceived = null;
		
		public readonly OptionSetValue msdyn_ProcessingAction = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly Money msdyn_TotalAmount = null;

        public new static class Options
        {
            public enum msdyn_ItemStatus
            {
                Pending = 690970000,
                Received = 690970001,
                Canceled = 690970002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_ProcessingAction
            {
                CreateRTV = 690970000,
                ReturnToWarehouse = 690970001,
                ChangeAssetOwnership = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importdata")]
	public class ImportData : Entity
    {
        public const string EntityLogicalName = "importdata";
        public ImportData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importdataid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Data = null;
		
		public readonly Guid? ImportDataId = null;
		
		public readonly int? LineNumber = null;
		
		public readonly Guid? RecordId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? HasError = null;
		
		public readonly OptionSetValue ErrorType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ImportFileId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ErrorType
            {
                Create = 0,
                Update = 1
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("solutioncomponentdefinition")]
	public class SolutionComponentDefinition : Entity
    {
        public const string EntityLogicalName = "solutioncomponentdefinition";
        public SolutionComponentDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentdefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentdefinitionid"] = value;
            }
        }
		
		public readonly string IntroducedVersion = null;
		
		public readonly string ParentAttributeName = null;
		
		public readonly string ComponentXPath = null;
		
		public readonly bool? AllowOverwriteCustomizations = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? RootComponent = null;
		
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? SolutionComponentType = null;
		
		public readonly bool? AllowRecreateForLogicallyDeletedRow = null;
		
		public readonly bool? IsMergeable = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? DescendentIsViewableComponent = null;
		
		public readonly string GroupParentComponentAttributeName = null;
		
		public readonly int? GroupParentComponentType = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? AlwaysRemoveActiveCustomizationsOnUninstall = null;
		
		public readonly int? ViewableDescendentComponentType = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? HasIsRenameableAttribute = null;
		
		public readonly Guid? SolutionComponentDefinitionIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? CanBeAddedToSolutionComponents = null;
		
		public readonly bool? UseForceDeleteForSolutionUpdate = null;
		
		public readonly OptionSetValue RemoveActiveCustomizationsBehavior = null;
		
		public readonly bool? AllowDeleteBaseSolutionRowAndFakeDelete = null;
		
		public readonly Guid? SolutionComponentDefinitionId = null;
		
		public readonly bool? UseSentinelRowInBaseSolution = null;
		
		public readonly bool? IsMetadata = null;
		
		public readonly bool? CanBeHidden = null;
		
		public readonly int? LabelTypeCode = null;
		
		public readonly bool? IsDependencyDisabled = null;
		
		public readonly bool? UseForceUpdateAlways = null;
		
		public readonly bool? IsViewable = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string RootAttributeName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RemoveActiveCustomizationsBehavior
            {
                None = 0,
                NoCascade = 1,
                Cascade = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_analysisresultdetail")]
	public class msdyn_analysisresultdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisresultdetail";
        public msdyn_analysisresultdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisresultdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisresultdetailid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_AnalysisResult = null;
		
		public readonly string msdyn_ResultEntityId = null;
		
		public readonly string msdyn_ResultEntityLogicalName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_ResultEntityPrimaryKey = null;
		
		public readonly Guid? msdyn_analysisresultdetailId = null;
		
		public readonly string msdyn_EntityName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementcharacteristic")]
	public class msdyn_requirementcharacteristic : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementcharacteristic";
        public msdyn_requirementcharacteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementcharacteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementcharacteristicid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_RatingValue = null;
		
		public readonly Guid? msdyn_requirementcharacteristicId = null;
		
		public readonly EntityReference msdyn_WorkOrderIncident = null;
		
		public readonly EntityReference msdyn_Characteristic = null;
		
		public readonly EntityReference msdyn_RequirementSystemUse = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelinetransactionclassification")]
	public class msdyn_quotelinetransactionclassification : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelinetransactionclassification";
        public msdyn_quotelinetransactionclassification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelinetransactionclassificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelinetransactionclassificationid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly bool? msdyn_Include = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_QuoteLineId = null;
		
		public readonly Guid? msdyn_quotelinetransactionclassificationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("recurrencerule")]
	public class RecurrenceRule : Entity
    {
        public const string EntityLogicalName = "recurrencerule";
        public RecurrenceRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ruleid"] = value;
            }
        }
		
		public readonly bool? IsRegenerate = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? EffectiveStartDate = null;
		
		public readonly OptionSetValue MonthOfYear = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly bool? IsWeekDayPattern = null;
		
		public readonly DateTime? EffectiveEndDate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Interval = null;
		
		public readonly bool? IsNthYearly = null;
		
		public readonly Guid? RuleId = null;
		
		public readonly int? Duration = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? DayOfMonth = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue PatternEndType = null;
		
		public readonly OptionSetValue Instance = null;
		
		public readonly int? DaysOfWeekMask = null;
		
		public readonly OptionSetValue RecurrencePatternType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsNthMonthly = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? FirstDayOfWeek = null;
		
		public readonly int? Occurrences = null;
		
		public readonly DateTime? PatternStartDate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? PatternEndDate = null;
		
		public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementtemplatechannel")]
	public class EntitlementTemplateChannel : Entity
    {
        public const string EntityLogicalName = "entitlementtemplatechannel";
        public EntitlementTemplateChannel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplatechannelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplatechannelid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference EntitlementTemplateId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? EntitlementTemplateChannelId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue Channel = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum Channel
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessageresponsefield")]
	public class SdkMessageResponseField : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponsefield";
        public SdkMessageResponseField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponsefieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponsefieldid"] = value;
            }
        }
		
		public readonly string ClrFormatter = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly string ParameterBindingInformation = null;
		
		public readonly EntityReference SdkMessageResponseId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Value = null;
		
		public readonly string Formatter = null;
		
		public readonly Guid? SdkMessageResponseFieldIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string PublicName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SdkMessageResponseFieldId = null;
		
		public readonly int? Position = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingalert")]
	public class msdyn_bookingalert : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingalert";
        public msdyn_bookingalert() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_customerassetcategory")]
	public class msdyn_customerassetcategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_customerassetcategory";
        public msdyn_customerassetcategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_customerassetcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_customerassetcategoryid"] = value;
            }
        }
		
		public readonly Guid? msdyn_customerassetcategoryId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("campaignactivity")]
	public class CampaignActivity : Entity
    {
        public const string EntityLogicalName = "campaignactivity";
        public CampaignActivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection from = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ExcludeIfContactedInXDays = null;
		
		public readonly Money BudgetedCost_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly Money ActualCost_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Subcategory = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly bool? DoNotSendOnOptOut = null;
		
		public readonly string Category = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Money ActualCost = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IgnoreInactiveListMembers = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money BudgetedCost = null;
		
		public readonly OptionSetValue ChannelTypeCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly OptionSetValue TypeCode = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Proposed = 1,
                InProgress = 0,
                Closed = 2,
                Canceled = 3,
                Pending = 4,
                SystemAborted = 5,
                Completed = 6
            }
            public enum ChannelTypeCode
            {
                Phone = 1,
                Appointment = 2,
                Letter = 3,
                LetterViaMailMerge = 4,
                Fax = 5,
                FaxViaMailMerge = 6,
                Email = 7,
                EmailViaMailMerge = 8,
                Other = 9
            }
            public enum TypeCode
            {
                Research = 1,
                ContentPreparation = 2,
                TargetMarketingListCreation = 3,
                LeadQualification = 4,
                ContentDistribution = 5,
                DirectInitialContact = 6,
                DirectFollowUpContact = 7,
                ReminderDistribution = 8
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementsubstatus")]
	public class msdyn_agreementsubstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementsubstatus";
        public msdyn_agreementsubstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementsubstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementsubstatusid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_DefaultSubStatus = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly Guid? msdyn_agreementsubstatusId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_SystemStatus
            {
                Estimate = 690970000,
                Active = 690970001,
                Expired = 690970002,
                Canceled = 690970003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttypessetup")]
	public class msdyn_incidenttypessetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttypessetup";
        public msdyn_incidenttypessetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypessetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypessetupid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly Guid? msdyn_incidenttypessetupId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementtemplate")]
	public class EntitlementTemplate : Entity
    {
        public const string EntityLogicalName = "entitlementtemplate";
        public EntitlementTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplateid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue entitytype = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly OptionSetValue KbAccessLevel = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? EntitlementTemplateId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue AllocationTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue DecreaseRemainingOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? RestrictCaseCreation = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum entitytype
            {
                WorkOrder = 192350000,
                Case = 0
            }
            public enum KbAccessLevel
            {
                Standard = 0,
                Premium = 1,
                None = 2
            }
            public enum AllocationTypeCode
            {
                NumberOfCases = 0,
                NumberOfHours = 1
            }
            public enum DecreaseRemainingOn
            {
                CaseResolution = 0,
                CaseCreation = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemusermanagermap")]
	public class SystemUserManagerMap : Entity
    {
        public const string EntityLogicalName = "systemusermanagermap";
        public SystemUserManagerMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusermanagermapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusermanagermapid"] = value;
            }
        }
		
		public readonly int? HierarchyLevel = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserManagerMapId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? ParentSystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("activityparty")]
	public class ActivityParty : Entity
    {
        public const string EntityLogicalName = "activityparty";
        public ActivityParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitypartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitypartyid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly string AddressUsed = null;
		
		public readonly EntityReference ResourceSpecId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly EntityReference PartyId = null;
		
		public readonly OptionSetValue ParticipationTypeMask = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly bool? DoNotEmail = null;
		
		public readonly int? AddressUsedEmailColumnNumber = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly Guid? ActivityPartyId = null;
		
		public readonly double? Effort = null;
		
		public readonly bool? IsPartyDeleted = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly EntityReference ActivityId = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ParticipationTypeMask
            {
                Sender = 1,
                ToRecipient = 2,
                CCRecipient = 3,
                BCCRecipient = 4,
                RequiredAttendee = 5,
                OptionalAttendee = 6,
                Organizer = 7,
                Regarding = 8,
                Owner = 9,
                Resource = 10,
                Customer = 11
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("productassociation")]
	public class ProductAssociation : Entity
    {
        public const string EntityLogicalName = "productassociation";
        public ProductAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productassociationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly OptionSetValue PropertyCustomizationStatus = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue ProductIsRequired = null;
		
		public readonly EntityReference AssociatedProduct = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? DMTImportState = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1,
                Draft = 2,
                UnderRevision = 3
            }
            public enum PropertyCustomizationStatus
            {
                NotAvailable = 0,
                Available = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2,
                Draft = 0,
                DraftActive = 3
            }
            public enum ProductIsRequired
            {
                Optional = 0,
                Required = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequirement")]
	public class msdyn_resourcerequirement : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourcerequirement";
        public msdyn_resourcerequirement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequirementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequirementid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_TimeToPromised = null;
		
		public readonly EntityReference msdyn_requirementrelationshipid = null;
		
		public readonly bool? msdyn_istemplate = null;
		
		public readonly EntityReference msdyn_AppointmentRequirementId = null;
		
		public readonly string msdyn_sortoptions = null;
		
		public readonly EntityReference msdyn_Status = null;
		
		public readonly string msdyn_city = null;
		
		public readonly string msdyn_CalendarId = null;
		
		public readonly string msdyn_requeststatus = null;
		
		public readonly OptionSetValue msdyn_type = null;
		
		public readonly DateTime? msdyn_TimeWindowEnd = null;
		
		public readonly EntityReference msdyn_roleid = null;
		
		public readonly EntityReference msdyn_Territory = null;
		
		public readonly decimal? msdyn_quantity = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string msdyn_templaterequirementid = null;
		
		public readonly decimal? msdyn_fulfilledhours = null;
		
		public readonly EntityReference msdyn_TimeGroup = null;
		
		public readonly EntityReference msdyn_workhourtemplate = null;
		
		public readonly EntityReference msdyn_requirementgroupid = null;
		
		public readonly OptionSetValue msdyn_allocationmethod = null;
		
		public readonly Guid? msdyn_resourcerequirementId = null;
		
		public readonly DateTime? msdyn_todate = null;
		
		public readonly decimal? msdyn_effort = null;
		
		public readonly Money msdyn_costprice_Base = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly DateTime? msdyn_TimeWindowStart = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_requirementgroupcontrolviewid = null;
		
		public readonly int? msdyn_FulfilledDuration = null;
		
		public readonly EntityReference msdyn_projectid = null;
		
		public readonly EntityReference msdyn_Priority = null;
		
		public readonly string msdyn_country = null;
		
		public readonly int? msdyn_RemainingDuration = null;
		
		public readonly bool? msdyn_IsPrimary = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? msdyn_fromdate = null;
		
		public readonly DateTime? msdyn_TimeFromPromised = null;
		
		public readonly EntityReference msdyn_BookingSetupMetadataId = null;
		
		public readonly Money msdyn_costprice = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly decimal? msdyn_percentage = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly string msdyn_stateorprovince = null;
		
		public readonly int? msdyn_ProposedDuration = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly decimal? msdyn_hours = null;

        public new static class Options
        {
            public enum msdyn_type
            {
                New = 192350000,
                Extend = 192350001
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_allocationmethod
            {
                None = 192350000,
                FullCapacity = 192350001,
                PercentageCapacity = 192350004,
                DistributeEvenly = 192350003,
                FrontLoad = 192350005
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("salesliterature")]
	public class SalesLiterature : Entity
    {
        public const string EntityLogicalName = "salesliterature";
        public SalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesliteratureid"] = value;
            }
        }
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? HasAttachments = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string KeyWords = null;
		
		public readonly DateTime? ExpirationDate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference EmployeeContactId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsCustomerViewable = null;
		
		public readonly OptionSetValue LiteratureTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum LiteratureTypeCode
            {
                Presentation = 0,
                ProductSheet = 1,
                PoliciesAndProcedures = 2,
                SalesLiterature = 3,
                Spreadsheets = 4,
                News = 5,
                Bulletins = 6,
                PriceSheets = 7,
                Manuals = 8,
                CompanyBackground = 9,
                MarketingCollateral = 100001
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("theme")]
	public class Theme : Entity
    {
        public const string EntityLogicalName = "theme";
        public Theme() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("themeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["themeid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string NavBarShelfColor = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string HoverLinkEffect = null;
		
		public readonly string ControlBorder = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string GlobalLinkColor = null;
		
		public readonly string ProcessControlColor = null;
		
		public readonly EntityReference LogoId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ThemeId = null;
		
		public readonly string PanelHeaderBackgroundColor = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ControlShade = null;
		
		public readonly string PageHeaderBackgroundColor = null;
		
		public readonly string DefaultCustomEntityColor = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string AccentColor = null;
		
		public readonly string MainColor = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string DefaultEntityColor = null;
		
		public readonly string LogoToolTip = null;
		
		public readonly string SelectedLinkEffect = null;
		
		public readonly string HeaderColor = null;
		
		public readonly bool? Type = null;
		
		public readonly string NavBarBackgroundColor = null;
		
		public readonly string BackgroundColor = null;
		
		public readonly bool? IsDefaultTheme = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Custom = 0,
                System = 1
            }
            public enum statuscode
            {
                Custom = 1,
                System = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingrule")]
	public class msdyn_bookingrule : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingrule";
        public msdyn_bookingrule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_WebResource = null;
		
		public readonly string msdyn_CodeofRule = null;
		
		public readonly string msdyn_MethodName = null;
		
		public readonly Guid? msdyn_bookingruleId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdynsm_marketingsitemap")]
	public class msdynsm_marketingsitemap : OrganizationEntity
    {
        public const string EntityLogicalName = "msdynsm_marketingsitemap";
        public msdynsm_marketingsitemap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdynsm_marketingsitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdynsm_marketingsitemapid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdynsm_name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdynsm_marketingsitemapId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("incident")]
	public class Incident : Entity
    {
        public const string EntityLogicalName = "incident";
        public Incident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("incidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["incidentid"] = value;
            }
        }
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference ResolveByKPIId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly OptionSetValue CaseOriginCode = null;
		
		public readonly EntityReference ExistingCase = null;
		
		public readonly DateTime? ResolveBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsEscalated = null;
		
		public readonly EntityReference ContractId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly double? SentimentValue = null;
		
		public readonly EntityReference ResponsibleContactId = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference KbArticleId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? ActivitiesComplete = null;
		
		public readonly OptionSetValue FirstResponseSLAStatus = null;
		
		public readonly OptionSetValue ServiceStage = null;
		
		public readonly EntityReference msdyn_iotalert = null;
		
		public readonly bool? DecrementEntitlementTerm = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly OptionSetValue int_CustomerEffort = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? InfluenceScore = null;
		
		public readonly EntityReference ContractDetailId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TicketNumber = null;
		
		public readonly bool? BlockedProfile = null;
		
		public readonly bool? FirstResponseSent = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string ProductSerialNumber = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ActualServiceUnits = null;
		
		public readonly EntityReference ParentCaseId = null;
		
		public readonly EntityReference PrimaryContactId = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference EntitlementId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? CheckEmail = null;
		
		public readonly int? BilledServiceUnits = null;
		
		public readonly OptionSetValue CaseTypeCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ResponseBy = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string EmailAddress = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? RouteCase = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference FirstResponseByKPIId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly bool? Merged = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly OptionSetValue SeverityCode = null;
		
		public readonly DateTime? FollowupBy = null;
		
		public readonly OptionSetValue ResolveBySLAStatus = null;
		
		public readonly bool? IsDecrementing = null;
		
		public readonly OptionSetValue CustomerSatisfactionCode = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue IncidentStageCode = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? CustomerContacted = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? IncidentId = null;
		
		public readonly bool? int_UpSellReferral = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference SocialProfileId = null;
		
		public readonly bool? FollowUpTaskCreated = null;
		
		public readonly DateTime? EscalatedOn = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? NumberOfChildIncidents = null;
		
		public readonly OptionSetValue MessageTypeCode = null;

        public new static class Options
        {
            public enum CaseOriginCode
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }
            public enum StatusCode
            {
                ProblemSolved = 5,
                InformationProvided = 1000,
                Cancelled = 6,
                Merged = 2000,
                InProgress = 1,
                OnHold = 2,
                WaitingForDetails = 3,
                Researching = 4
            }
            public enum FirstResponseSLAStatus
            {
                InProgress = 1,
                NearingNoncompliance = 2,
                Succeeded = 3,
                Noncompliant = 4
            }
            public enum ServiceStage
            {
                Identify = 0,
                Research = 1,
                Resolve = 2
            }
            public enum int_CustomerEffort
            {
                Low = 121590000,
                Medium = 121590001,
                High = 121590002
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }
            public enum CaseTypeCode
            {
                Question = 1,
                Problem = 2,
                Request = 3
            }
            public enum SeverityCode
            {
                DefaultValue = 1
            }
            public enum ResolveBySLAStatus
            {
                InProgress = 1,
                NearingNoncompliance = 2,
                Succeeded = 3,
                Noncompliant = 4
            }
            public enum CustomerSatisfactionCode
            {
                VerySatisfied = 5,
                Satisfied = 4,
                Neutral = 3,
                Dissatisfied = 2,
                VeryDissatisfied = 1
            }
            public enum StateCode
            {
                Active = 0,
                Resolved = 1,
                Cancelled = 2
            }
            public enum IncidentStageCode
            {
                DefaultValue = 1
            }
            public enum PriorityCode
            {
                High = 1,
                Normal = 2,
                Low = 3
            }
            public enum MessageTypeCode
            {
                PublicMessage = 0,
                PrivateMessage = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("transactioncurrency")]
	public class TransactionCurrency : Entity
    {
        public const string EntityLogicalName = "transactioncurrency";
        public TransactionCurrency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transactioncurrencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transactioncurrencyid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? TransactionCurrencyId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CurrencyPrecision = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ISOCurrencyCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string CurrencyName = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("slakpiinstance")]
	public class SLAKPIInstance : Entity
    {
        public const string EntityLogicalName = "slakpiinstance";
        public SLAKPIInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slakpiinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slakpiinstanceid"] = value;
            }
        }
		
		public readonly OptionSetValue Status = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue WarningTimeReached = null;
		
		public readonly EntityReference Regarding = null;
		
		public readonly DateTime? ComputedFailureTime = null;
		
		public readonly DateTime? ComputedWarningTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SLAKPIInstanceId = null;
		
		public readonly DateTime? WarningTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? FailureTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? SucceededOn = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Status
            {
                InProgress = 0,
                Noncompliant = 1,
                NearingNoncompliance = 2,
                Paused = 3,
                Succeeded = 4,
                Canceled = 5
            }
            public enum WarningTimeReached
            {
                No = 0,
                Yes = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sharepointdocumentlocation")]
	public class SharePointDocumentLocation : Entity
    {
        public const string EntityLogicalName = "sharepointdocumentlocation";
        public SharePointDocumentLocation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentlocationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentlocationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? UserId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string AbsoluteURL = null;
		
		public readonly Guid? SiteCollectionId = null;
		
		public readonly OptionSetValue ServiceType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? SharePointDocumentLocationId = null;
		
		public readonly EntityReference ParentSiteOrLocation = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string RelativeUrl = null;
		
		public readonly OptionSetValue LocationType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum LocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactiontype")]
	public class msdyn_transactiontype : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_transactiontype";
        public msdyn_transactiontype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactiontypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactiontypeid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference msdyn_UnitGroup = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly Guid? msdyn_transactiontypeId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_DefaultUnit = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("monthlyfiscalcalendar")]
	public class MonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "monthlyfiscalcalendar";
        public MonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("month1_base")]
		public readonly Money Period1_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month6_base")]
		public readonly Money Period6_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month11_base")]
		public readonly Money Period11_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month10_base")]
		public readonly Money Period10_Base = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month3_base")]
		public readonly Money Period3_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month11")]
		public readonly Money Period11 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month10")]
		public readonly Money Period10 = null;
		
		public readonly int? FiscalPeriodType = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month12")]
		public readonly Money Period12 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month7")]
		public readonly Money Period7 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month6")]
		public readonly Money Period6 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month9")]
		public readonly Money Period9 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month8")]
		public readonly Money Period8 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month4_base")]
		public readonly Money Period4_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month7_base")]
		public readonly Money Period7_Base = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? EffectiveOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month5")]
		public readonly Money Period5 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month4")]
		public readonly Money Period4 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month2")]
		public readonly Money Period2 = null;
		
		public readonly decimal? ExchangeRate = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month12_base")]
		public readonly Money Period12_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month1")]
		public readonly Money Period1 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month2_base")]
		public readonly Money Period2_Base = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month3")]
		public readonly Money Period3 = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month8_base")]
		public readonly Money Period8_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month5_base")]
		public readonly Money Period5_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month9_base")]
		public readonly Money Period9_Base = null;
		
		public readonly EntityReference SalesPersonId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingalertstatus")]
	public class msdyn_bookingalertstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingalertstatus";
        public msdyn_bookingalertstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingalertstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingalertstatusid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_NextTimeToShow = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_bookingalertstatusId = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly EntityReference msdyn_BookingAlert = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Normal = 690970001,
                Snoozed = 690970000
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("plugintype")]
	public class PluginType : Entity
    {
        public const string EntityLogicalName = "plugintype";
        public PluginType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypeid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string FriendlyName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Culture = null;
		
		public readonly int? Major = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly string AssemblyName = null;
		
		public readonly string PublicKeyToken = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsWorkflowActivity = null;
		
		public readonly Guid? PluginTypeId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TypeName = null;
		
		public readonly Guid? PluginTypeIdUnique = null;
		
		public readonly string WorkflowActivityGroupName = null;
		
		public readonly string CustomWorkflowActivityInfo = null;
		
		public readonly EntityReference PluginAssemblyId = null;
		
		public readonly int? Minor = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sitemap")]
	public class SiteMap : Entity
    {
        public const string EntityLogicalName = "sitemap";
        public SiteMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sitemapid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SiteMapXml = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string SiteMapXmlManaged = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SiteMapIdUnique = null;
		
		public readonly string SiteMapNameUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsAppAware = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SiteMapId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string SiteMapName = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("webwizard")]
	public class WebWizard : Entity
    {
        public const string EntityLogicalName = "webwizard";
        public WebWizard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webwizardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webwizardid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? StartPageSequenceNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? WizardPageHeight = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? IsStaticPageSequence = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? WebWizardIdUnique = null;
		
		public readonly int? WizardPageWidth = null;
		
		public readonly Guid? WebWizardId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string AccessPrivileges = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string TitleResourceString = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("new_ordersummary")]
	public class new_ordersummary : UserOrTeamEntity
    {
        public const string EntityLogicalName = "new_ordersummary";
        public new_ordersummary() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_ordersummaryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_ordersummaryid"] = value;
            }
        }
		
		public readonly Guid? new_ordersummaryId = null;
		
		public readonly Money new_totalamount_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? new_qty = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string new_period = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money new_totalamount = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("transformationmapping")]
	public class TransformationMapping : Entity
    {
        public const string EntityLogicalName = "transformationmapping";
        public TransformationMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationmappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly Guid? TransformationMappingIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? TransformationMappingId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly string TransformationTypeName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_expensereceipt")]
	public class msdyn_expensereceipt : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_expensereceipt";
        public msdyn_expensereceipt() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_expensereceiptid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_expensereceiptid"] = value;
            }
        }
		
		public readonly Guid? msdyn_expensereceiptId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_ExpenseId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("reportlink")]
	public class ReportLink : Entity
    {
        public const string EntityLogicalName = "reportlink";
        public ReportLink() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportlinkid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportlinkid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly OptionSetValue LinkTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? ReportLinkId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string LinkedReportName = null;
		
		public readonly Guid? ReportLinkIdUnique = null;
		
		public readonly EntityReference LinkedReportId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum LinkTypeCode
            {
                DrillThrough = 1,
                SubReport = 2,
                DrillThroughAndSubReport = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contactquotes")]
	public class ContactQuotes : Entity
    {
        public const string EntityLogicalName = "contactquotes";
        public ContactQuotes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactquoteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactquoteid"] = value;
            }
        }
		
		public readonly Guid? QuoteId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ContactQuoteId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("notification")]
	public class Notification : Entity
    {
        public const string EntityLogicalName = "notification";
        public Notification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("notificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["notificationid"] = value;
            }
        }
		
		public readonly string EventData = null;
		
		public readonly Guid? NotificationId = null;
		
		public readonly string CreatedOnString = null;
		
		public readonly int? EventId = null;
		
		public readonly int? NotificationNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmodulecomponent")]
	public class AppModuleComponent : Entity
    {
        public const string EntityLogicalName = "appmodulecomponent";
        public AppModuleComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulecomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulecomponentid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? AppModuleComponentId = null;
		
		public readonly bool? IsMetadata = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference AppModuleIdUnique = null;
		
		public readonly Guid? RootAppModuleComponentId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? AppModuleComponentIdUnique = null;
		
		public readonly OptionSetValue RootComponentBehavior = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentType
            {
                Entities = 1,
                Views = 26,
                BusinessProcessFlows = 29,
                CommandRibbonForFormsGridsSubGrids = 48,
                Charts = 59,
                Forms = 60,
                Sitemap = 62
            }
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitydatasource")]
	public class EntityDataSource : Entity
    {
        public const string EntityLogicalName = "entitydatasource";
        public EntityDataSource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitydatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitydatasourceid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string ConnectionDefinitionSecrets = null;
		
		public readonly Guid? EntityDataSourceIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string EntityName = null;
		
		public readonly Guid? EntityDataSourceId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string ConnectionDefinition = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference EntityDataProviderId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appointment")]
	public class Appointment : Entity
    {
        public const string EntityLogicalName = "appointment";
        public Appointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? OriginalStartDate = null;
		
		public readonly int? AttachmentCount = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue AttachmentErrors = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly int? IsUnsafe = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsDraft = null;
		
		public readonly string Location = null;
		
		public readonly string GlobalObjectId = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection requiredattendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsAllDayEvent = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ModifiedFieldsMask = null;
		
		public readonly int? OutlookOwnerApptId = null;
		
		public readonly int? ActualDurationMinutes = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum AttachmentErrors
            {
                None = 0,
                TheAppointmentWasSavedAsAMicrosoftDynamics365AppointmentRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_inventorytransfer")]
	public class msdyn_inventorytransfer : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_inventorytransfer";
        public msdyn_inventorytransfer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_inventorytransferid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_inventorytransferid"] = value;
            }
        }
		
		public readonly string msdyn_AutoNumbering = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_inventorytransferId = null;
		
		public readonly EntityReference msdyn_DestinationWarehouse = null;
		
		public readonly EntityReference msdyn_SourceWarehouse = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_TransferredByResource = null;
		
		public readonly DateTime? msdyn_TransferTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribbontabtocommandmap")]
	public class RibbonTabToCommandMap : Entity
    {
        public const string EntityLogicalName = "ribbontabtocommandmap";
        public RibbonTabToCommandMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbontabtocommandmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbontabtocommandmapid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? RibbonTabToCommandMapId = null;
		
		public readonly Guid? RibbonTabToCommandMapUniqueId = null;
		
		public readonly string Command = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference RibbonDiffId = null;
		
		public readonly string TabId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Entity = null;
		
		public readonly string ControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("suggestioncardtemplate")]
	public class SuggestionCardTemplate : Entity
    {
        public const string EntityLogicalName = "suggestioncardtemplate";
        public SuggestionCardTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("suggestioncardtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["suggestioncardtemplateid"] = value;
            }
        }
		
		public readonly Guid? SuggestionCardTemplateId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string StructuredLayout = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_geofenceevent")]
	public class msdyn_geofenceevent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_geofenceevent";
        public msdyn_geofenceevent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_geofenceeventid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_geofenceeventid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Geofence = null;
		
		public readonly string msdyn_GeotrackedEntity = null;
		
		public readonly OptionSetValue msdyn_GeofenceStatus = null;
		
		public readonly string msdyn_GeotrackedRecord = null;
		
		public readonly Guid? msdyn_geofenceeventId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_GeofenceStatus
            {
                Entered = 1,
                Exited = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ratingvalue")]
	public class RatingValue : Entity
    {
        public const string EntityLogicalName = "ratingvalue";
        public RatingValue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ratingvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ratingvalueid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Value = null;
		
		public readonly Guid? RatingValueId = null;
		
		public readonly EntityReference RatingModel = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? msdyn_IsDefault = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2,
                DisabledByGenerationProcess = 192350000
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sharepointdocument")]
	public class SharePointDocument : Entity
    {
        public const string EntityLogicalName = "sharepointdocument";
        public SharePointDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentid"] = value;
            }
        }
		
		public readonly string AbsoluteUrl = null;
		
		public readonly int? ChildItemCount = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? DocumentId = null;
		
		public readonly string IconClassName = null;
		
		public readonly string Author = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Title = null;
		
		public readonly Guid? SharePointDocumentId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ContentTypeId = null;
		
		public readonly int? FileSize = null;
		
		public readonly string SharePointModifiedBy = null;
		
		public readonly string ContentType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue ServiceType = null;
		
		public readonly string FileType = null;
		
		public readonly bool? IsRecursiveFetch = null;
		
		public readonly OptionSetValue DocumentLocationType = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string EditUrl = null;
		
		public readonly string LocationName = null;
		
		public readonly string ReadUrl = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string RelativeLocation = null;
		
		public readonly string Edit = null;
		
		public readonly string CopySource = null;
		
		public readonly bool? IsFolder = null;
		
		public readonly DateTime? SharePointCreatedOn = null;
		
		public readonly string LocationId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string AppCreatedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FullName = null;
		
		public readonly string CheckedOutTo = null;
		
		public readonly int? ChildFolderCount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Version = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string CheckInComment = null;
		
		public readonly DateTime? Modified = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string AppModifiedBy = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly bool? IsCheckedOut = null;

        public new static class Options
        {
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum DocumentLocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotebookingservicetask")]
	public class msdyn_quotebookingservicetask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotebookingservicetask";
        public msdyn_quotebookingservicetask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotebookingservicetaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotebookingservicetaskid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_customerasset = null;
		
		public readonly int? msdyn_estimatedduration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_quote = null;
		
		public readonly int? msdyn_lineorder = null;
		
		public readonly EntityReference msdyn_quotebookingincident = null;
		
		public readonly bool? msdyn_iscopied = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_TaskType = null;
		
		public readonly Guid? msdyn_quotebookingservicetaskId = null;
		
		public readonly string msdyn_internalflags = null;
		
		public readonly EntityReference msdyn_QuoteBookingSetup = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("quarterlyfiscalcalendar")]
	public class QuarterlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "quarterlyfiscalcalendar";
        public QuarterlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter4_base")]
		public readonly Money Period10_Base = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter1_base")]
		public readonly Money Period1_Base = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? EffectiveOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter4")]
		public readonly Money Period10 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter1")]
		public readonly Money Period1 = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter2")]
		public readonly Money Period4 = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter3")]
		public readonly Money Period7 = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter3_base")]
		public readonly Money Period7_Base = null;
		
		public readonly EntityReference SalesPersonId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter2_base")]
		public readonly Money Period4_Base = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_mlresultcache")]
	public class msdyn_mlresultcache : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_mlresultcache";
        public msdyn_mlresultcache() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_mlresultcacheid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_mlresultcacheid"] = value;
            }
        }
		
		public readonly string msdyn_userid = null;
		
		public readonly int? msdyn_PartNumber = null;
		
		public readonly string msdyn_Entitydescription = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_Expiration = null;
		
		public readonly Guid? msdyn_mlresultcacheId = null;
		
		public readonly string msdyn_data = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("clientupdate")]
	public class ClientUpdate : Entity
    {
        public const string EntityLogicalName = "clientupdate";
        public ClientUpdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("clientupdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["clientupdateid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly bool? WasExecuted = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string SqlScript = null;
		
		public readonly Guid? ClientUpdateId = null;
		
		public readonly OptionSetValue WhenExecute = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum WhenExecute
            {
                BeforeSchemaChanges = 1,
                AfterSchemaChangesButBeforeDownloadData = 2,
                AfterDownloadData = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("plugintracelog")]
	public class PluginTraceLog : Entity
    {
        public const string EntityLogicalName = "plugintracelog";
        public PluginTraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintracelogid"] = value;
            }
        }
		
		public readonly Guid? PersistenceKey = null;
		
		public readonly DateTime? PerformanceConstructorStartTime = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Configuration = null;
		
		public readonly OptionSetValue OperationType = null;
		
		public readonly string SecureConfiguration = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string MessageName = null;
		
		public readonly Guid? PluginStepId = null;
		
		public readonly string Profile = null;
		
		public readonly Guid? PluginTraceLogId = null;
		
		public readonly string PrimaryEntity = null;
		
		public readonly DateTime? PerformanceExecutionStartTime = null;
		
		public readonly string ExceptionDetails = null;
		
		public readonly string MessageBlock = null;
		
		public readonly int? PerformanceExecutionDuration = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string TypeName = null;
		
		public readonly Guid? RequestId = null;
		
		public readonly int? PerformanceConstructorDuration = null;
		
		public readonly int? Depth = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly bool? IsSystemCreated = null;
		
		public readonly Guid? CorrelationId = null;

        public new static class Options
        {
            public enum OperationType
            {
                Unknown = 0,
                PlugIn = 1,
                WorkflowActivity = 2
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_analysiscomponent")]
	public class msdyn_analysiscomponent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysiscomponent";
        public msdyn_analysiscomponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysiscomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysiscomponentid"] = value;
            }
        }
		
		public readonly int? msdyn_sevlowcount = null;
		
		public readonly string msdyn_ComponentId = null;
		
		public readonly OptionSetValue msdyn_AnalysisComponentType = null;
		
		public readonly int? msdyn_RulePassCount = null;
		
		public readonly int? msdyn_sevmediumcount = null;
		
		public readonly EntityReference msdyn_AnalysisJobId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_RetryCount = null;
		
		public readonly OptionSetValue msdyn_ComponentType = null;
		
		public readonly int? msdyn_RuleFailCount = null;
		
		public readonly int? msdyn_ErrorCount = null;
		
		public readonly Guid? msdyn_analysiscomponentId = null;
		
		public readonly int? msdyn_WarningCount = null;
		
		public readonly string msdyn_ComponentVersion = null;
		
		public readonly string msdyn_ComponentName = null;
		
		public readonly EntityReference msdyn_SolutionHealthRuleSetId = null;
		
		public readonly int? msdyn_sevcriticalcount = null;
		
		public readonly int? msdyn_sevhighcount = null;
		
		public readonly int? msdyn_RulePassRate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_AnalysisComponentType
            {
                ComponentHealth = 192350001,
                OrganizationHealth = 192350000
            }
            public enum msdyn_ComponentType
            {
                Solution = 192350000,
                Entity = 192350001,
                View = 192350002,
                Form = 192350003,
                Plugin = 192350004,
                Configuration = 192350005
            }
            public enum statuscode
            {
                Pending = 1,
                Running = 192350000,
                Complete = 192350001,
                Exception = 192350002,
                CompletedWithExceptions = 192350003,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userentityinstancedata")]
	public class UserEntityInstanceData : Entity
    {
        public const string EntityLogicalName = "userentityinstancedata";
        public UserEntityInstanceData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityinstancedataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityinstancedataid"] = value;
            }
        }
		
		public readonly DateTime? ReminderTime = null;
		
		public readonly DateTime? CommonStart = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? FlagStatus = null;
		
		public readonly string FlagRequest = null;
		
		public readonly Guid? UserEntityInstanceDataId = null;
		
		public readonly string ToDoTitle = null;
		
		public readonly string PersonalCategories = null;
		
		public readonly string ToDoSubOrdinal = null;
		
		public readonly DateTime? CommonEnd = null;
		
		public readonly DateTime? DueDate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? ToDoItemFlags = null;
		
		public readonly bool? ReminderSet = null;
		
		public readonly DateTime? FlagDueBy = null;
		
		public readonly DateTime? ToDoOrdinalDate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? StartTime = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseorder")]
	public class msdyn_purchaseorder : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseorder";
        public msdyn_purchaseorder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseorderid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderdate")]
		public readonly DateTime? msdyn_PODate = null;
		
		public readonly DateTime? msdyn_DateExpected = null;
		
		public readonly EntityReference msdyn_ShipVia = null;
		
		public readonly EntityReference msdyn_PaymentTerm = null;
		
		public readonly string msdyn_City = null;
		
		public readonly string msdyn_AutoNumbering = null;
		
		public readonly EntityReference msdyn_Vendor = null;
		
		public readonly Guid? stageid = null;
		
		public readonly string msdyn_Address1 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly string msdyn_Address3 = null;
		
		public readonly OptionSetValue msdyn_ShipTo = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_SubStatus = null;
		
		public readonly EntityReference msdyn_OrderedBy = null;
		
		public readonly EntityReference msdyn_ReceivetoWarehouse = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly EntityReference msdyn_RequestedByResource = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_amountbilled_Base = null;
		
		public readonly string msdyn_Address2 = null;
		
		public readonly string msdyn_Country = null;
		
		public readonly string msdyn_AddressName = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_AmountBilled = null;
		
		public readonly string msdyn_PostalCode = null;
		
		public readonly OptionSetValue msdyn_ApprovalStatus = null;
		
		public readonly EntityReference msdyn_ApprovedRejectedBy = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly Guid? msdyn_purchaseorderId = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly string msdyn_StateOrProvince = null;
		
		public readonly string msdyn_VendorNote = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly Money msdyn_TotalAmount = null;

        public new static class Options
        {
            public enum msdyn_SystemStatus
            {
                Draft = 690970000,
                Submitted = 690970001,
                Canceled = 690970002,
                ProductsReceived = 690970003,
                Billed = 690970004
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_ShipTo
            {
                Site = 690970000,
                BusinessUnit = 690970001,
                ServiceAccount = 690970002,
                Other = 690970003
            }
            public enum msdyn_ApprovalStatus
            {
                Approved = 690970000,
                Rejected = 690970001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_inventoryjournal")]
	public class msdyn_inventoryjournal : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_inventoryjournal";
        public msdyn_inventoryjournal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_inventoryjournalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_inventoryjournalid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_AllocatedToWorkOrder = null;
		
		public readonly OptionSetValue msdyn_JournalType = null;
		
		public readonly EntityReference msdyn_WorkOrderProduct = null;
		
		public readonly OptionSetValue msdyn_TransactionType = null;
		
		public readonly double? msdyn_Quantity = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_PurchaseOrderProduct = null;
		
		public readonly EntityReference msdyn_PurchaseOrderReceiptProduct = null;
		
		public readonly Guid? msdyn_inventoryjournalId = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly EntityReference msdyn_RMAReceiptProduct = null;
		
		public readonly EntityReference msdyn_InventoryAdjustmentProduct = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly EntityReference msdyn_OriginatingJournal = null;
		
		public readonly bool? msdyn_Reversal = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_JournalType
            {
                OnHand = 690970000,
                OnOrder = 690970001,
                Allocated = 690970002
            }
            public enum msdyn_TransactionType
            {
                PurchaseOrderProduct = 690970000,
                PurchaseOrderReceipt = 690970001,
                WOProduct = 690970002,
                InventoryAdjustment = 690970003,
                InventoryTransfer = 690970004,
                RMAProduct = 690970005,
                Manual = 690970006
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_callablecontext")]
	public class msdyn_callablecontext : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_callablecontext";
        public msdyn_callablecontext() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_callablecontextid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_callablecontextid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_EntityOTC")]
		public readonly OptionSetValue msdyn_EntityOTC = null;
		
		public readonly Guid? msdyn_callablecontextId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_EntityLogicalName")][System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_EntityLogicalName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_EntityOTC
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fieldservicesystemjob")]
	public class msdyn_fieldservicesystemjob : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_fieldservicesystemjob";
        public msdyn_fieldservicesystemjob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_fieldservicesystemjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_fieldservicesystemjobid"] = value;
            }
        }
		
		public readonly string msdyn_ExceptionMessage = null;
		
		public readonly string msdyn_OutputParameter = null;
		
		public readonly OptionSetValue msdyn_OutputParameterType = null;
		
		public readonly int? msdyn_JobType = null;
		
		public readonly string msdyn_ExceptionTrace = null;
		
		public readonly OptionSetValue msdyn_JobStatus = null;
		
		public readonly OptionSetValue msdyn_InputParameterType = null;
		
		public readonly string msdyn_InputParameter = null;
		
		public readonly EntityReference msdyn_OwnerId = null;
		
		public readonly int? msdyn_ConditionCode = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_jobname = null;
		
		public readonly Guid? msdyn_fieldservicesystemjobId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_OutputParameterType
            {
                StringList = 690970000,
                Json = 690970001,
                Xml = 690970002
            }
            public enum msdyn_JobStatus
            {
                Pending = 690970000,
                InProgress = 690970001,
                Completed = 690970002,
                Failed = 690970003
            }
            public enum msdyn_InputParameterType
            {
                StringList = 690970000,
                Json = 690970001,
                Xml = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderinvoicingsetup")]
	public class msdyn_orderinvoicingsetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderinvoicingsetup";
        public msdyn_orderinvoicingsetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderinvoicingsetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderinvoicingsetupid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_orderinvoicingsetupId = null;
		
		public readonly string msdyn_RecurrenceSettings = null;
		
		public readonly EntityReference msdyn_Order = null;
		
		public readonly int? msdyn_Revision = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("offlinecommanddefinition")]
	public class OfflineCommandDefinition : Entity
    {
        public const string EntityLogicalName = "offlinecommanddefinition";
        public OfflineCommandDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("commanddefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["commanddefinitionid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string CommandDefinition = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string CommandName = null;
		
		public readonly string SolutionName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string PrimaryEntityLogicalName = null;
		
		public readonly Guid? CommandDefinitionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contactorders")]
	public class ContactOrders : Entity
    {
        public const string EntityLogicalName = "contactorders";
        public ContactOrders() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactorderid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SalesOrderId = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? ContactOrderId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dependencynode")]
	public class DependencyNode : Entity
    {
        public const string EntityLogicalName = "dependencynode";
        public DependencyNode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencynodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencynodeid"] = value;
            }
        }
		
		public readonly EntityReference TopSolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference BaseSolutionId = null;
		
		public readonly Guid? DependencyNodeId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly bool? IsSharedComponent = null;
		
		public readonly double? IntroducedVersion = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly Guid? ParentId = null;

        public new static class Options
        {
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("resourcespec")]
	public class ResourceSpec : Entity
    {
        public const string EntityLogicalName = "resourcespec";
        public ResourceSpec() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcespecid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcespecid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Constraints = null;
		
		public readonly string Description = null;
		
		public readonly string ObjectiveExpression = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly double? EffortRequired = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? SameSite = null;
		
		public readonly Guid? ResourceSpecId = null;
		
		public readonly int? RequiredCount = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? GroupObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projecttaskdependency")]
	public class msdyn_projecttaskdependency : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projecttaskdependency";
        public msdyn_projecttaskdependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projecttaskdependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projecttaskdependencyid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_SuccessorTask = null;
		
		public readonly EntityReference msdyn_PredecessorTask = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_projecttaskdependencyId = null;
		
		public readonly OptionSetValue msdyn_LinkType = null;
		
		public readonly EntityReference msdyn_Project = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_LinkType
            {
                FinishToStart = 192350000,
                StartToStart = 192350001,
                FinishToFinish = 192350002,
                StartToFinish = 192350004
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_msdyn_journal_msdyn_expense")]
	public class msdyn_msdyn_journal_msdyn_expense : Entity
    {
        public const string EntityLogicalName = "msdyn_msdyn_journal_msdyn_expense";
        public msdyn_msdyn_journal_msdyn_expense() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_msdyn_journal_msdyn_expenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_msdyn_journal_msdyn_expenseid"] = value;
            }
        }
		
		public readonly Guid? msdyn_msdyn_journal_msdyn_expenseId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_journalid = null;
		
		public readonly Guid? msdyn_expenseid = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("teamroles")]
	public class TeamRoles : Entity
    {
        public const string EntityLogicalName = "teamroles";
        public TeamRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamroleid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? RoleId = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? TeamRoleId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_paymentterm")]
	public class msdyn_paymentterm : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_paymentterm";
        public msdyn_paymentterm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_paymenttermid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_paymenttermid"] = value;
            }
        }
		
		public readonly int? msdyn_Days = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_paymenttermId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("postregarding")]
	public class PostRegarding : Entity
    {
        public const string EntityLogicalName = "postregarding";
        public PostRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postregardingid"] = value;
            }
        }
		
		public readonly DateTime? LatestAutoPostModifiedOn = null;
		
		public readonly DateTime? LatestManualPostModifiedOn = null;
		
		public readonly string RegardingObjectTypeCodeForSharing = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly Guid? PostRegardingId = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly EntityReference RegardingObjectId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("childincidentcount")]
	public class ChildIncidentCount : Entity
    {
        public const string EntityLogicalName = "childincidentcount";
        public ChildIncidentCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("childincidentcountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["childincidentcountid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ParentCaseId = null;
		
		public readonly string NumberOfChildIncidents = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ChildIncidentCountId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("opportunitysalesprocess")]
	public class OpportunitySalesProcess : Entity
    {
        public const string EntityLogicalName = "opportunitysalesprocess";
        public OpportunitySalesProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference bpf_quoteid = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference bpf_salesorderid = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly int? Duration = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_postalcode")]
	public class msdyn_postalcode : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_postalcode";
        public msdyn_postalcode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postalcodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postalcodeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_postalcodeId = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("transformationparametermapping")]
	public class TransformationParameterMapping : Entity
    {
        public const string EntityLogicalName = "transformationparametermapping";
        public TransformationParameterMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationparametermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationparametermappingid"] = value;
            }
        }
		
		public readonly int? ParameterSequence = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Data = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? TransformationParameterMappingIdUnique = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue DataTypeCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ParameterTypeCode = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransformationMappingId = null;
		
		public readonly Guid? TransformationParameterMappingId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ParameterArrayIndex = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DataTypeCode
            {
                Reference = 0,
                Value = 1
            }
            public enum ParameterTypeCode
            {
                Input = 0,
                Output = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("replicationbacklog")]
	public class ReplicationBacklog : Entity
    {
        public const string EntityLogicalName = "replicationbacklog";
        public ReplicationBacklog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("replicationbacklogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["replicationbacklogid"] = value;
            }
        }
		
		public readonly Guid? TargetDatacenterId = null;
		
		public readonly string Data = null;
		
		public readonly Guid? ReplicationBacklogId = null;
		
		public readonly EntityReference TargetObjectId = null;
		
		public readonly OptionSetValue ReplicationBacklogType = null;

        public new static class Options
        {
            public enum ReplicationBacklogType
            {
                Create = 0,
                Update = 1,
                Delete = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_contractlineinvoiceschedule")]
	public class msdyn_contractlineinvoiceschedule : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_contractlineinvoiceschedule";
        public msdyn_contractlineinvoiceschedule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_contractlineinvoicescheduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_contractlineinvoicescheduleid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly Guid? msdyn_contractlineinvoicescheduleId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_transactioncutoffdate = null;
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? msdyn_InvoiceRunDate = null;
		
		public readonly EntityReference msdyn_ContractLineId = null;
		
		public readonly OptionSetValue msdyn_InvoiceRunStatus = null;
		
		public readonly EntityReference msdyn_ContractLineScheduleOfValue = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_InvoiceRunStatus
            {
                NotRun = 192350000,
                RunSuccessful = 192350001,
                RunFailed = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelaccessprofileentityaccesslevel")]
	public class ChannelAccessProfileEntityAccessLevel : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileentityaccesslevel";
        public ChannelAccessProfileEntityAccessLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileentityaccesslevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileentityaccesslevelid"] = value;
            }
        }
		
		public readonly Guid? ChannelAccessProfileId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ChannelAccessProfileEntityAccessLevelIdUnique = null;
		
		public readonly Guid? EntityAccessLevelId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? EntityAccessLevelDepthMask = null;
		
		public readonly Guid? ChannelAccessProfileEntityAccessLevelId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("category")]
	public class Category : Entity
    {
        public const string EntityLogicalName = "category";
        public Category() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("categoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["categoryid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string CategoryNumber = null;
		
		public readonly Guid? CategoryId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference ParentCategoryId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingdate")]
	public class msdyn_agreementbookingdate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingdate";
        public msdyn_agreementbookingdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingdateid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Resource = null;
		
		public readonly int? msdyn_Revision = null;
		
		public readonly DateTime? msdyn_BookingDate = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly Guid? msdyn_agreementbookingdateId = null;
		
		public readonly DateTime? msdyn_EarliestDate = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly EntityReference msdyn_BookingSetup = null;
		
		public readonly DateTime? msdyn_LatestDate = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Active = 690970000,
                Processed = 690970001,
                Canceled = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("annotation")]
	public class Annotation : Entity
    {
        public const string EntityLogicalName = "annotation";
        public Annotation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("annotationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["annotationid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string Prefix = null;
		
		public readonly string FilePointer = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string FileName = null;
		
		public readonly int? FileSize = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string StoragePointer = null;
		
		public readonly string StepId = null;
		
		public readonly string DocumentBody = null;
		
		public readonly string NoteText = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string LangId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsDocument = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? AnnotationId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Account = 1,
                Appointment = 4201,
                BulkImport = 4407,
                Calendar = 4003,
                Campaign = 4400,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                Case = 112,
                CaseResolution = 4206,
                Commitment = 4215,
                Competitor = 123,
                Contact = 2,
                Contract = 1010,
                ContractLine = 1011,
                Email = 4202,
                FacilityEquipment = 4000,
                Fax = 4204,
                Invoice = 1090,
                Lead = 4,
                Letter = 4207,
                MarketingList = 4300,
                Opportunity = 3,
                OpportunityClose = 4208,
                Order = 1088,
                OrderClose = 4209,
                PhoneCall = 4210,
                Product = 1024,
                Quote = 1084,
                QuoteClose = 4211,
                ResourceSpecification = 4006,
                Service = 4001,
                ServiceActivity = 4214,
                Task = 4212,
                RoutingRule = 8181,
                RoutingRuleItem = 8199
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_playbookactivityattribute")]
	public class msdyn_playbookactivityattribute : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_playbookactivityattribute";
        public msdyn_playbookactivityattribute() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_playbookactivityattributeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_playbookactivityattributeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_attributeLogicalName")][System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_attributeLogicalName = null;
		
		public readonly Guid? msdyn_playbookactivityattributeId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_attributeType")]
		public readonly OptionSetValue msdyn_attributeType = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_attributeValue")]
		public readonly string msdyn_attributeValue = null;
		
		public readonly EntityReference msdyn_playbookactivityid = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Published = 1
            }
            public enum msdyn_attributeType
            {
                String = 1,
                Integer = 2,
                Datetime = 3,
                Boolean = 4,
                Optionset = 5
            }
            public enum statuscode
            {
                Draft = 1,
                Published = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("competitorsalesliterature")]
	public class CompetitorSalesLiterature : Entity
    {
        public const string EntityLogicalName = "competitorsalesliterature";
        public CompetitorSalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorsalesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorsalesliteratureid"] = value;
            }
        }
		
		public readonly Guid? CompetitorId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly Guid? CompetitorSalesLiteratureId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("reportvisibility")]
	public class ReportVisibility : Entity
    {
        public const string EntityLogicalName = "reportvisibility";
        public ReportVisibility() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportvisibilityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportvisibilityid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ReportVisibilityId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ReportVisibilityIdUnique = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue VisibilityCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum VisibilityCode
            {
                ReportsArea = 1,
                FormsForRelatedRecordTypes = 2,
                ListsForRelatedRecordTypes = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcepaytype")]
	public class msdyn_resourcepaytype : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourcepaytype";
        public msdyn_resourcepaytype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcepaytypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcepaytypeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly double? msdyn_HourlyMarkup = null;
		
		public readonly Guid? msdyn_resourcepaytypeId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("fieldsecurityprofile")]
	public class FieldSecurityProfile : Entity
    {
        public const string EntityLogicalName = "fieldsecurityprofile";
        public FieldSecurityProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldsecurityprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldsecurityprofileid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? FieldSecurityProfileIdUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? FieldSecurityProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("salesorder")]
	public class SalesOrder : Entity
    {
        public const string EntityLogicalName = "salesorder";
        public SalesOrder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesorderid"] = value;
            }
        }
		
		public readonly EntityReference ContactId = null;
		
		public readonly DateTime? LastBackofficeSubmit = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string BillTo_Line1 = null;
		
		public readonly string SubmitStatusDescription = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly DateTime? SubmitDate = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly Money msdyn_totalnonchargeablecostrollup_Base = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly OptionSetValue msdyn_PSAState = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly string ShipTo_Composite = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly string BillTo_Telephone = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue msdyn_PSAStatusReason = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly int? SubmitStatus = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly EntityReference msdyn_AccountManagerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly int? msdyn_TotalNonchargeableCostRollup_State = null;
		
		public readonly string BillTo_City = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly Money msdyn_TotalChargeableCostRollup = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? WillCall = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference msdyn_ContractOrganizationalUnitId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly Money msdyn_TotalNonchargeableCostRollup = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly string EmailAddress = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly string BillTo_ContactName = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly DateTime? msdyn_TotalNonchargeableCostRollup_Date = null;
		
		public readonly DateTime? msdyn_TotalChargeableCostRollup_Date = null;
		
		public readonly Guid? BillTo_AddressId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsPriceLocked = null;
		
		public readonly Guid? SalesOrderId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly DateTime? DateFulfilled = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? msdyn_TotalChargeableCostRollup_State = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string OrderNumber = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money msdyn_totalchargeablecostrollup_Base = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string BillTo_Composite = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly OptionSetValue msdyn_ordertype = null;
		
		public readonly Money TotalTax = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly EntityReference msdyn_Account = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum msdyn_PSAState
            {
                Draft = 192350000,
                OnHold = 192350001,
                Active = 192350002,
                Closed = 192350003
            }
            public enum StatusCode
            {
                New = 1,
                Pending = 2,
                OnHold = 690970000,
                InProgress = 3,
                NoMoney = 4,
                Complete = 100001,
                Partial = 100002,
                Invoiced = 100003
            }
            public enum msdyn_PSAStatusReason
            {
                Draft = 192350000,
                InReview = 192350001,
                OnHold = 192350002,
                Confirmed = 192350003,
                Completed = 192350004,
                Lost = 192350005,
                Abandoned = 192350006
            }
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnRetrieve = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum msdyn_ordertype
            {
                WorkBased = 192350001,
                ItemBased = 192350000,
                ServiceMaintenanceBased = 690970002
            }
            public enum StateCode
            {
                Active = 0,
                Submitted = 1,
                Canceled = 2,
                Fulfilled = 3,
                Invoiced = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("accountleads")]
	public class AccountLeads : Entity
    {
        public const string EntityLogicalName = "accountleads";
        public AccountLeads() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("accountleadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["accountleadid"] = value;
            }
        }
		
		public readonly Guid? LeadId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? AccountId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? AccountLeadId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("emailsearch")]
	public class EmailSearch : Entity
    {
        public const string EntityLogicalName = "emailsearch";
        public EmailSearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsearchid"] = value;
            }
        }
		
		public readonly string EmailAddress = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ParentObjectId = null;
		
		public readonly Guid? EmailSearchId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalobjectattributeaccess")]
	public class PrincipalObjectAttributeAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectattributeaccess";
        public PrincipalObjectAttributeAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectattributeaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectattributeaccessid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference PrincipalId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrincipalObjectAttributeAccessId = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly Guid? AttributeId = null;
		
		public readonly bool? UpdateAccess = null;
		
		public readonly bool? ReadAccess = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_playbooktemplate")]
	public class msdyn_playbooktemplate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_playbooktemplate";
        public msdyn_playbooktemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_playbooktemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_playbooktemplateid"] = value;
            }
        }
		
		public readonly bool? msdyn_trackprogress = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		
		public readonly EntityReference msdyn_categoryid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_relatedentitylist = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly string msdyn_fullentitylist = null;
		
		public readonly Guid? msdyn_playbooktemplateId = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Published = 1
            }
            public enum statuscode
            {
                Draft = 1,
                Published = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customerrelationship")]
	public class CustomerRelationship : Entity
    {
        public const string EntityLogicalName = "customerrelationship";
        public CustomerRelationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customerrelationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customerrelationshipid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? CustomerRelationshipId = null;
		
		public readonly EntityReference PartnerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ConverseRelationshipId = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string CustomerRoleDescription = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference PartnerRoleId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string PartnerRoleDescription = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CustomerRoleId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bulkoperation")]
	public class BulkOperation : Entity
    {
        public const string EntityLogicalName = "bulkoperation";
        public BulkOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? SuccessCount = null;
		
		public readonly EntityCollection from = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly OptionSetValue TargetedRecordTypeCode = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string BulkOperationNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly int? FailureCount = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly OptionSetValue OperationTypeCode = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string WorkflowInfo = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly OptionSetValue CreatedRecordTypeCode = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TargetMembersCount = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string Parameters = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum TargetedRecordTypeCode
            {
                Account = 1,
                Contact = 2,
                Lead = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum OperationTypeCode
            {
                CreateOpportunities = 1,
                CreateActivities = 2,
                SendDirectMail = 3,
                Distribute = 4,
                Execute = 5,
                QuickCampaign = 7
            }
            public enum CreatedRecordTypeCode
            {
                PhoneCall = 1,
                Fax = 2,
                Letter = 3,
                Email = 4,
                Appointment = 5,
                SendDirectEmail = 6
            }
            public enum StatusCode
            {
                Pending = 1,
                InProgress = 2,
                Aborted = 3,
                Completed = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttype_requirementgroup")]
	public class msdyn_incidenttype_requirementgroup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttype_requirementgroup";
        public msdyn_incidenttype_requirementgroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttype_requirementgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttype_requirementgroupid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_RequirementGroupId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_IncidenttypeId = null;
		
		public readonly Guid? msdyn_incidenttype_requirementgroupId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessageprocessingstep")]
	public class SdkMessageProcessingStep : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstep";
        public SdkMessageProcessingStep() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepid"] = value;
            }
        }
		
		public readonly bool? IsHidden = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Configuration = null;
		
		public readonly OptionSetValue InvocationSource = null;
		
		public readonly EntityReference EventHandler = null;
		
		public readonly string FilteringAttributes = null;
		
		public readonly EntityReference ImpersonatingUserId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly int? Rank = null;
		
		public readonly bool? CanUseReadOnlyConnection = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue Stage = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference SdkMessageProcessingStepSecureConfigId = null;
		
		public readonly string EventExpander = null;
		
		public readonly Guid? SdkMessageProcessingStepIdUnique = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly Guid? SdkMessageProcessingStepId = null;
		
		public readonly OptionSetValue SupportedDeployment = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference SdkMessageFilterId = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly bool? AsyncAutoDelete = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum InvocationSource
            {
                Internal = -1,
                Parent = 0,
                Child = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum Stage
            {
                InitialPreOperationForInternalUseOnly = 5,
                PreValidation = 10,
                InternalPreOperationBeforeExternalPluginsForInternalUseOnly = 15,
                PreOperation = 20,
                InternalPreOperationAfterExternalPluginsForInternalUseOnly = 25,
                MainOperationForInternalUseOnly = 30,
                InternalPostOperationBeforeExternalPluginsForInternalUseOnly = 35,
                PostOperation = 40,
                InternalPostOperationAfterExternalPluginsForInternalUseOnly = 45,
                PostOperationDeprecated = 50,
                FinalPostOperationForInternalUseOnly = 55
            }
            public enum SupportedDeployment
            {
                ServerOnly = 0,
                MicrosoftDynamics365ClientForOutlookOnly = 1,
                Both = 2
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscription")]
	public class Subscription : Entity
    {
        public const string EntityLogicalName = "subscription";
        public Subscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly DateTime? CompletedSyncStartedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly bool? ResetForCreate = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string SyncEntryTableName = null;
		
		public readonly int? SubscriptionType = null;
		
		public readonly string ClientVersion = null;
		
		public readonly bool? ReInitialize = null;
		
		public readonly string MachineName = null;
		
		public readonly int? CompletedSyncVersionNumber = null;
		
		public readonly DateTime? LastSyncStartedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("roletemplate")]
	public class RoleTemplate : Entity
    {
        public const string EntityLogicalName = "roletemplate";
        public RoleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? Upgrading = null;
		
		public readonly Guid? RoleTemplateId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("interactionforemail")]
	public class InteractionForEmail : Entity
    {
        public const string EntityLogicalName = "interactionforemail";
        public InteractionForEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interactionforemailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interactionforemailid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? InteractionPartyTypecode = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly Guid? EmailInteractionReplyId = null;
		
		public readonly string InteractionRepliedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly string InteractionReplyId = null;
		
		public readonly string InteractionLocation = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string InteractionUserAgent = null;
		
		public readonly OptionSetValue InteractionType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? EmailActivityId = null;
		
		public readonly Guid? InteractionForEmailId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? EmailInteractionTime = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string InteractedComponentText = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string EmailAddress = null;
		
		public readonly Guid? InteractionPartyId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum InteractionType
            {
                EmailOpen = 0,
                LinkOpen = 1,
                AttachmentOpen = 2,
                EmailReply = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionstatisticsoffline")]
	public class SubscriptionStatisticsOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoffline";
        public SubscriptionStatisticsOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? FullSyncRequired = null;
		
		public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("resourcegroupexpansion")]
	public class ResourceGroupExpansion : Entity
    {
        public const string EntityLogicalName = "resourcegroupexpansion";
        public ResourceGroupExpansion() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcegroupexpansionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcegroupexpansionid"] = value;
            }
        }
		
		public readonly Guid? ResourceGroupExpansionId = null;
		
		public readonly Guid? ItemId = null;
		
		public readonly OptionSetValue MethodCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum MethodCode
            {
                None = 0,
                ParticipatingResources = 1,
                SchedulableResources = 2,
                SupportedServices = 3,
                Resources = 4,
                AllResources = 5,
                Subgroups = 6,
                ParentGroups = 7,
                AllSubgroups = 8
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appconfiginstance")]
	public class AppConfigInstance : Entity
    {
        public const string EntityLogicalName = "appconfiginstance";
        public AppConfigInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfiginstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfiginstanceid"] = value;
            }
        }
		
		public readonly EntityReference AppConfigMasterId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference AppConfigId = null;
		
		public readonly string ComponentType = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? AppConfigInstanceIdUnique = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Value = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? AppConfigIdUnique = null;
		
		public readonly Guid? AppConfigInstanceId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("convertruleitem")]
	public class ConvertRuleItem : Entity
    {
        public const string EntityLogicalName = "convertruleitem";
        public ConvertRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleitemid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ConditionId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly string ConditionXml = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ConvertRuleItemIdUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly Guid? ConvertRuleItemId = null;
		
		public readonly EntityReference ConvertRuleId = null;
		
		public readonly string PropertiesXml = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("topicmodelexecutionhistory")]
	public class TopicModelExecutionHistory : Entity
    {
        public const string EntityLogicalName = "topicmodelexecutionhistory";
        public TopicModelExecutionHistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelexecutionhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelexecutionhistoryid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference TopicModelId = null;
		
		public readonly int? TotalTime = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusReason = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsTestExecution = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? NumberOfTopicsFound = null;
		
		public readonly int? RecordsProcessed = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly EntityReference TopicModelConfigurationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? TopicModelExecutionHistoryId = null;
		
		public readonly int? MaxTopics = null;
		
		public readonly string RecordCorrelationId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("azuresyncerrormessage")]
		public readonly string ErrorDetails = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum StatusReason
            {
                TopicAnalysisExecutionIsQueued = 1,
                TopicAnalysisExecutionIsSynchronizing = 2,
                AnalyzingTopicAnalysisExecution = 3,
                TopicAnalysisHasBuilt = 4,
                SynchronizationFailed = 5,
                AnalysisFailed = 6,
                ConnectionFailed = 7
            }
            public enum Status
            {
                Queued = 1,
                InProgress = 2,
                Success = 3,
                Failed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgearticleviews")]
	public class KnowledgeArticleViews : Entity
    {
        public const string EntityLogicalName = "knowledgearticleviews";
        public KnowledgeArticleViews() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleviewsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleviewsid"] = value;
            }
        }
		
		public readonly Guid? KnowledgeArticleViewsId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ViewDate = null;
		
		public readonly OptionSetValue Location = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? KnowledgeArticleView = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum Location
            {
                Internal = 1,
                Web = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("businessprocessflowinstance")]
	public class BusinessProcessFlowInstance : Entity
    {
        public const string EntityLogicalName = "businessprocessflowinstance";
        public BusinessProcessFlowInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? Entity2Id = null;
		
		public readonly Guid? ProcessStageId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly string Entity1ObjectTypeCode = null;
		
		public readonly Guid? Entity5Id = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? Entity3Id = null;
		
		public readonly string Entity2ObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Entity5ObjectTypeCode = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly string Entity3ObjectTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? Entity1Id = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly Guid? Entity4Id = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly string Entity4ObjectTypeCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_opportunitylinetransactionclassificatio")]
	public class msdyn_opportunitylinetransactionclassificatio : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_opportunitylinetransactionclassificatio";
        public msdyn_opportunitylinetransactionclassificatio() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_opportunitylinetransactionclassificatioid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_opportunitylinetransactionclassificatioid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly bool? msdyn_Include = null;
		
		public readonly Guid? msdyn_opportunitylinetransactionclassificatioId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_OpportunityLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("goalrollupquery")]
	public class GoalRollupQuery : Entity
    {
        public const string EntityLogicalName = "goalrollupquery";
        public GoalRollupQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalrollupqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalrollupqueryid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? GoalRollupQueryId = null;
		
		public readonly string FetchXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string QueryEntityType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum QueryEntityType
            {

            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("pluginassembly")]
	public class PluginAssembly : Entity
    {
        public const string EntityLogicalName = "pluginassembly";
        public PluginAssembly() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pluginassemblyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pluginassemblyid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsHidden = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue AuthType = null;
		
		public readonly OptionSetValue IsolationMode = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string Culture = null;
		
		public readonly int? Major = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly int? Minor = null;
		
		public readonly string PublicKeyToken = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Url = null;
		
		public readonly OptionSetValue SourceType = null;
		
		public readonly string UserName = null;
		
		public readonly Guid? PluginAssemblyIdUnique = null;
		
		public readonly string Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Password = null;
		
		public readonly string Path = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsPasswordSet = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? PluginAssemblyId = null;
		
		public readonly string Content = null;
		
		public readonly string Description = null;
		
		public readonly string SourceHash = null;

        public new static class Options
        {
            public enum AuthType
            {
                BasicAuth = 0
            }
            public enum IsolationMode
            {
                None = 1,
                Sandbox = 2,
                External = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SourceType
            {
                Database = 0,
                Disk = 1,
                Normal = 2,
                AzureWebApp = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("usermapping")]
	public class UserMapping : Entity
    {
        public const string EntityLogicalName = "usermapping";
        public UserMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usermappingid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? UserMappingId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue PartnerApplicationType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string ClaimType = null;
		
		public readonly string SystemUserAttributeName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum PartnerApplicationType
            {
                SharePoint = 0,
                Exchange = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_inventoryadjustment")]
	public class msdyn_inventoryadjustment : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_inventoryadjustment";
        public msdyn_inventoryadjustment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_inventoryadjustmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_inventoryadjustmentid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_RequestedByResource = null;
		
		public readonly string msdyn_AutoNumbering = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_AdjustmentTime = null;
		
		public readonly EntityReference msdyn_AdjustedByResource = null;
		
		public readonly Guid? msdyn_inventoryadjustmentId = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly string msdyn_Description = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessage")]
	public class SdkMessage : Entity
    {
        public const string EntityLogicalName = "sdkmessage";
        public SdkMessage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageid"] = value;
            }
        }
		
		public readonly bool? Template = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string ThrottleSettings = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? WorkflowSdkStepEnabled = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsValidForExecuteAsync = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly bool? IsReadOnly = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SdkMessageIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? AutoTransact = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? IsActive = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string CategoryName = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? Expand = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SdkMessageId = null;
		
		public readonly int? Availability = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_organizationalunit")]
	public class msdyn_organizationalunit : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_organizationalunit";
        public msdyn_organizationalunit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_organizationalunitid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_organizationalunitid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly Guid? msdyn_organizationalunitId = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_currency = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_opportunitylineresourcecategory")]
	public class msdyn_opportunitylineresourcecategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_opportunitylineresourcecategory";
        public msdyn_opportunitylineresourcecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_opportunitylineresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_opportunitylineresourcecategoryid"] = value;
            }
        }
		
		public readonly Guid? msdyn_opportunitylineresourcecategoryId = null;
		
		public readonly EntityReference msdyn_OpportunityLineTransactionClassification = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("characteristic")]
	public class Characteristic : Entity
    {
        public const string EntityLogicalName = "characteristic";
        public Characteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("characteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["characteristicid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? CharacteristicId = null;
		
		public readonly OptionSetValue CharacteristicType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? msdyn_requireapproval = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum CharacteristicType
            {
                Skill = 1,
                Certification = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_callablecontext_msdyn_playbooktemplate")]
	public class msdyn_callablecontext_msdyn_playbooktemplate : Entity
    {
        public const string EntityLogicalName = "msdyn_callablecontext_msdyn_playbooktemplate";
        public msdyn_callablecontext_msdyn_playbooktemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_callablecontext_msdyn_playbooktemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_callablecontext_msdyn_playbooktemplateid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_playbooktemplateid = null;
		
		public readonly Guid? msdyn_callablecontextid = null;
		
		public readonly Guid? msdyn_callablecontext_msdyn_playbooktemplateId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_msdyn_customerasset_msdyn_3dmodel")]
	public class msdyn_msdyn_customerasset_msdyn_3dmodel : Entity
    {
        public const string EntityLogicalName = "msdyn_msdyn_customerasset_msdyn_3dmodel";
        public msdyn_msdyn_customerasset_msdyn_3dmodel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_msdyn_customerasset_msdyn_3dmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_msdyn_customerasset_msdyn_3dmodelid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_msdyn_customerasset_msdyn_3dmodelId = null;
		
		public readonly Guid? msdyn_3dmodelid = null;
		
		public readonly Guid? msdyn_customerassetid = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicecategorycommands")]
	public class msdyn_iotdevicecategorycommands : Entity
    {
        public const string EntityLogicalName = "msdyn_iotdevicecategorycommands";
        public msdyn_iotdevicecategorycommands() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicecategorycommandsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicecategorycommandsid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_iotdevicecategorycommandsId = null;
		
		public readonly Guid? msdyn_iotdevicecommanddefinitionid = null;
		
		public readonly Guid? msdyn_iotdevicecategoryid = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingjournal")]
	public class msdyn_bookingjournal : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingjournal";
        public msdyn_bookingjournal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingjournalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingjournalid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_JournalType = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly Guid? msdyn_bookingjournalId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_AdditionalCost = null;
		
		public readonly Money msdyn_UnitCost = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly EntityReference msdyn_PayType = null;
		
		public readonly Money msdyn_additionalcost_Base = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? msdyn_Billable = null;
		
		public readonly Money msdyn_unitcost_Base = null;
		
		public readonly DateTime? msdyn_StartTime = null;
		
		public readonly DateTime? msdyn_EndTime = null;
		
		public readonly Money msdyn_TotalCost = null;

        public new static class Options
        {
            public enum msdyn_JournalType
            {
                WorkingHours = 690970000,
                Break = 690970001,
                Travel = 690970002,
                Overtime = 690970003,
                BusinessClosure = 690970004
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mobileofflineprofileitem")]
	public class MobileOfflineProfileItem : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitem";
        public MobileOfflineProfileItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemid"] = value;
            }
        }
		
		public readonly bool? CanBeFollowed = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? RecordsOwnedByMyBusinessUnit = null;
		
		public readonly OptionSetValue RecordDistributionCriteria = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string ProfileItemEntityFilter = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsValidated = null;
		
		public readonly int? EntityObjectTypeCode = null;
		
		public readonly bool? IsVisibleInGrid = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ViewQuery = null;
		
		public readonly bool? RecordsOwnedByMe = null;
		
		public readonly string SelectedEntityTypeCode = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? GetRelatedEntityRecords = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProfileItemRule = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string SelectedEntityMetadata = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string RelationshipData = null;
		
		public readonly Guid? MobileOfflineProfileItemId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? MobileOfflineProfileItemIdUnique = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? RecordsOwnedByMyTeam = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum RecordDistributionCriteria
            {
                DownloadRelatedDataOnly = 0,
                AllRecords = 1,
                OtherDataFilter = 2,
                CustomDataFilter = 3
            }
            public enum SelectedEntityTypeCode
            {
                Account = 1,
                Contact = 2,
                Note = 5,
                User = 8,
                Team = 9,
                Attachment = 1001,
                Queue = 2020,
                QueueItem = 2029,
                Appointment = 4201,
                Email = 4202,
                Task = 4212,
                SLAKPIInstance = 9752,
                AccountLeads = 16,
                ContactLeads = 22,
                Lead = 4,
                Product = 1024,
                Entitlement = 9700,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateProduct = 4545,
                Case = 112,
                IncidentKnowledgeBaseRecord = 9931,
                PhoneToCaseProcess = 952,
                CompetitorAddress = 1004,
                CompetitorProduct = 1006,
                LeadCompetitors = 24,
                LeadProduct = 27,
                LeadToOpportunitySalesProcess = 954,
                Opportunity = 3,
                OpportunityCompetitors = 25,
                OpportunitySalesProcess = 953,
                Competitor = 123,
                SchedulingParameter = 10068,
                ProjectStages = 10077,
                InvoiceProcess = 10078,
                OpportunityLine = 1083,
                PurchaseOrderBusinessProcess = 10176,
                CaseToWorkOrderBusinessProcess = 10177,
                AgreementBusinessProcess = 10178,
                WorkOrderBusinessProcess = 10179,
                IncidentTypesSetup = 10192,
                CFSIoTAlertProcessFlow = 10262
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rtv")]
	public class msdyn_rtv : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rtv";
        public msdyn_rtv() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rtvid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rtvid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly string msdyn_City = null;
		
		public readonly string msdyn_AutoNumbering = null;
		
		public readonly string msdyn_ReferenceNo = null;
		
		public readonly EntityReference msdyn_VendorContact = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly string msdyn_Address3 = null;
		
		public readonly EntityReference msdyn_OriginatingRMA = null;
		
		public readonly EntityReference msdyn_SubStatus = null;
		
		public readonly DateTime? msdyn_RequestDate = null;
		
		public readonly EntityReference msdyn_OriginalPurchaseOrder = null;
		
		public readonly EntityReference msdyn_ReturnedBy = null;
		
		public readonly string msdyn_Address1 = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Address2 = null;
		
		public readonly string msdyn_Country = null;
		
		public readonly string msdyn_VendorRMA = null;
		
		public readonly EntityReference msdyn_ShipVia = null;
		
		public readonly string msdyn_PostalCode = null;
		
		public readonly EntityReference msdyn_ApprovedDeclinedBy = null;
		
		public readonly EntityReference msdyn_Vendor = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly Guid? msdyn_rtvId = null;
		
		public readonly DateTime? msdyn_ReturnDate = null;
		
		public readonly string msdyn_StateOrProvince = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_TotalAmount = null;

        public new static class Options
        {
            public enum msdyn_SystemStatus
            {
                Draft = 690970000,
                Approved = 690970001,
                Shipped = 690970002,
                Received = 690970003,
                Canceled = 690970004
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingservicetask")]
	public class msdyn_agreementbookingservicetask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingservicetask";
        public msdyn_agreementbookingservicetask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingservicetaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingservicetaskid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_AgreementBookingSetup = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_AgreementBookingIncident = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly bool? msdyn_IsCopied = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_TaskType = null;
		
		public readonly Guid? msdyn_agreementbookingservicetaskId = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_upgradeversion")]
	public class msdyn_upgradeversion : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_upgradeversion";
        public msdyn_upgradeversion() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_upgradeversionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_upgradeversionid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_Finished = null;
		
		public readonly Guid? msdyn_upgradeversionId = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly string msdyn_StartingVersion = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_summary = null;
		
		public readonly string msdyn_TargetVersion = null;
		
		public readonly EntityReference msdyn_UpgradeRun = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Started = 100000000,
                Success = 100000001,
                Failure = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_estimateline")]
	public class msdyn_estimateline : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_estimateline";
        public msdyn_estimateline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_estimatelineid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_estimatelineid"] = value;
            }
        }
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly Guid? msdyn_estimatelineId = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly int? msdyn_numberofresources = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly EntityReference msdyn_Estimate = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly string msdyn_estimateperdaylines = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_servicetasktype")]
	public class msdyn_servicetasktype : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_servicetasktype";
        public msdyn_servicetasktype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_servicetasktypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_servicetasktypeid"] = value;
            }
        }
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? msdyn_servicetasktypeId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactioncategoryhierarchyelement")]
	public class msdyn_transactioncategoryhierarchyelement : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_transactioncategoryhierarchyelement";
        public msdyn_transactioncategoryhierarchyelement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactioncategoryhierarchyelementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactioncategoryhierarchyelementid"] = value;
            }
        }
		
		public readonly Guid? msdyn_transactioncategoryhierarchyelementId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ChildCategory = null;
		
		public readonly EntityReference msdyn_ParentCategory = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_forecastdefinition")]
	public class msdyn_forecastdefinition : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_forecastdefinition";
        public msdyn_forecastdefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_forecastdefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_forecastdefinitionid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_rollupquery = null;
		
		public readonly int? msdyn_numberofrecurrences = null;
		
		public readonly EntityReference msdyn_metricid = null;
		
		public readonly OptionSetValue msdyn_fiscalyear = null;
		
		public readonly OptionSetValue msdyn_fiscalquarter = null;
		
		public readonly OptionSetValue msdyn_quotasource = null;
		
		public readonly DateTime? msdyn_validfrom = null;
		
		public readonly OptionSetValue msdyn_fiscalmonth = null;
		
		public readonly Guid? msdyn_forecastdefinitionId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_forecastdefinitionname = null;
		
		public readonly DateTime? msdyn_validto = null;
		
		public readonly OptionSetValue msdyn_forecastperiodtype = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Published = 1
            }
            public enum msdyn_fiscalyear
            {
                FY2040 = 22,
                FY2039 = 21,
                FY2038 = 20,
                FY2037 = 19,
                FY2036 = 18,
                FY2035 = 17,
                FY2034 = 16,
                FY2033 = 15,
                FY2032 = 14,
                FY2031 = 13,
                FY2030 = 12,
                FY2029 = 11,
                FY2028 = 10,
                FY2027 = 9,
                FY2026 = 8,
                FY2025 = 7,
                FY2024 = 6,
                FY2023 = 5,
                FY2022 = 4,
                FY2021 = 3,
                FY2020 = 2,
                FY2019 = 1,
                FY2018 = 0
            }
            public enum msdyn_fiscalquarter
            {
                Q1 = 0,
                Q2 = 1,
                Q3 = 2,
                Q4 = 3
            }
            public enum msdyn_quotasource
            {
                GoalBased = 192350000,
                Manual = 192350001
            }
            public enum statuscode
            {
                Draft = 1,
                InProgress = 2,
                Success = 3,
                Failed = 4
            }
            public enum msdyn_fiscalmonth
            {
                January = 0,
                February = 1,
                March = 2,
                April = 3,
                May = 4,
                June = 5,
                July = 6,
                August = 7,
                September = 8,
                October = 9,
                November = 10,
                December = 11
            }
            public enum msdyn_forecastperiodtype
            {
                Monthly = 0,
                Quarterly = 1,
                Custom = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("exchangesyncidmapping")]
	public class ExchangeSyncIdMapping : Entity
    {
        public const string EntityLogicalName = "exchangesyncidmapping";
        public ExchangeSyncIdMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("exchangesyncidmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["exchangesyncidmappingid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? FromCrmChangeType = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsDeletedInExchange = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string LastSyncError = null;
		
		public readonly Guid? ExchangeSyncIdmappingId = null;
		
		public readonly string ItemSubject = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsUnlinkedInCRM = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? UserDecision = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? Retries = null;
		
		public readonly int? ToCrmChangeType = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotebookingsetup")]
	public class msdyn_quotebookingsetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotebookingsetup";
        public msdyn_quotebookingsetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotebookingsetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotebookingsetupid"] = value;
            }
        }
		
		public readonly Money msdyn_estimatedproductcost_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotedetail_msdyn_quotebookingset")]
		public readonly EntityReference msdyn_quotedetail = null;
		
		public readonly decimal? msdyn_EstimatedMargin = null;
		
		public readonly DateTime? msdyn_postponegenerationuntil = null;
		
		public readonly int? msdyn_prebookingflexibility = null;
		
		public readonly int? msdyn_NumberOfWO = null;
		
		public readonly EntityReference msdyn_quote = null;
		
		public readonly DateTime? msdyn_timewindowstart = null;
		
		public readonly Money msdyn_estimatedrevenueperwo_Base = null;
		
		public readonly Guid? stageid = null;
		
		public readonly Money msdyn_EstimatedProductRevenue = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? msdyn_estimatedduration = null;
		
		public readonly Money msdyn_EstimatedProductCost = null;
		
		public readonly bool? msdyn_autogenerateworkorder = null;
		
		public readonly Money msdyn_estimatedproductrevenue_Base = null;
		
		public readonly int? msdyn_generateworkorderdaysinadvance = null;
		
		public readonly Money msdyn_estimatedservicecost_Base = null;
		
		public readonly Money msdyn_estimatedrevenue_Base = null;
		
		public readonly DateTime? msdyn_timewindowend = null;
		
		public readonly string msdyn_QuoteDetailId = null;
		
		public readonly Money msdyn_estimatedservicerevenue_Base = null;
		
		public readonly Money msdyn_EstimatedRevenue = null;
		
		public readonly string msdyn_recurrencesettings = null;
		
		public readonly string traversedpath = null;
		
		public readonly Money msdyn_EstimatedRevenuePerWO = null;
		
		public readonly EntityReference msdyn_preferredresource = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_Internalflags")]
		public readonly string msdyn_Internalflags = null;
		
		public readonly EntityReference msdyn_workordertype = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_priority = null;
		
		public readonly Money msdyn_EstimatedCost = null;
		
		public readonly int? msdyn_postbookingflexibility = null;
		
		public readonly Money msdyn_EstimatedServiceCost = null;
		
		public readonly decimal? msdyn_EstimatedMarginPerWO = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? msdyn_autogeneratebooking = null;
		
		public readonly decimal? msdyn_Margin = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly Guid? msdyn_quotebookingsetupId = null;
		
		public readonly DateTime? msdyn_preferredstarttime = null;
		
		public readonly Money msdyn_estimatedcost_Base = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly int? msdyn_revision = null;
		
		public readonly Money msdyn_EstimatedServiceRevenue = null;
		
		public readonly string msdyn_workordersummary = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("email")]
	public class Email : Entity
    {
        public const string EntityLogicalName = "email";
        public Email() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference ParentActivityId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly DateTime? DelayedEmailSendTime = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference EmailSender = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly string SubmittedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? LinksClickedCount = null;
		
		public readonly EntityCollection to = null;
		
		public readonly string Sender = null;
		
		public readonly OptionSetValue Notifications = null;
		
		public readonly string TrackingToken = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? FollowEmailUserPreference = null;
		
		public readonly EntityCollection bcc = null;
		
		public readonly bool? ReadReceiptRequested = null;
		
		public readonly EntityReference SendersAccount = null;
		
		public readonly DateTime? LastOpenedTime = null;
		
		public readonly int? AttachmentCount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? BaseConversationIndexHash = null;
		
		public readonly Guid? ConversationTrackingId = null;
		
		public readonly Guid? MessageIdDupCheck = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue EmailReminderStatus = null;
		
		public readonly EntityReference TemplateId = null;
		
		public readonly bool? IsEmailFollowed = null;
		
		public readonly string Category = null;
		
		public readonly int? ReplyCount = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly OptionSetValue EmailReminderType = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? OpenCount = null;
		
		public readonly Guid? ReminderActionCardId = null;
		
		public readonly int? IsUnsafe = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityCollection from = null;
		
		public readonly bool? DeliveryReceiptRequested = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? PostponeEmailProcessingUntil = null;
		
		public readonly DateTime? EmailReminderExpiryTime = null;
		
		public readonly string EmailReminderText = null;
		
		public readonly bool? IsEmailReminderSet = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string InReplyTo = null;
		
		public readonly bool? Compressed = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly string ConversationIndex = null;
		
		public readonly Guid? EmailTrackingId = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Subcategory = null;
		
		public readonly string MessageId = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly int? AttachmentOpenCount = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? DeliveryAttempts = null;
		
		public readonly string ToRecipients = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityCollection cc = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly OptionSetValue CorrelationMethod = null;
		
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum Notifications
            {
                None = 0,
                TheMessageWasSavedAsAMicrosoftDynamics365EmailRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1,
                TruncatedBody = 2
            }
            public enum StatusCode
            {
                Draft = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5,
                PendingSend = 6,
                Sending = 7,
                Failed = 8
            }
            public enum EmailReminderStatus
            {
                NotSet = 0,
                ReminderSet = 1,
                ReminderExpired = 2,
                ReminderInvalid = 3
            }
            public enum EmailReminderType
            {
                IfIDoNotReceiveAReplyBy = 0,
                IfTheEmailIsNotOpenedBy = 1,
                RemindMeAnywaysAt = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum CorrelationMethod
            {
                None = 0,
                Skipped = 1,
                XHeader = 2,
                InReplyTo = 3,
                TrackingToken = 4,
                ConversationIndex = 5,
                SmartMatching = 6,
                CustomCorrelation = 7
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribboncontextgroup")]
	public class RibbonContextGroup : Entity
    {
        public const string EntityLogicalName = "ribboncontextgroup";
        public RibbonContextGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncontextgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncontextgroupid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? RibbonContextGroupUniqueId = null;
		
		public readonly Guid? RibbonContextGroupId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ContextGroupId = null;
		
		public readonly string ContextGroupXml = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Entity = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("lead")]
	public class Lead : Entity
    {
        public const string EntityLogicalName = "lead";
        public Lead() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadid"] = value;
            }
        }
		
		public readonly string EMailAddress3 = null;
		
		public readonly string EMailAddress2 = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly string Address1_City = null;
		
		public readonly Money BudgetAmount_Base = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly OptionSetValue BudgetStatus = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly string YomiFullName = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string Telephone3 = null;
		
		public readonly EntityReference QualifyingOpportunityId = null;
		
		public readonly bool? ConfirmInterest = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly string Address2_County = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly Money EstimatedAmount = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string YomiCompanyName = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference RelatedObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly DateTime? EstimatedCloseDate = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly int? NumberOfEmployees = null;
		
		public readonly OptionSetValue InitialCommunication = null;
		
		public readonly Money Revenue = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string CompanyName = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly string Address2_City = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly string FirstName = null;
		
		public readonly OptionSetValue SalesStage = null;
		
		public readonly string QualificationComments = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly bool? EvaluateFit = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? IsAutoCreate = null;
		
		public readonly int? TeamsFollowed = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address1_County = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Subject = null;
		
		public readonly bool? DoNotEMail = null;
		
		public readonly string Pager = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly double? EstimatedValue = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue IndustryCode = null;
		
		public readonly OptionSetValue SalesStageCode = null;
		
		public readonly string Address2_Name = null;
		
		public readonly DateTime? ScheduleFollowUp_Qualify = null;
		
		public readonly Money EstimatedAmount_Base = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly string Address1_Country = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly bool? DecisionMaker = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string JobTitle = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly EntityReference OriginatingCaseId = null;
		
		public readonly string Fax = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string SIC = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly Money Revenue_Base = null;
		
		public readonly bool? Merged = null;
		
		public readonly OptionSetValue LeadQualityCode = null;
		
		public readonly OptionSetValue PurchaseTimeFrame = null;
		
		public readonly Money BudgetAmount = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly DateTime? ScheduleFollowUp_Prospect = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Salutation = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly bool? msdyn_gdproptout = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Telephone2 = null;
		
		public readonly string YomiLastName = null;
		
		public readonly OptionSetValue msdyn_ordertype = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string MiddleName = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly OptionSetValue PurchaseProcess = null;
		
		public readonly OptionSetValue LeadSourceCode = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string LastName = null;
		
		public readonly Guid? LeadId = null;
		
		public readonly OptionSetValue Need = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FullName = null;
		
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum BudgetStatus
            {
                NoCommittedBudget = 0,
                MayBuy = 1,
                CanBuy = 2,
                WillBuy = 3
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum InitialCommunication
            {
                Contacted = 0,
                NotContacted = 1
            }
            public enum StatusCode
            {
                New = 1,
                Contacted = 2,
                Qualified = 3,
                Lost = 4,
                CannotContact = 5,
                NoLongerInterested = 6,
                Canceled = 7
            }
            public enum SalesStage
            {
                Qualify = 0
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum IndustryCode
            {
                Accounting = 1,
                AgricultureAndNonPetrolNaturalResourceExtraction = 2,
                BroadcastingPrintingAndPublishing = 3,
                Brokers = 4,
                BuildingSupplyRetail = 5,
                BusinessServices = 6,
                Consulting = 7,
                ConsumerServices = 8,
                DesignDirectionAndCreativeManagement = 9,
                DistributorsDispatchersAndProcessors = 10,
                DoctorSOfficesAndClinics = 11,
                DurableManufacturing = 12,
                EatingAndDrinkingPlaces = 13,
                EntertainmentRetail = 14,
                EquipmentRentalAndLeasing = 15,
                Financial = 16,
                FoodAndTobaccoProcessing = 17,
                InboundCapitalIntensiveProcessing = 18,
                InboundRepairAndServices = 19,
                Insurance = 20,
                LegalServices = 21,
                NonDurableMerchandiseRetail = 22,
                OutboundConsumerService = 23,
                PetrochemicalExtractionAndDistribution = 24,
                ServiceRetail = 25,
                SIGAffiliations = 26,
                SocialServices = 27,
                SpecialOutboundTradeContractors = 28,
                SpecialtyRealty = 29,
                Transportation = 30,
                UtilityCreationAndDistribution = 31,
                VehicleRetail = 32,
                Wholesale = 33
            }
            public enum SalesStageCode
            {
                DefaultValue = 1
            }
            public enum LeadQualityCode
            {
                Hot = 1,
                Warm = 2,
                Cold = 3
            }
            public enum PurchaseTimeFrame
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                Unknown = 4
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum msdyn_ordertype
            {
                WorkBased = 192350001,
                ItemBased = 192350000,
                ServiceMaintenanceBased = 690970002
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PurchaseProcess
            {
                Individual = 0,
                Committee = 1,
                Unknown = 2
            }
            public enum LeadSourceCode
            {
                Advertisement = 1,
                EmployeeReferral = 2,
                ExternalReferral = 3,
                Partner = 4,
                PublicRelations = 5,
                Seminar = 6,
                TradeShow = 7,
                Web = 8,
                WordOfMouth = 9,
                Other = 10
            }
            public enum Need
            {
                MustHave = 0,
                ShouldHave = 1,
                GoodToHave = 2,
                NoNeed = 3
            }
            public enum StateCode
            {
                Open = 0,
                Qualified = 1,
                Disqualified = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("kbarticlecomment")]
	public class KbArticleComment : Entity
    {
        public const string EntityLogicalName = "kbarticlecomment";
        public KbArticleComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticlecommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticlecommentid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string CommentText = null;
		
		public readonly Guid? KbArticleCommentId = null;
		
		public readonly EntityReference KbArticleId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_salesinsightssettings")]
	public class msdyn_salesinsightssettings : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_salesinsightssettings";
        public msdyn_salesinsightssettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_salesinsightssettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_salesinsightssettingsid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_ispreviewenabled = null;
		
		public readonly Guid? msdyn_salesinsightssettingsId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttype")]
	public class msdyn_incidenttype : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttype";
        public msdyn_incidenttype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypeid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_LastCalculatedTime = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		
		public readonly int? msdyn_SuggestedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? msdyn_incidenttypeId = null;
		
		public readonly EntityReference msdyn_DefaultWorkOrderType = null;
		
		public readonly bool? msdyn_CopyIncidentItemstoAgreement = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuser")]
	public class SystemUser : Entity
    {
        public const string EntityLogicalName = "systemuser";
        public SystemUser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }
		
		public readonly string TraversedPath = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly string InternalEMailAddress = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? msdyn_gdproptout = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string YomiFullName = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address2_City = null;
		
		public readonly Guid? ActiveDirectoryGuid = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly int? PassportHi = null;
		
		public readonly string HomePhone = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string DisabledReason = null;
		
		public readonly Guid? AzureActiveDirectoryObjectId = null;
		
		public readonly string LastName = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly bool? SetupUser = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly bool? IsLicensed = null;
		
		public readonly bool? DefaultFiltersPopulated = null;
		
		public readonly bool? IsActiveDirectoryUser = null;
		
		public readonly int? UserLicenseType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue PreferredEmailCode = null;
		
		public readonly EntityReference MobileOfflineProfileId = null;
		
		public readonly string NickName = null;
		
		public readonly int? PassportLo = null;
		
		public readonly string Title = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly string FirstName = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly string EmployeeId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference ParentSystemUserId = null;
		
		public readonly string GovernmentId = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address1_County = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly OptionSetValue PreferredPhoneCode = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly string UserPuid = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly EntityReference TerritoryId = null;
		
		public readonly EntityReference DefaultMailbox = null;
		
		public readonly string MiddleName = null;
		
		public readonly Guid? ApplicationId = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly string ApplicationIdUri = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string MobileAlertEMail = null;
		
		public readonly string SharePointEmailAddress = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly EntityReference PositionId = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string JobTitle = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly DateTime? LatestUpdateTime = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string YammerEmailAddress = null;
		
		public readonly OptionSetValue CALType = null;
		
		public readonly int? IdentityId = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly string PhotoUrl = null;
		
		public readonly OptionSetValue AccessMode = null;
		
		public readonly string PersonalEMailAddress = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly bool? IsIntegrationUser = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string Skills = null;
		
		public readonly string DomainName = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string WindowsLiveID = null;
		
		public readonly string Salutation = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string YammerUserId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly OptionSetValue InviteStatusCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsSyncWithDirectory = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly OptionSetValue PreferredAddressCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FullName = null;
		
		public readonly string DefaultOdbFolderName = null;

        public new static class Options
        {
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PreferredEmailCode
            {
                DefaultValue = 1
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum PreferredPhoneCode
            {
                MainPhone = 1,
                OtherPhone = 2,
                HomePhone = 3,
                MobilePhone = 4
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum CALType
            {
                Professional = 0,
                Administrative = 1,
                Basic = 2,
                DeviceProfessional = 3,
                DeviceBasic = 4,
                Essential = 5,
                DeviceEssential = 6,
                Enterprise = 7,
                DeviceEnterprise = 8,
                Sales = 9,
                Service = 10,
                FieldService = 11,
                ProjectService = 12
            }
            public enum AccessMode
            {
                ReadWrite = 0,
                Administrative = 1,
                Read = 2,
                SupportUser = 3,
                NonInteractive = 4,
                DelegatedAdmin = 5
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum InviteStatusCode
            {
                InvitationNotSent = 0,
                Invited = 1,
                InvitationNearExpired = 2,
                InvitationExpired = 3,
                InvitationAccepted = 4,
                InvitationRejected = 5,
                InvitationRevoked = 6
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PreferredAddressCode
            {
                MailingAddress = 1,
                OtherAddress = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuserbusinessunitentitymap")]
	public class SystemUserBusinessUnitEntityMap : Entity
    {
        public const string EntityLogicalName = "systemuserbusinessunitentitymap";
        public SystemUserBusinessUnitEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserbusinessunitentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserbusinessunitentitymapid"] = value;
            }
        }
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly int? ReadPrivilegeDepth = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? SystemUserBusinessUnitEntityMapId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequirement_bookableresource")]
	public class msdyn_resourcerequirement_bookableresource : Entity
    {
        public const string EntityLogicalName = "msdyn_resourcerequirement_bookableresource";
        public msdyn_resourcerequirement_bookableresource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequirement_bookableresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequirement_bookableresourceid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_resourcerequirementid = null;
		
		public readonly Guid? bookableresourceid = null;
		
		public readonly Guid? msdyn_resourcerequirement_bookableresourceId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequest")]
	public class msdyn_resourcerequest : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourcerequest";
        public msdyn_resourcerequest() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequestid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequestid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_roleid = null;
		
		public readonly EntityReference msdyn_requestedby = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_positiondescription = null;
		
		public readonly Guid? msdyn_resourcerequestId = null;
		
		public readonly EntityReference msdyn_resourcerequirementid = null;
		
		public readonly EntityReference msdyn_claimedby = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Submitted = 192350000,
                InProgress = 192350009,
                NeedsReview = 192350003,
                Fulfilled = 192350008,
                Inactive = 192350011
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptiontrackingdeletedobject")]
	public class SubscriptionTrackingDeletedObject : Entity
    {
        public const string EntityLogicalName = "subscriptiontrackingdeletedobject";
        public SubscriptionTrackingDeletedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestamp")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestamp"] = value;
            }
        }
		
		public readonly DateTime? DeleteTime = null;
		
		public readonly int? TimeStamp = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly bool? IsLogicalDelete = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("statusmap")]
	public class StatusMap : Entity
    {
        public const string EntityLogicalName = "statusmap";
        public StatusMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("statusmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["statusmapid"] = value;
            }
        }
		
		public readonly bool? IsDefault = null;
		
		public readonly Guid? StatusMapId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Status = null;
		
		public readonly int? State = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? OrganizationId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactionconnection")]
	public class msdyn_transactionconnection : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_transactionconnection";
        public msdyn_transactionconnection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactionconnectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactionconnectionid"] = value;
            }
        }
		
		public readonly string msdyn_Transaction1Role = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Transaction2Role = null;
		
		public readonly string msdyn_Transaction2 = null;
		
		public readonly Guid? msdyn_transactionconnectionId = null;
		
		public readonly string msdyn_Transaction1 = null;
		
		public readonly string msdyn_Transaction2Type = null;
		
		public readonly string msdyn_Transaction1Type = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_batchjob")]
	public class msdyn_batchjob : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_batchjob";
        public msdyn_batchjob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_batchjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_batchjobid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_lastrundate = null;
		
		public readonly OptionSetValue msdyn_JobType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_isactive = null;
		
		public readonly string msdyn_Data = null;
		
		public readonly OptionSetValue msdyn_frequency = null;
		
		public readonly OptionSetValue msdyn_operationtype = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdyn_batchjobId = null;
		
		public readonly string msdyn_data1 = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_JobType
            {
                None = 867380000,
                Training = 867380001,
                Waiting = 867380005,
                Idle = 867380006
            }
            public enum msdyn_frequency
            {
                Daily = 0,
                Monthly = 1
            }
            public enum msdyn_operationtype
            {
                None = 0,
                Create = 1,
                Update = 2,
                Delete = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevice")]
	public class msdyn_iotdevice : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdevice";
        public msdyn_iotdevice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdeviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdeviceid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_IsSimulated = null;
		
		public readonly string msdyn_DeviceId = null;
		
		public readonly EntityReference msdyn_Account = null;
		
		public readonly Guid? msdyn_iotdeviceId = null;
		
		public readonly string msdyn_Tags = null;
		
		public readonly DateTime? msdyn_LastActivityTime = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_RegistrationStatus = null;
		
		public readonly DateTime? msdyn_LastCommandSentTime = null;
		
		public readonly EntityReference msdyn_IoTProviderInstance = null;
		
		public readonly EntityReference msdyn_LastCommandSent = null;
		
		public readonly string msdyn_DeviceSettings = null;
		
		public readonly int? msdyn_Timezone = null;
		
		public readonly EntityReference msdyn_Category = null;
		
		public readonly string msdyn_RegistrationMessage = null;
		
		public readonly bool? msdyn_ConnectionState = null;
		
		public readonly string msdyn_DeviceReportedProperties = null;

        public new static class Options
        {
            public enum msdyn_IsSimulated
            {
                Yes = 192350000,
                No = 192350001
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_RegistrationStatus
            {
                Unknown = 192350000,
                Unregistered = 192350001,
                InProgress = 192350002,
                Registered = 192350003,
                Error = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_entitlementapplication")]
	public class msdyn_entitlementapplication : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_entitlementapplication";
        public msdyn_entitlementapplication() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_entitlementapplicationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_entitlementapplicationid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_customerasset = null;
		
		public readonly EntityReference msdyn_entitlement = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_entitlementapplicationId = null;
		
		public readonly EntityReference msdyn_incidenttype = null;
		
		public readonly EntityReference msdyn_serviceaccount = null;
		
		public readonly EntityReference msdyn_assetcategory = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userentityuisettings")]
	public class UserEntityUISettings : Entity
    {
        public const string EntityLogicalName = "userentityuisettings";
        public UserEntityUISettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityuisettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityuisettingsid"] = value;
            }
        }
		
		public readonly string InsertIntoEmailMRUXml = null;
		
		public readonly string LastViewedFormXml = null;
		
		public readonly Guid? UserEntityUISettingsId = null;
		
		public readonly string LookupMRUXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string MRUXml = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly bool? ShowInAddressBook = null;
		
		public readonly string ReadingPaneXml = null;
		
		public readonly string RecentlyViewedXml = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string TabOrderXml = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("processtrigger")]
	public class ProcessTrigger : Entity
    {
        public const string EntityLogicalName = "processtrigger";
        public ProcessTrigger() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processtriggerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processtriggerid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference FormId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? ProcessTriggerId = null;
		
		public readonly OptionSetValue Scope = null;
		
		public readonly Guid? ProcessTriggerIdUnique = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue ControlType = null;
		
		public readonly string Event = null;
		
		public readonly Guid? MethodId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue PipelineStage = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly string ControlName = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Scope
            {
                Form = 1,
                Entity = 2
            }
            public enum ControlType
            {
                Attribute = 1,
                FormTab = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PipelineStage
            {
                DefaultValue = 0,
                BeforeMainOperation = 20,
                AfterMainOperation = 40
            }
            public enum PrimaryEntityTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userfiscalcalendar")]
	public class UserFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "userfiscalcalendar";
        public UserFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money Period5_Base = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Period2_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money Period13 = null;
		
		public readonly Money Period10 = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly Money Period11 = null;
		
		public readonly Money Period8_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money Period7 = null;
		
		public readonly Money Period6 = null;
		
		public readonly Money Period5 = null;
		
		public readonly Money Period4 = null;
		
		public readonly Money Period3 = null;
		
		public readonly Money Period2 = null;
		
		public readonly Money Period1 = null;
		
		public readonly Money Period12 = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly Money Period9 = null;
		
		public readonly Money Period8 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Period1_Base = null;
		
		public readonly Money Period10_Base = null;
		
		public readonly Money Period3_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly Money Period9_Base = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money Period11_Base = null;
		
		public readonly Money Period6_Base = null;
		
		public readonly Money Period12_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money Period13_Base = null;
		
		public readonly Money Period4_Base = null;
		
		public readonly Money Period7_Base = null;
		
		public readonly EntityReference SalesPersonId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutionhealthruleargument")]
	public class msdyn_solutionhealthruleargument : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthruleargument";
        public msdyn_solutionhealthruleargument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthruleargumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthruleargumentid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_SolutionHealthRule = null;
		
		public readonly string msdyn_Value = null;
		
		public readonly string msdyn_Key = null;
		
		public readonly Guid? msdyn_solutionhealthruleargumentId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelaccessprofilerule")]
	public class ChannelAccessProfileRule : Entity
    {
        public const string EntityLogicalName = "channelaccessprofilerule";
        public ChannelAccessProfileRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ChannelAccessProfileRuleIdUnique = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly Guid? ChannelAccessProfileRuleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("incidentknowledgebaserecord")]
	public class IncidentKnowledgeBaseRecord : Entity
    {
        public const string EntityLogicalName = "incidentknowledgebaserecord";
        public IncidentKnowledgeBaseRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("incidentknowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["incidentknowledgebaserecordid"] = value;
            }
        }
		
		public readonly Guid? IncidentId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? IncidentKnowledgeBaseRecordId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? KnowledgeBaseRecordId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quoteinvoicingproduct")]
	public class msdyn_quoteinvoicingproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quoteinvoicingproduct";
        public msdyn_quoteinvoicingproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quoteinvoicingproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quoteinvoicingproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_QuoteInvoicingSetup = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_unitprice_Base = null;
		
		public readonly Money msdyn_UnitPrice = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? msdyn_quoteinvoicingproductId = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("campaignresponse")]
	public class CampaignResponse : Entity
    {
        public const string EntityLogicalName = "campaignresponse";
        public CampaignResponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Fax = null;
		
		public readonly EntityCollection from = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customer = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly string Telephone = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string CompanyName = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly string PromotionCodeName = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EMailAddress = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly string LastName = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly DateTime? ReceivedOn = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityCollection Partner = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string FirstName = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly OptionSetValue ResponseCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OriginatingActivityId = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue ChannelTypeCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string YomiCompanyName = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum ResponseCode
            {
                Interested = 1,
                NotInterested = 2,
                DoNotSendMarketingMaterials = 3,
                Error = 4
            }
            public enum StatusCode
            {
                Open = 1,
                Closed = 2,
                Canceled = 3
            }
            public enum ChannelTypeCode
            {
                Email = 1,
                Phone = 2,
                Fax = 3,
                Letter = 4,
                Appointment = 5,
                Others = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("activitymimeattachment")]
	public class ActivityMimeAttachment : Entity
    {
        public const string EntityLogicalName = "activitymimeattachment";
        public ActivityMimeAttachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitymimeattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitymimeattachmentid"] = value;
            }
        }
		
		public readonly string ActivitySubject = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? AttachmentNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string AnonymousLink = null;
		
		public readonly Guid? ActivityMimeAttachmentId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FileName = null;
		
		public readonly int? FileSize = null;
		
		public readonly EntityReference AttachmentId = null;
		
		public readonly string Subject = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string MimeType = null;
		
		public readonly Guid? ActivityMimeAttachmentIdUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsFollowed = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly string AttachmentContentId = null;
		
		public readonly string Body = null;
		
		public readonly EntityReference ActivityId = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {
                EmailTemplate = 2010,
                EmailActivity = 4200
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionclients")]
	public class SubscriptionClients : Entity
    {
        public const string EntityLogicalName = "subscriptionclients";
        public SubscriptionClients() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionclientid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionclientid"] = value;
            }
        }
		
		public readonly string MachineName = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? IsPrimaryClient = null;
		
		public readonly Guid? SubscriptionClientId = null;
		
		public readonly Guid? ClientId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("annualfiscalcalendar")]
	public class AnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "annualfiscalcalendar";
        public AnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("annual")]
		public readonly Money Period1 = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("annual_base")]
		public readonly Money Period1_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference SalesPersonId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcecategory")]
	public class BookableResourceCategory : Entity
    {
        public const string EntityLogicalName = "bookableresourcecategory";
        public BookableResourceCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecategoryid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly int? msdyn_targetutilization = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? BookableResourceCategoryId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue msdyn_billingtype = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_billingtype
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_surveyinvite")]
	public class msfp_surveyinvite : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_surveyinvite";
        public msfp_surveyinvite() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly string msfp_sourcesurveyidentifier = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly EntityReference msfp_surveyid = null;
		
		public readonly EntityCollection From = null;
		
		public readonly OptionSetValue msfp_channel = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly OptionSetValue msfp_invitestatus = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly string msfp_subject = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? msfp_invitesentdate = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? msfp_inviteupdateddate = null;
		
		public readonly string msfp_otherproperties = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly string msfp_invitestatusreason = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string msfp_inviteemailaddress = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum msfp_channel
            {
                Email = 647390000,
                Flow = 647390001
            }
            public enum msfp_invitestatus
            {
                Queued = 647390000,
                UnSubscribed = 647390001,
                Sent = 647390002,
                Responded = 647390003,
                Failed = 647390004
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("leadtoopportunitysalesprocess")]
	public class LeadToOpportunitySalesProcess : Entity
    {
        public const string EntityLogicalName = "leadtoopportunitysalesprocess";
        public LeadToOpportunitySalesProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly EntityReference LeadId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("recommendeddocument")]
	public class RecommendedDocument : Entity
    {
        public const string EntityLogicalName = "recommendeddocument";
        public RecommendedDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendeddocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendeddocumentid"] = value;
            }
        }
		
		public readonly string FullName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string EditUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string IconClassName = null;
		
		public readonly string FileType = null;
		
		public readonly string Location = null;
		
		public readonly int? FileSize = null;
		
		public readonly string Version = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string AbsoluteUrl = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ContentType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? RecommendedDocumentId = null;
		
		public readonly string ExternalDocumentId = null;
		
		public readonly string ExternalModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ReadUrl = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string AssociatedRecordName = null;
		
		public readonly string Author = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Source = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rolecompetencyrequirement")]
	public class msdyn_rolecompetencyrequirement : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rolecompetencyrequirement";
        public msdyn_rolecompetencyrequirement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rolecompetencyrequirementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rolecompetencyrequirementid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ratingvalue = null;
		
		public readonly EntityReference msdyn_resourcecategory = null;
		
		public readonly EntityReference msdyn_characteristic = null;
		
		public readonly OptionSetValue msdyn_characteristictype = null;
		
		public readonly Guid? msdyn_rolecompetencyrequirementId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_characteristictype
            {
                Skill = 1,
                Certification = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("emailsignature")]
	public class EmailSignature : Entity
    {
        public const string EntityLogicalName = "emailsignature";
        public EmailSignature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsignatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsignatureid"] = value;
            }
        }
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? GenerationTypeCode = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PresentationXml = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly Guid? EmailSignatureId = null;
		
		public readonly string Body = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue ComponentState = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("businessunit")]
	public class BusinessUnit : Entity
    {
        public const string EntityLogicalName = "businessunit";
        public BusinessUnit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string Address1_County = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly EntityReference ParentBusinessUnitId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string FtpSiteUrl = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Address2_Name = null;
		
		public readonly int? InheritanceMask = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address2_County = null;
		
		public readonly string FileAsName = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? WorkflowSuspended = null;
		
		public readonly string EMailAddress = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_City = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly string Picture = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? UserGroupId = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string DisabledReason = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly string Address2_City = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly string StockExchange = null;
		
		public readonly double? CreditLimit = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string DivisionName = null;
		
		public readonly string Address1_Telephone3 = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string CostCenter = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("slaitem")]
	public class SLAItem : Entity
    {
        public const string EntityLogicalName = "slaitem";
        public SLAItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaitemid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly string Name = null;
		
		public readonly int? FailureAfter = null;
		
		public readonly Guid? SLAItemId = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SLAItemIdUnique = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string SuccessConditionsXml = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? WarnAfter = null;
		
		public readonly string ApplicableWhenXml = null;
		
		public readonly string RelatedField = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderinvoicingdate")]
	public class msdyn_orderinvoicingdate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderinvoicingdate";
        public msdyn_orderinvoicingdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderinvoicingdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderinvoicingdateid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly DateTime? msdyn_InvoiceDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Order = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly Guid? msdyn_orderinvoicingdateId = null;
		
		public readonly OptionSetValue msdyn_InvoiceStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_InvoiceStatus
            {
                Scheduled = 690970000,
                Processed = 690970001,
                Canceled = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_question")]
	public class msfp_question : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_question";
        public msfp_question() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msfp_questionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msfp_questionid"] = value;
            }
        }
		
		public readonly int? msfp_sequence = null;
		
		public readonly string msfp_questiontext = null;
		
		public readonly string msfp_sourcesurveyidentifier = null;
		
		public readonly OptionSetValue msfp_choicetype = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msfp_name = null;
		
		public readonly string msfp_sourceparentquestionidentifier = null;
		
		public readonly Guid? msfp_questionId = null;
		
		public readonly string msfp_correctanswer = null;
		
		public readonly bool? msfp_responserequired = null;
		
		public readonly EntityReference msfp_Survey = null;
		
		public readonly string msfp_otherproperties = null;
		
		public readonly OptionSetValue msfp_questiontype = null;
		
		public readonly bool? msfp_multiline = null;
		
		public readonly string msfp_imageproperties = null;
		
		public readonly int? msfp_Maximumrating = null;
		
		public readonly string msfp_subtitle = null;
		
		public readonly string msfp_Sourcequestionidentifier = null;
		
		public readonly string msfp_questionchoices = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msfp_choicetype
            {
                SingleChoice = 647390000,
                MultiChoice = 647390001,
                None = 647390002
            }
            public enum msfp_questiontype
            {
                Choice = 647390000,
                Text = 647390001,
                Rating = 647390002,
                Date = 647390003,
                Ranking = 647390004,
                MatrixChoiceGroup = 647390005,
                MatrixChoice = 647390006,
                NPS = 647390007,
                FileUpload = 647390008,
                Number = 647390009
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workordercharacteristic")]
	public class msdyn_workordercharacteristic : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workordercharacteristic";
        public msdyn_workordercharacteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workordercharacteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workordercharacteristicid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_RatingValue = null;
		
		public readonly EntityReference msdyn_WorkOrderIncident = null;
		
		public readonly EntityReference msdyn_Characteristic = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly Guid? msdyn_workordercharacteristicId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("connection")]
	public class Connection : Entity
    {
        public const string EntityLogicalName = "connection";
        public Connection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference Record1RoleId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue Record1ObjectTypeCode = null;
		
		public readonly EntityReference RelatedConnectionId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue Record2ObjectTypeCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? EffectiveStart = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? EffectiveEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ConnectionId = null;
		
		public readonly EntityReference Record2RoleId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference Record2Id = null;
		
		public readonly bool? IsMaster = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference Record1Id = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Record1ObjectTypeCode
            {
                WorkOrderServiceTask = 10244,
                IncidentTypeCharacteristic = 10188,
                Case = 112,
                ResourceTerritory = 10066,
                WorkOrderService = 10243,
                PaymentMethod = 10204,
                ProjectTeamMember = 10122,
                AgreementInvoiceDate = 10170,
                IoTDeviceRegistrationHistory = 10255,
                SurveyInvite = 10041,
                Lead = 4,
                PurchaseOrderReceipt = 10211,
                Contract = 1010,
                Project = 10114,
                Appointment = 4201,
                MarketingList = 4300,
                PurchaseOrder = 10208,
                CampaignActivity = 4402,
                CustomerAsset = 10180,
                RMAReceiptProduct = 10225,
                Position = 50,
                Fax = 4204,
                AgreementBookingProduct = 10166,
                ProcessNotes = 10113,
                PurchaseOrderReceiptProduct = 10212,
                Email = 4202,
                ProfileAlbum = 10032,
                Contact = 2,
                PurchaseOrderBill = 10209,
                Competitor = 123,
                IoTDeviceCategory = 10250,
                ChannelAccessProfileRule = 9400,
                Team = 9,
                RTVProduct = 10228,
                PurchaseOrderSubStatus = 10213,
                PhoneCall = 4210,
                ProcessSession = 4710,
                ResourceGroup = 4007,
                TaxCode = 10232,
                Territory = 2013,
                RMAReceipt = 10224,
                Order = 1088,
                AgreementBookingSetup = 10169,
                RMASubStatus = 10226,
                SystemUserSchedulerSetting = 10069,
                FacilityEquipment = 4000,
                Payment = 10202,
                RecurringAppointment = 4251,
                IoTDevice = 10249,
                Task = 4212,
                IoTDeviceCommand = 10251,
                SocialProfile = 99,
                WorkOrder = 10237,
                RMA = 10222,
                BookingAlert = 10047,
                IoTAlert = 10248,
                AgreementBookingDate = 10164,
                BookingAlertStatus = 10048,
                AgreementBookingService = 10167,
                Letter = 4207,
                ProjectServiceApproval = 10075,
                TimeGroupDetail = 10071,
                WorkOrderIncident = 10240,
                BookingRule = 10050,
                AgreementBookingIncident = 10165,
                Entitlement = 9700,
                Activity = 4200,
                RTV = 10227,
                ShipVia = 10231,
                EntitlementTemplateChannel = 9703,
                EntitlementChannel = 9701,
                AgreementInvoiceProduct = 10171,
                PriceList = 1022,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                PaymentTerm = 10205,
                RTVSubstatus = 10229,
                IncidentTypeProduct = 10189,
                WorkOrderProduct = 10241,
                KnowledgeArticle = 9953,
                QuoteBookingProduct = 10215,
                ResourceRestrictionDeprecated = 10242,
                AgreementBookingServiceTask = 10168,
                ServiceActivity = 4214,
                BookingTimestamp = 10175,
                InventoryTransfer = 10197,
                InventoryAdjustmentProduct = 10195,
                IncidentTypeService = 10190,
                Campaign = 4400,
                QuoteBookingServiceTask = 10217,
                ProductInventory = 10207,
                Warehouse = 10236,
                Opportunity = 3,
                SocialActivity = 4216,
                AgreementInvoiceSetup = 10172,
                KnowledgeBaseRecord = 9930,
                Quote = 1084,
                Invoice = 1090,
                PurchaseOrderProduct = 10210,
                Account = 1,
                Agreement = 10163,
                SurveyResponse = 10042,
                PaymentDetail = 10203,
                Product = 1024,
                PostalCode = 10206,
                TimeOffRequest = 10234,
                FulfillmentPreference = 10070,
                WorkOrderCharacteristicDeprecated = 10238,
                User = 8,
                RMAProduct = 10223,
                Goal = 9600,
                InventoryJournal = 10196,
                SchedulingGroup = 4005,
                InventoryAdjustment = 10194
            }
            public enum Record2ObjectTypeCode
            {
                IncidentTypeCharacteristic = 10188,
                AgreementInvoiceProduct = 10171,
                IoTAlert = 10248,
                Fax = 4204,
                ChannelAccessProfileRule = 9400,
                Campaign = 4400,
                Position = 50,
                ProfileAlbum = 10032,
                Team = 9,
                RTVSubstatus = 10229,
                AgreementBookingIncident = 10165,
                RecurringAppointment = 4251,
                PhoneCall = 4210,
                Contact = 2,
                ShipVia = 10231,
                CampaignActivity = 4402,
                IoTDevice = 10249,
                Opportunity = 3,
                PurchaseOrderBill = 10209,
                QuoteBookingService = 10216,
                ProjectTeamMember = 10122,
                AgreementInvoiceSetup = 10172,
                PriceList = 1022,
                Territory = 2013,
                ProcessSession = 4710,
                AgreementBookingProduct = 10166,
                AgreementBookingService = 10167,
                EntitlementTemplateChannel = 9703,
                PaymentDetail = 10203,
                AgreementBookingServiceTask = 10168,
                IoTDeviceRegistrationHistory = 10255,
                EntitlementChannel = 9701,
                Product = 1024,
                RTVProduct = 10228,
                Quote = 1084,
                SocialActivity = 4216,
                ProjectServiceApproval = 10075,
                SurveyResponse = 10042,
                FacilityEquipment = 4000,
                BookingRule = 10050,
                PurchaseOrderReceipt = 10211,
                PurchaseOrder = 10208,
                IncidentTypeProduct = 10189,
                PurchaseOrderProduct = 10210,
                AgreementBookingSetup = 10169,
                TimeGroupDetail = 10071,
                WorkOrderCharacteristicDeprecated = 10238,
                PaymentMethod = 10204,
                PaymentTerm = 10205,
                ProductInventory = 10207,
                QuoteBookingIncident = 10214,
                ResourceGroup = 4007,
                BookingAlertStatus = 10048,
                KnowledgeArticle = 9953,
                Letter = 4207,
                Email = 4202,
                User = 8,
                WorkOrderIncident = 10240,
                RMAReceiptProduct = 10225,
                FulfillmentPreference = 10070,
                Activity = 4200,
                RMAReceipt = 10224,
                IncidentTypeService = 10190,
                RMAProduct = 10223,
                WorkOrderServiceTask = 10244,
                Appointment = 4201,
                AgreementBookingDate = 10164,
                BookingAlert = 10047,
                CustomerAsset = 10180,
                Project = 10114,
                QuoteBookingProduct = 10215,
                SocialProfile = 99,
                RMA = 10222,
                ResourceRestrictionDeprecated = 10242,
                SystemUserSchedulerSetting = 10069,
                MarketingList = 4300,
                Warehouse = 10236,
                TimeOffRequest = 10234,
                SurveyInvite = 10041,
                QuoteBookingServiceTask = 10217,
                Goal = 9600,
                IoTDeviceCategory = 10250,
                SchedulingGroup = 4005,
                Payment = 10202,
                AgreementInvoiceDate = 10170,
                IoTDeviceCommand = 10251,
                PurchaseOrderReceiptProduct = 10212,
                InventoryJournal = 10196,
                ServiceActivity = 4214,
                KnowledgeBaseRecord = 9930,
                TaxCode = 10232,
                Lead = 4,
                Competitor = 123,
                InventoryTransfer = 10197,
                Task = 4212,
                WorkOrder = 10237,
                Case = 112,
                Order = 1088,
                RMASubStatus = 10226,
                ProcessNotes = 10113,
                PurchaseOrderSubStatus = 10213,
                WorkOrderProduct = 10241,
                InventoryAdjustmentProduct = 10195,
                Agreement = 10163,
                WorkOrderService = 10243,
                Entitlement = 9700,
                PostalCode = 10206,
                BookingTimestamp = 10175,
                Invoice = 1090,
                Account = 1,
                InventoryAdjustment = 10194,
                ResourceTerritory = 10066,
                Contract = 1010,
                RTV = 10227
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_taxcodedetail")]
	public class msdyn_taxcodedetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_taxcodedetail";
        public msdyn_taxcodedetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_taxcodedetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_taxcodedetailid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_taxcodedetailId = null;
		
		public readonly EntityReference msdyn_ParentTaxCode = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly bool? msdyn_TaxOnTax = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessageresponse")]
	public class SdkMessageResponse : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponse";
        public SdkMessageResponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponseid"] = value;
            }
        }
		
		public readonly Guid? SdkMessageResponseIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SdkMessageResponseId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference SdkMessageRequestId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalattributeaccessmap")]
	public class PrincipalAttributeAccessMap : Entity
    {
        public const string EntityLogicalName = "principalattributeaccessmap";
        public PrincipalAttributeAccessMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalattributeaccessmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalattributeaccessmapid"] = value;
            }
        }
		
		public readonly Guid? PrincipalId = null;
		
		public readonly OptionSetValue ReadAccess = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue CreateAccess = null;
		
		public readonly Guid? AttributeId = null;
		
		public readonly OptionSetValue UpdateAccess = null;
		
		public readonly Guid? PrincipalAttributeAccessMapId = null;

        public new static class Options
        {
            public enum ReadAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CreateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum UpdateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuserprofiles")]
	public class SystemUserProfiles : Entity
    {
        public const string EntityLogicalName = "systemuserprofiles";
        public SystemUserProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprofileid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? FieldSecurityProfileId = null;
		
		public readonly Guid? SystemUserProfileId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("expanderevent")]
	public class ExpanderEvent : Entity
    {
        public const string EntityLogicalName = "expanderevent";
        public ExpanderEvent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("expandereventid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["expandereventid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ExpanderEventId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? CorrelationId = null;
		
		public readonly string ContextUri = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Registrations = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("campaignactivityitem")]
	public class CampaignActivityItem : Entity
    {
        public const string EntityLogicalName = "campaignactivityitem";
        public CampaignActivityItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignactivityitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignactivityitemid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CampaignActivityId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ItemId = null;
		
		public readonly Guid? CampaignActivityItemId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly string ItemObjectTypeCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;

        public new static class Options
        {
            public enum ItemObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_processnotes")]
	public class msdyn_processnotes : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_processnotes";
        public msdyn_processnotes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_processnotesid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_processnotesid"] = value;
            }
        }
		
		public readonly string msdyn_Form = null;
		
		public readonly string msdyn_Entity = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_processnotesId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_Message = null;
		
		public readonly string msdyn_EntityName = null;
		
		public readonly string msdyn_Details = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("productpricelevel")]
	public class ProductPriceLevel : Entity
    {
        public const string EntityLogicalName = "productpricelevel";
        public ProductPriceLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productpricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productpricelevelid"] = value;
            }
        }
		
		public readonly string ProductNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue QuantitySellingCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference DiscountTypeId = null;
		
		public readonly Money RoundingOptionAmount_Base = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly Money RoundingOptionAmount = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? Percentage = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue PricingMethodCode = null;
		
		public readonly OptionSetValue RoundingOptionCode = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money Amount_Base = null;
		
		public readonly Money Amount = null;
		
		public readonly Guid? ProductPriceLevelId = null;
		
		public readonly OptionSetValue RoundingPolicyCode = null;
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum QuantitySellingCode
            {
                NoControl = 1,
                Whole = 2,
                WholeAndFractional = 3
            }
            public enum PricingMethodCode
            {
                CurrencyAmount = 1,
                PercentOfList = 2,
                PercentMarkupCurrentCost = 3,
                PercentMarginCurrentCost = 4,
                PercentMarkupStandardCost = 5,
                PercentMarginStandardCost = 6
            }
            public enum RoundingOptionCode
            {
                EndsIn = 1,
                MultipleOf = 2
            }
            public enum RoundingPolicyCode
            {
                None = 1,
                Up = 2,
                Down = 3,
                ToNearest = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_actioncardrolesetting")]
	public class msdyn_actioncardrolesetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_actioncardrolesetting";
        public msdyn_actioncardrolesetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_actioncardrolesettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_actioncardrolesettingid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Roleid = null;
		
		public readonly EntityReference msdyn_cardtypeid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_IsDisabled = null;
		
		public readonly Guid? msdyn_actioncardrolesettingId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appconfig")]
	public class AppConfig : Entity
    {
        public const string EntityLogicalName = "appconfig";
        public AppConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfigid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? AppConfigId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string AppConfigImportXml = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference AppModuleId = null;
		
		public readonly Guid? AppConfigIdUnique = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("kbarticletemplate")]
	public class KbArticleTemplate : Entity
    {
        public const string EntityLogicalName = "kbarticletemplate";
        public KbArticleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticletemplateid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? KbArticleTemplateIdUnique = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string StructureXml = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? KbArticleTemplateId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string FormatXml = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? IsActive = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_timegroup")]
	public class msdyn_timegroup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_timegroup";
        public msdyn_timegroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_timegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_timegroupid"] = value;
            }
        }
		
		public readonly bool? msdyn_ResetPerTimeGroupDetail = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly int? msdyn_DisplayTopXResultsInSATimeGroup = null;
		
		public readonly bool? msdyn_HideBookingTimeOnSA = null;
		
		public readonly DateTime? msdyn_intervalsbegin = null;
		
		public readonly string traversedpath = null;
		
		public readonly Guid? msdyn_timegroupId = null;
		
		public readonly int? msdyn_interval = null;
		
		public readonly Guid? processid = null;
		
		public readonly int? msdyn_resultsperinterval = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("routingrule")]
	public class RoutingRule : Entity
    {
        public const string EntityLogicalName = "routingrule";
        public RoutingRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? RoutingRuleIdUnique = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? RoutingRuleId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("imagedescriptor")]
	public class ImageDescriptor : Entity
    {
        public const string EntityLogicalName = "imagedescriptor";
        public ImageDescriptor() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("imagedescriptorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["imagedescriptorid"] = value;
            }
        }
		
		public readonly string ImageDescription = null;
		
		public readonly int? FileSizeBytes = null;
		
		public readonly int? Size = null;
		
		public readonly int? ImagePixelHeight = null;
		
		public readonly string FileType = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly string FileLocation = null;
		
		public readonly string ImageURL = null;
		
		public readonly string Title = null;
		
		public readonly string FileName = null;
		
		public readonly int? ImageTimestamp = null;
		
		public readonly byte[] FullImageData = null;
		
		public readonly int? ImagePixelWidth = null;
		
		public readonly Guid? ImageDescriptorId = null;
		
		public readonly byte[] ImageData = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly string ImageTags = null;
		
		public readonly string MimeType = null;
		
		public readonly string FullImageURL = null;
		
		public readonly int? ColorDepthBits = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttypeservicetask")]
	public class msdyn_incidenttypeservicetask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttypeservicetask";
        public msdyn_incidenttypeservicetask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypeservicetaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypeservicetaskid"] = value;
            }
        }
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? msdyn_incidenttypeservicetaskId = null;
		
		public readonly EntityReference msdyn_TaskType = null;
		
		public readonly EntityReference msdyn_IncidentType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("team")]
	public class Team : Entity
    {
        public const string EntityLogicalName = "team";
        public Team() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly EntityReference AdministratorId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly Guid? TeamId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? AzureActiveDirectoryObjectId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly string EMailAddress = null;
		
		public readonly bool? SystemManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string TraversedPath = null;
		
		public readonly OptionSetValue TeamType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string YomiName = null;
		
		public readonly EntityReference TeamTemplateId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum TeamType
            {
                Owner = 0,
                Access = 1,
                AADSecurityGroup = 2,
                AADOfficeGroup = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("isvconfig")]
	public class IsvConfig : Entity
    {
        public const string EntityLogicalName = "isvconfig";
        public IsvConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("isvconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["isvconfigid"] = value;
            }
        }
		
		public readonly Guid? OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ConfigXML = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? IsvConfigId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("advancedsimilarityrule")]
	public class AdvancedSimilarityRule : Entity
    {
        public const string EntityLogicalName = "advancedsimilarityrule";
        public AdvancedSimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("advancedsimilarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["advancedsimilarityruleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly int? MaxNumberKeyphrases = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly bool? IsAzureMLRequired = null;
		
		public readonly int? NgramSize = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly string FilterResultByStatusDisplayName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string ExactMatchList = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Entity = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? AdvancedSimilarityRuleId = null;
		
		public readonly Guid? AdvancedSimilarityRuleIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string SourceEntity = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly string NoiseKeyphraseslist = null;
		
		public readonly OptionSetValue FilterResultByStatus = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SourceEntity
            {
                Case = 112
            }
            public enum FilterResultByStatus
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectapproval")]
	public class msdyn_projectapproval : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projectapproval";
        public msdyn_projectapproval() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectapprovalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectapprovalid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ExpenseEntry = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly decimal? msdyn_SalesQuantity = null;
		
		public readonly string msdyn_JournalTransaction = null;
		
		public readonly EntityReference msdyn_Manager = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly decimal? msdyn_CostQuantity = null;
		
		public readonly EntityReference msdyn_TimeEntry = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue msdyn_recordstage = null;
		
		public readonly string msdyn_ExternalComments = null;
		
		public readonly string msdyn_referencetimeid = null;
		
		public readonly EntityReference msdyn_SubmittedBy = null;
		
		public readonly string msdyn_referenceexpenseid = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly DateTime? msdyn_date = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly Money msdyn_salesamount = null;
		
		public readonly Money msdyn_costamount_Base = null;
		
		public readonly DateTime? msdyn_ApprovedOn = null;
		
		public readonly Money msdyn_costprice_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_InternalComments = null;
		
		public readonly EntityReference msdyn_ProjectTask = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_salesamount_Base = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly OptionSetValue msdyn_EntryType = null;
		
		public readonly Money msdyn_CostPrice = null;
		
		public readonly EntityReference msdyn_ApprovedBy = null;
		
		public readonly Money msdyn_salesprice_Base = null;
		
		public readonly EntityReference msdyn_referencejournalline = null;
		
		public readonly bool? msdyn_hasreceipt = null;
		
		public readonly EntityReference msdyn_ExpenseCategory = null;
		
		public readonly Money msdyn_SalesPrice = null;
		
		public readonly Guid? msdyn_projectapprovalId = null;
		
		public readonly Money msdyn_costamount = null;

        public new static class Options
        {
            public enum msdyn_recordstage
            {
                Pending = 3,
                Submitted = 0,
                Rejected = 1,
                Approved = 2,
                RecallRequested = 4,
                RecallRequestApproved = 5,
                RecallRequestRejected = 6
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_EntryType
            {
                Time = 0,
                Expense = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("postcomment")]
	public class PostComment : Entity
    {
        public const string EntityLogicalName = "postcomment";
        public PostComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postcommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postcommentid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference PostId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Text = null;
		
		public readonly Guid? PostCommentId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcebooking")]
	public class BookableResourceBooking : Entity
    {
        public const string EntityLogicalName = "bookableresourcebooking";
        public BookableResourceBooking() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingid"] = value;
            }
        }
		
		public readonly EntityReference Resource = null;
		
		public readonly OptionSetValue msdyn_BookingMethod = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference msdyn_projectteamid = null;
		
		public readonly bool? msdyn_TravelTimeRescheduling = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string msdyn_URSInternalFlags = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly bool? msdyn_AllowOverlapping = null;
		
		public readonly int? msdyn_ActualTravelDuration = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? msdyn_TotalDurationInProgress = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly bool? msdyn_CascadeCrewChanges = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? msdyn_TotalBreakDuration = null;
		
		public readonly EntityReference BookingStatus = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string msdyn_SlotText = null;
		
		public readonly double? msdyn_MilesTraveled = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference msdyn_AppointmentBookingId = null;
		
		public readonly EntityReference msdyn_requirementgroupid = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly DateTime? msdyn_EstimatedArrivalTime = null;
		
		public readonly string TraversedPath = null;
		
		public readonly decimal? msdyn_effort = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? msdyn_TotalBillableDuration = null;
		
		public readonly bool? msdyn_AcceptCascadeCrewChanges = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		
		public readonly bool? msdyn_PreventTimestampCreation = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference msdyn_resourcecategoryid = null;
		
		public readonly int? msdyn_EstimatedTravelDuration = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference msdyn_AgreementBookingDate = null;
		
		public readonly DateTime? msdyn_ActualArrivalTime = null;
		
		public readonly EntityReference Header = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_projectid = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference msdyn_BookingSetupMetadataId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly Guid? BookableResourceBookingId = null;
		
		public readonly OptionSetValue BookingType = null;
		
		public readonly Money msdyn_TotalCost = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? msdyn_OfflineTimestamp = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly string msdyn_Signature = null;
		
		public readonly EntityReference msdyn_TimeGroupDetailSelected = null;
		
		public readonly EntityReference msdyn_ResourceGroup = null;

        public new static class Options
        {
            public enum msdyn_BookingMethod
            {
                SystemAgreementSchedule = 690970005,
                ScheduleBoard = 690970001,
                Mobile = 690970002,
                Manual = 690970003,
                ScheduleAssistant = 690970004
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum BookingType
            {
                Liquid = 2,
                Solid = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("servicecontractcontacts")]
	public class ServiceContractContacts : Entity
    {
        public const string EntityLogicalName = "servicecontractcontacts";
        public ServiceContractContacts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("servicecontractcontactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["servicecontractcontactid"] = value;
            }
        }
		
		public readonly Guid? ServiceContractContactId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ServiceLevel = null;
		
		public readonly Guid? ContractId = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_survey")]
	public class msfp_survey : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_survey";
        public msfp_survey() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msfp_surveyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msfp_surveyid"] = value;
            }
        }
		
		public readonly string msfp_sourcesurveyidentifier = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msfp_name = null;
		
		public readonly string msfp_description = null;
		
		public readonly string msfp_otherproperties = null;
		
		public readonly Guid? msfp_surveyId = null;
		
		public readonly bool? msfp_acceptanonymousresponses = null;
		
		public readonly DateTime? msfp_sourcesurveymodifieddate = null;
		
		public readonly string msfp_sourcesurveyversion = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_opportunitypricelist")]
	public class msdyn_opportunitypricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_opportunitypricelist";
        public msdyn_opportunitypricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_opportunitypricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_opportunitypricelistid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Opportunity = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_opportunitypricelistId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_flowcardtype")]
	public class msdyn_flowcardtype : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_flowcardtype";
        public msdyn_flowcardtype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_flowcardtypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_flowcardtypeid"] = value;
            }
        }
		
		public readonly string msdyn_samplebody = null;
		
		public readonly bool? msdyn_isdeleted = null;
		
		public readonly string msdyn_flowname = null;
		
		public readonly string msdyn_actionname = null;
		
		public readonly string msdyn_actionCommand = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_cardtypeid = null;
		
		public readonly bool? msdyn_iscdsflow = null;
		
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_sampletitle = null;
		
		public readonly string msdyn_cardname = null;
		
		public readonly Guid? msdyn_flowcardtypeId = null;
		
		public readonly string msdyn_workflowid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_journalline")]
	public class msdyn_journalline : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_journalline";
        public msdyn_journalline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_journallineid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_journallineid"] = value;
            }
        }
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly string msdyn_SalesContractLine = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly string msdyn_externaldescription = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly EntityReference msdyn_Journal = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly OptionSetValue msdyn_BillingStatus = null;
		
		public readonly bool? msdyn_IsPosted = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly EntityReference msdyn_SalesContractLineId = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly Guid? msdyn_journallineId = null;
		
		public readonly EntityReference msdyn_SalesContract = null;
		
		public readonly EntityReference msdyn_contractorganizationalunitid = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_BillingStatus
            {
                ReadyToInvoice = 192350004,
                WorkOrderClosedPosted = 690970000,
                UnbilledSalesCreated = 192350000,
                CustomerInvoiceCreated = 192350001,
                CustomerInvoicePosted = 192350002,
                Canceled = 192350003
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("integrationstatus")]
	public class IntegrationStatus : Entity
    {
        public const string EntityLogicalName = "integrationstatus";
        public IntegrationStatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("integrationentryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["integrationentryid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? IntegrationEntryId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string StatusDescription = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string SystemName = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string StateDescription = null;
		
		public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum StateCode
            {

            }
            public enum StatusCode
            {

            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("timestampdatemapping")]
	public class TimeStampDateMapping : Entity
    {
        public const string EntityLogicalName = "timestampdatemapping";
        public TimeStampDateMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestampdatemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestampdatemappingid"] = value;
            }
        }
		
		public readonly int? TimeStamp = null;
		
		public readonly Guid? TimeStampDateMappingId = null;
		
		public readonly DateTime? Date = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dynamicpropertyinstance")]
	public class DynamicPropertyInstance : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyinstance";
        public DynamicPropertyInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyinstanceid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? validationstatus = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string ValueString = null;
		
		public readonly decimal? ValueDecimal = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? DynamicPropertyInstanceid = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly double? ValueDouble = null;
		
		public readonly int? ValueInteger = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference DynamicPropertyId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? DMTImportState = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_wallsavedqueryusersettings")]
	public class msdyn_wallsavedqueryusersettings : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_wallsavedqueryusersettings";
        public msdyn_wallsavedqueryusersettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_wallsavedqueryusersettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_wallsavedqueryusersettingsid"] = value;
            }
        }
		
		public readonly int? msdyn_otc = null;
		
		public readonly EntityReference msdyn_wallsavedqueryid = null;
		
		public readonly EntityReference msdyn_userid = null;
		
		public readonly int? msdyn_sortorder = null;
		
		public readonly int? msdyn_default = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_entityname = null;
		
		public readonly Guid? msdyn_wallsavedqueryusersettingsId = null;
		
		public readonly bool? msdyn_IsVirtual = null;
		
		public readonly bool? msdyn_isvisible = null;
		
		public readonly string msdyn_data = null;
		
		public readonly int? msdyn_type = null;
		
		public readonly bool? msdyn_includewallinresponse = null;
		
		public readonly string msdyn_entitydisplayname = null;
		
		public readonly int? msdyn_isvisiblebit = null;
		
		public readonly string msdyn_savedqueryname = null;
		
		public readonly bool? msdyn_isfollowing = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribbonrule")]
	public class RibbonRule : Entity
    {
        public const string EntityLogicalName = "ribbonrule";
        public RibbonRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbonruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbonruleid"] = value;
            }
        }
		
		public readonly OptionSetValue RuleType = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string RuleDefinition = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string RuleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? RibbonRuleUniqueId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Entity = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly Guid? RibbonRuleId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum RuleType
            {
                Enable = 1,
                Trim = 2,
                TabSelection = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("callbackregistration")]
	public class CallbackRegistration : Entity
    {
        public const string EntityLogicalName = "callbackregistration";
        public CallbackRegistration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("callbackregistrationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["callbackregistrationid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue Scope = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Url = null;
		
		public readonly string FilteringAttributes = null;
		
		public readonly string EntityName = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue Version = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Message = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? CallbackRegistrationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Scope
            {
                User = 1,
                BusinessUnit = 2,
                ParentChildBusinessUnit = 3,
                Organization = 4
            }
            public enum Version
            {
                V1 = 1
            }
            public enum Message
            {
                Create = 1,
                Delete = 2,
                Update = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("invaliddependency")]
	public class InvalidDependency : Entity
    {
        public const string EntityLogicalName = "invaliddependency";
        public InvalidDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invaliddependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invaliddependencyid"] = value;
            }
        }
		
		public readonly bool? IsExistingNodeRequiredComponent = null;
		
		public readonly Guid? ExistingComponentId = null;
		
		public readonly OptionSetValue ExistingDependencyType = null;
		
		public readonly Guid? InvalidDependencyId = null;
		
		public readonly OptionSetValue ExistingComponentType = null;
		
		public readonly Guid? MissingComponentId = null;
		
		public readonly int? MissingComponentLookupType = null;
		
		public readonly string MissingComponentInfo = null;
		
		public readonly OptionSetValue MissingComponentType = null;

        public new static class Options
        {
            public enum ExistingDependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }
            public enum ExistingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }
            public enum MissingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("campaignitem")]
	public class CampaignItem : Entity
    {
        public const string EntityLogicalName = "campaignitem";
        public CampaignItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignitemid"] = value;
            }
        }
		
		public readonly EntityReference CampaignId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EntityType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? EntityId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? CampaignItemId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("publisher")]
	public class Publisher : Entity
    {
        public const string EntityLogicalName = "publisher";
        public Publisher() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisherid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisherid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string UniqueName = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string CustomizationPrefix = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Address2_Country = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address1_PostalCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FriendlyName = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string EMailAddress = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address1_County = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly bool? IsReadonly = null;
		
		public readonly string SupportingWebsiteUrl = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Name = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string Address2_City = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? CustomizationOptionValuePrefix = null;
		
		public readonly int? PinpointPublisherId = null;
		
		public readonly Guid? PublisherId = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string PinpointPublisherDefaultLocale = null;
		
		public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("competitoraddress")]
	public class CompetitorAddress : Entity
    {
        public const string EntityLogicalName = "competitoraddress";
        public CompetitorAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitoraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitoraddressid"] = value;
            }
        }
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Composite = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? CompetitorAddressId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string Country = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string City = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly double? Longitude = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Line1 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string PostalCode = null;
		
		public readonly string County = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Line2 = null;
		
		public readonly string Line3 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {

            }
            public enum AddressTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("syncerror")]
	public class SyncError : Entity
    {
        public const string EntityLogicalName = "syncerror";
        public SyncError() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncerrorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncerrorid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Action = null;
		
		public readonly string ErrorDetail = null;
		
		public readonly string ErrorCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ErrorTime = null;
		
		public readonly Guid? SyncErrorId = null;
		
		public readonly string RequestData = null;
		
		public readonly OptionSetValue ErrorType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ActionData = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ErrorMessage = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Resolved = 1
            }
            public enum StatusCode
            {
                Active = 0,
                Fixed = 1
            }
            public enum ErrorType
            {
                Conflict = 0,
                RecordNotFound = 1,
                RecordAlreadyExists = 2,
                Others = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customcontrolresource")]
	public class CustomControlResource : Entity
    {
        public const string EntityLogicalName = "customcontrolresource";
        public CustomControlResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolresourceid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? CustomControlResourceIdUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? CustomControlResourceId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string VersionRequirement = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly Guid? CustomControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementproducts")]
	public class EntitlementProducts : Entity
    {
        public const string EntityLogicalName = "entitlementproducts";
        public EntitlementProducts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementproductid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? EntitlementId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? EntitlementProductId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequirement_systemuser")]
	public class msdyn_resourcerequirement_systemuser : Entity
    {
        public const string EntityLogicalName = "msdyn_resourcerequirement_systemuser";
        public msdyn_resourcerequirement_systemuser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequirement_systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequirement_systemuserid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_resourcerequirementid = null;
		
		public readonly Guid? systemuserid = null;
		
		public readonly Guid? msdyn_resourcerequirement_systemuserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("holidaywrapper")]
	public class holidaywrapper : Entity
    {
        public const string EntityLogicalName = "holidaywrapper";
        public holidaywrapper() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("holidaywrapperid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["holidaywrapperid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string CalendarId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? holidaywrapperId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? SelectedYear = null;
		
		public readonly string Duration = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly DateTime? EndTime = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customeraddress")]
	public class CustomerAddress : Entity
    {
        public const string EntityLogicalName = "customeraddress";
        public CustomerAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customeraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customeraddressid"] = value;
            }
        }
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Composite = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? CustomerAddressId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string County = null;
		
		public readonly string Country = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string City = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string PrimaryContactName = null;
		
		public readonly double? Longitude = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Telephone3 = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string PostalCode = null;
		
		public readonly string Line1 = null;
		
		public readonly string Line2 = null;
		
		public readonly string Line3 = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum ObjectTypeCode
            {
                Account = 1,
                Contact = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_scheduleboardsetting")]
	public class msdyn_scheduleboardsetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_scheduleboardsetting";
        public msdyn_scheduleboardsetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_scheduleboardsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_scheduleboardsettingid"] = value;
            }
        }
		
		public readonly string msdyn_SAUnavailableIcon = null;
		
		public readonly OptionSetValue msdyn_ShareType = null;
		
		public readonly string msdyn_SAPartiallyAvailableIcon = null;
		
		public readonly string msdyn_UnscheduledRequirementsViewId = null;
		
		public readonly bool? msdyn_SAAvailableIconDefault = null;
		
		public readonly string msdyn_SchedulerCoreSlotTextTemplate = null;
		
		public readonly string msdyn_OrganizationalUnitTooltipsViewId = null;
		
		public readonly string msdyn_UnscheduledViewId = null;
		
		public readonly string msdyn_SchedulerCoreDetailsView = null;
		
		public readonly string msdyn_SchedulerResourceDetailsView = null;
		
		public readonly bool? msdyn_SAUnavailableIconDefault = null;
		
		public readonly string msdyn_OverbookedColor = null;
		
		public readonly int? msdyn_OrderNumber = null;
		
		public readonly string msdyn_SAPartiallyAvailableColor = null;
		
		public readonly string msdyn_FilterValues = null;
		
		public readonly bool? msdyn_IsSynchronizeResources = null;
		
		public readonly string msdyn_SchedulerFieldServiceDetailsView = null;
		
		public readonly string msdyn_SchedulerAlertsView = null;
		
		public readonly string msdyn_SchedulerFieldServiceSlotTextTemplate = null;
		
		public readonly string msdyn_NotBookedColor = null;
		
		public readonly string msdyn_CustomTabName = null;
		
		public readonly string msdyn_OrganizationalUnitViewId = null;
		
		public readonly string msdyn_SAUnavailableColor = null;
		
		public readonly string msdyn_UnscheduledWOTooltipsViewId = null;
		
		public readonly string msdyn_PartiallyBookedColor = null;
		
		public readonly EntityReference msdyn_FilterLayout = null;
		
		public readonly int? msdyn_UnscheduledWOPageRecCount = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_TabName = null;
		
		public readonly bool? msdyn_HideCancelled = null;
		
		public readonly string msdyn_SchedulerCoreTooltipView = null;
		
		public readonly bool? msdyn_MapViewTabPlacement = null;
		
		public readonly Guid? msdyn_scheduleboardsettingId = null;
		
		public readonly string msdyn_SchedulerResourceTooltipView = null;
		
		public readonly string msdyn_Settings = null;
		
		public readonly string msdyn_SAAvailableColor = null;
		
		public readonly string msdyn_WorkingHoursColor = null;
		
		public readonly bool? msdyn_SAPartiallyAvailableIconDefault = null;
		
		public readonly string msdyn_FullyBookedColor = null;
		
		public readonly string msdyn_SchedulerBusinessUnitDetailsView = null;
		
		public readonly string msdyn_SchedulerBusinessUnitTooltipView = null;
		
		public readonly bool? msdyn_BookBasedOn = null;
		
		public readonly string msdyn_SchedulerFieldServiceTooltipView = null;
		
		public readonly string msdyn_SAAvailableIcon = null;
		
		public readonly EntityReference msdyn_RetrieveResourcesQuery = null;
		
		public readonly bool? msdyn_IsPublic = null;
		
		public readonly string msdyn_CustomTabWebResource = null;
		
		public readonly EntityReference msdyn_ResourceCellTemplate = null;

        public new static class Options
        {
            public enum msdyn_ShareType
            {
                Everyone = 192350000,
                JustMe = 192350001,
                SpecificPeople = 192350002,
                System = 192350003
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalentitymap")]
	public class PrincipalEntityMap : Entity
    {
        public const string EntityLogicalName = "principalentitymap";
        public PrincipalEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalentitymapid"] = value;
            }
        }
		
		public readonly Guid? PrincipalEntityMapId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("uom")]
	public class UoM : Entity
    {
        public const string EntityLogicalName = "uom";
        public UoM() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("uomid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["uomid"] = value;
            }
        }
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference BaseUoM = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly bool? IsScheduleBaseUoM = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? UoMId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("opportunityproduct")]
	public class OpportunityProduct : Entity
    {
        public const string EntityLogicalName = "opportunityproduct";
        public OpportunityProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunityproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunityproductid"] = value;
            }
        }
		
		public readonly EntityReference ParentBundleIdRef = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly string ProductName = null;
		
		public readonly string ProductDescription = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? msdyn_startdate = null;
		
		public readonly Money msdyn_costpriceperunit_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference msdyn_serviceaccount = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly Money msdyn_BudgetAmount = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly DateTime? msdyn_enddate = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Money msdyn_costamount_Base = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly Money msdyn_CostPricePerUnit = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Money msdyn_budgetamount_Base = null;
		
		public readonly Money Tax = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly byte[] EntityImage = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string OpportunityProductName = null;
		
		public readonly EntityReference msdyn_pricelist = null;
		
		public readonly Guid? OpportunityProductId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue msdyn_BillingMethod = null;
		
		public readonly OptionSetValue msdyn_LineType = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly OptionSetValue OpportunityStateCode = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly Money msdyn_CostAmount = null;
		
		public readonly Guid? ProductAssociationId = null;

        public new static class Options
        {
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnCreate = 1,
                SkipPriceCalcOnUpdate = 2
            }
            public enum msdyn_BillingMethod
            {
                TimeAndMaterial = 192350000,
                FixedPrice = 192350001
            }
            public enum msdyn_LineType
            {
                ProjectServiceLine = 690970000,
                FieldServiceLine = 690970001
            }
            public enum OpportunityStateCode
            {

            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_actioncardregarding")]
	public class msdyn_actioncardregarding : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_actioncardregarding";
        public msdyn_actioncardregarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_actioncardregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_actioncardregardingid"] = value;
            }
        }
		
		public readonly string msdyn_actioncardid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_actioncardregardingId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fieldserviceslaconfiguration")]
	public class msdyn_fieldserviceslaconfiguration : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_fieldserviceslaconfiguration";
        public msdyn_fieldserviceslaconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_fieldserviceslaconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_fieldserviceslaconfigurationid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_SlaKpiName = null;
		
		public readonly Guid? msdyn_fieldserviceslaconfigurationId = null;
		
		public readonly OptionSetValue msdyn_SLAType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_SLAType
            {
                ArrivalTime = 690970000
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_geofence")]
	public class msdyn_geofence : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_geofence";
        public msdyn_geofence() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_geofenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_geofenceid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_account = null;
		
		public readonly OptionSetValue msdyn_GeotrackedRecordStatus = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_bookableresourcebookingid = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly Guid? msdyn_geofenceId = null;
		
		public readonly double? msdyn_Radius = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_GeotrackedRecordStatus
            {
                Outside = 192350000,
                Inside = 192350001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("account")]
	public class Account : Entity
    {
        public const string EntityLogicalName = "account";
        public Account() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("accountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["accountid"] = value;
            }
        }
		
		public readonly string EMailAddress3 = null;
		
		public readonly string EMailAddress2 = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string WebSiteURL = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly OptionSetValue msdyn_TravelChargeType = null;
		
		public readonly int? SharesOutstanding = null;
		
		public readonly bool? CreditOnHold = null;
		
		public readonly string Address2_City = null;
		
		public readonly Money Aging30 = null;
		
		public readonly bool? DoNotBulkPostalMail = null;
		
		public readonly Money Aging60_Base = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly Money MarketCap = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly DateTime? OpenDeals_Date = null;
		
		public readonly Money msdyn_travelcharge_Base = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly EntityReference TerritoryId = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly Guid? AccountId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue Address1_FreightTermsCode = null;
		
		public readonly Money CreditLimit = null;
		
		public readonly OptionSetValue AccountRatingCode = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly OptionSetValue PreferredAppointmentTimeCode = null;
		
		public readonly int? NumberOfEmployees = null;
		
		public readonly OptionSetValue AccountClassificationCode = null;
		
		public readonly OptionSetValue CustomerTypeCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly EntityReference PrimaryContactId = null;
		
		public readonly string Telephone3 = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly string msdyn_TaxExemptNumber = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly string msdyn_externalaccountid = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly OptionSetValue OwnershipCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OpenDeals_State = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference msdyn_PreferredResource = null;
		
		public readonly int? TeamsFollowed = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address1_County = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? DoNotEMail = null;
		
		public readonly EntityReference msdyn_workhourtemplate = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Money CreditLimit_Base = null;
		
		public readonly string YomiName = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address2_Name = null;
		
		public readonly int? OpenRevenue_State = null;
		
		public readonly string PrimarySatoriId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Money Aging90_Base = null;
		
		public readonly Money Aging60 = null;
		
		public readonly OptionSetValue BusinessTypeCode = null;
		
		public readonly string PrimaryTwitterId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money Aging30_Base = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string Address1_Country = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly bool? MarketingOnly = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Money Revenue = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Fax = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly Money msdyn_TravelCharge = null;
		
		public readonly string SIC = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string AccountNumber = null;
		
		public readonly Money OpenRevenue = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly Money Revenue_Base = null;
		
		public readonly bool? Merged = null;
		
		public readonly Money OpenRevenue_Base = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference DefaultPriceLevelId = null;
		
		public readonly string FtpSiteURL = null;
		
		public readonly EntityReference PreferredEquipmentId = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly string Address1_PrimaryContactName = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OpenRevenue_Date = null;
		
		public readonly EntityReference msdyn_BillingAccount = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly Money MarketCap_Base = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly OptionSetValue CustomerSizeCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly string StockExchange = null;
		
		public readonly EntityReference PreferredServiceId = null;
		
		public readonly OptionSetValue AccountCategoryCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string msdyn_WorkOrderInstructions = null;
		
		public readonly string Telephone2 = null;
		
		public readonly Money Aging90 = null;
		
		public readonly EntityReference msdyn_SalesTaxCode = null;
		
		public readonly OptionSetValue IndustryCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference PreferredSystemUserId = null;
		
		public readonly string Telephone1 = null;
		
		public readonly OptionSetValue PreferredAppointmentDayCode = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly OptionSetValue Address2_FreightTermsCode = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly OptionSetValue TerritoryCode = null;
		
		public readonly bool? msdyn_TaxExempt = null;
		
		public readonly string Address2_PrimaryContactName = null;
		
		public readonly int? OpenDeals = null;

        public new static class Options
        {
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum msdyn_TravelChargeType
            {
                Hourly = 690970000,
                Mileage = 690970001,
                Fixed = 690970002,
                None = 690970003
            }
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum AccountRatingCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum AccountClassificationCode
            {
                DefaultValue = 1
            }
            public enum CustomerTypeCode
            {
                Competitor = 1,
                Consultant = 2,
                Customer = 3,
                Investor = 4,
                Partner = 5,
                Influencer = 6,
                Press = 7,
                Prospect = 8,
                Reseller = 9,
                Supplier = 10,
                Vendor = 11,
                Other = 12
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum OwnershipCode
            {
                Public = 1,
                Private = 2,
                Subsidiary = 3,
                Other = 4
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum BusinessTypeCode
            {
                DefaultValue = 1
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum AccountCategoryCode
            {
                PreferredCustomer = 1,
                Standard = 2
            }
            public enum IndustryCode
            {
                Accounting = 1,
                AgricultureAndNonPetrolNaturalResourceExtraction = 2,
                BroadcastingPrintingAndPublishing = 3,
                Brokers = 4,
                BuildingSupplyRetail = 5,
                BusinessServices = 6,
                Consulting = 7,
                ConsumerServices = 8,
                DesignDirectionAndCreativeManagement = 9,
                DistributorsDispatchersAndProcessors = 10,
                DoctorSOfficesAndClinics = 11,
                DurableManufacturing = 12,
                EatingAndDrinkingPlaces = 13,
                EntertainmentRetail = 14,
                EquipmentRentalAndLeasing = 15,
                Financial = 16,
                FoodAndTobaccoProcessing = 17,
                InboundCapitalIntensiveProcessing = 18,
                InboundRepairAndServices = 19,
                Insurance = 20,
                LegalServices = 21,
                NonDurableMerchandiseRetail = 22,
                OutboundConsumerService = 23,
                PetrochemicalExtractionAndDistribution = 24,
                ServiceRetail = 25,
                SIGAffiliations = 26,
                SocialServices = 27,
                SpecialOutboundTradeContractors = 28,
                SpecialtyRealty = 29,
                Transportation = 30,
                UtilityCreationAndDistribution = 31,
                VehicleRetail = 32,
                Wholesale = 33
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("queueitemcount")]
	public class QueueItemCount : Entity
    {
        public const string EntityLogicalName = "queueitemcount";
        public QueueItemCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemcountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemcountid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("queueitemcount")]
		public readonly string QueueItemCount1 = null;
		
		public readonly Guid? QueueId = null;
		
		public readonly Guid? QueueItemCountId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mailbox")]
	public class Mailbox : Entity
    {
        public const string EntityLogicalName = "mailbox";
        public Mailbox() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxid"] = value;
            }
        }
		
		public readonly OptionSetValue IncomingEmailStatus = null;
		
		public readonly string Username = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ProcessedTimes = null;
		
		public readonly OptionSetValue OfficeAppsDeploymentStatus = null;
		
		public readonly string HostId = null;
		
		public readonly bool? TestEmailConfigurationScheduled = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? LastMailboxForcedUnlockOccurredOn = null;
		
		public readonly DateTime? PostponeSendingUntil = null;
		
		public readonly bool? EnabledForIncomingEmail = null;
		
		public readonly DateTime? LastSuccessfulSyncCompletedOn = null;
		
		public readonly DateTime? ProcessEmailReceivedAfter = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue OutgoingEmailStatus = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly string EWSURL = null;
		
		public readonly string OfficeAppsDeploymentError = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? LastActiveOn = null;
		
		public readonly string LastMessageId = null;
		
		public readonly DateTime? ProcessingLastAttemptedOn = null;
		
		public readonly bool? EnabledForACT = null;
		
		public readonly DateTime? OfficeAppsDeploymentCompleteOn = null;
		
		public readonly OptionSetValue ACTStatus = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ReceivingPostponedUntil = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? IsForwardMailbox = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? OfficeAppsDeploymentScheduled = null;
		
		public readonly OptionSetValue ExchangeContactsImportStatus = null;
		
		public readonly OptionSetValue MailboxStatus = null;
		
		public readonly bool? OrgMarkedAsPrimaryForExchangeSync = null;
		
		public readonly int? NoACTCount = null;
		
		public readonly int? NoEmailCount = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly string EmailAddress = null;
		
		public readonly int? LastSyncErrorCount = null;
		
		public readonly OptionSetValue ACTDeliveryMethod = null;
		
		public readonly DateTime? PostponeMailboxProcessingUntil = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string LastSyncError = null;
		
		public readonly string UndeliverableFolder = null;
		
		public readonly bool? IsPasswordSet = null;
		
		public readonly int? LastDuration = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeOfficeAppsDeploymentUntil = null;
		
		public readonly int? TransientFailureCount = null;
		
		public readonly DateTime? TestMailboxAccessCompletedOn = null;
		
		public readonly DateTime? PostponeTestEmailConfigurationUntil = null;
		
		public readonly DateTime? ExchangeContactsImportCompletedOn = null;
		
		public readonly int? ItemsProcessedForLastSync = null;
		
		public readonly int? MailboxProcessingContext = null;
		
		public readonly DateTime? ReceivingPostponedUntilForACT = null;
		
		public readonly string Password = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string ExchangeSyncStateXml = null;
		
		public readonly int? TestEmailConfigurationRetryCount = null;
		
		public readonly bool? EnabledForOutgoingEmail = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly int? ForcedUnlockCount = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ProcessingStateCode = null;
		
		public readonly int? AverageTotalDuration = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsACTSyncOrgFlagSet = null;
		
		public readonly int? ItemsFailedForLastSync = null;
		
		public readonly string LastSyncErrorMachineName = null;
		
		public readonly bool? IsServiceAccount = null;
		
		public readonly string FolderHierarchy = null;
		
		public readonly DateTime? LastAutoDiscoveredOn = null;
		
		public readonly bool? ProcessAndDeleteEmails = null;
		
		public readonly EntityReference EmailServerProfile = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? IsExchangeContactsImportScheduled = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? VerboseLoggingEnabled = null;
		
		public readonly DateTime? LastSyncStartedOn = null;
		
		public readonly Guid? MailboxId = null;
		
		public readonly bool? AllowEmailConnectorToUseCredentials = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;

        public new static class Options
        {
            public enum IncomingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum OfficeAppsDeploymentStatus
            {
                NotInstalled = 0,
                Installed = 1,
                InstallFailed = 2,
                UninstallFailed = 3,
                UpgradeRequired = 4
            }
            public enum OutgoingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum ACTStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ExchangeContactsImportStatus
            {
                NotImported = 0,
                Imported = 1,
                ImportFailed = 2
            }
            public enum MailboxStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum ACTDeliveryMethod
            {
                MicrosoftDynamics365ForOutlook = 0,
                ServerSideSynchronization = 1,
                None = 2
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("recurringappointmentmaster")]
	public class RecurringAppointmentMaster : Entity
    {
        public const string EntityLogicalName = "recurringappointmentmaster";
        public RecurringAppointmentMaster() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? PatternStartDate = null;
		
		public readonly DateTime? LastExpandedInstanceDate = null;
		
		public readonly int? Interval = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ExpansionStateCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference GroupId = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly string DeletedExceptionsList = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? DayOfMonth = null;
		
		public readonly DateTime? EffectiveEndDate = null;
		
		public readonly bool? IsRegenerate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference RuleId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? EffectiveStartDate = null;
		
		public readonly bool? IsNthYearly = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue PatternEndType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? NextExpansionInstanceDate = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsNthMonthly = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly OptionSetValue Instance = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly OptionSetValue MonthOfYear = null;
		
		public readonly int? IsUnsafe = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly string Description = null;
		
		public readonly string Location = null;
		
		public readonly string GlobalObjectId = null;
		
		public readonly DateTime? PatternEndDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly int? FirstDayOfWeek = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsAllDayEvent = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? SeriesStatus = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly OptionSetValue RecurrencePatternType = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly int? DaysOfWeekMask = null;
		
		public readonly bool? IsWeekDayPattern = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? OutlookOwnerApptId = null;
		
		public readonly string Category = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly int? Occurrences = null;
		
		public readonly EntityReference ServiceId = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum ExpansionStateCode
            {
                Unexpanded = 0,
                Partial = 1,
                Full = 2
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("feedback")]
	public class Feedback : Entity
    {
        public const string EntityLogicalName = "feedback";
        public Feedback() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("feedbackid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["feedbackid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly decimal? NormalizedRating = null;
		
		public readonly EntityReference ClosedBy = null;
		
		public readonly string Comments = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedByContact = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfByContact = null;
		
		public readonly DateTime? ClosedOn = null;
		
		public readonly int? MaxRating = null;
		
		public readonly int? Rating = null;
		
		public readonly int? MinRating = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? FeedbackId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly OptionSetValue Source = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Closed = 1
            }
            public enum StatusCode
            {
                Proposed = 1,
                Accepted = 2,
                Closed = 3,
                Rejected = 4
            }
            public enum Source
            {
                Internal = 0,
                Portal = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("reportcategory")]
	public class ReportCategory : Entity
    {
        public const string EntityLogicalName = "reportcategory";
        public ReportCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportcategoryid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ReportCategoryIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ReportCategoryId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue CategoryCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum CategoryCode
            {
                SalesReports = 1,
                ServiceReports = 2,
                MarketingReports = 3,
                AdministrativeReports = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelinescheduleofvalue")]
	public class msdyn_quotelinescheduleofvalue : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelinescheduleofvalue";
        public msdyn_quotelinescheduleofvalue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelinescheduleofvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelinescheduleofvalueid"] = value;
            }
        }
		
		public readonly Guid? msdyn_quotelinescheduleofvalueId = null;
		
		public readonly EntityReference msdyn_projecttask = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? msdyn_invoicedate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_isdataimport = null;
		
		public readonly Money msdyn_amount = null;
		
		public readonly Money msdyn_tax = null;
		
		public readonly Money msdyn_tax_Base = null;
		
		public readonly Money msdyn_amount_after_tax_Base = null;
		
		public readonly EntityReference msdyn_quotelineid = null;
		
		public readonly string msdyn_quoteline = null;
		
		public readonly Money msdyn_amount_after_tax = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_invoicestatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_invoicestatus
            {
                NotReadyForInvoicing = 192350000,
                ReadyForInvoicing = 192350001,
                CustomerInvoiceCreated = 192350002,
                CustomerInvoicePosted = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("personaldocumenttemplate")]
	public class PersonalDocumentTemplate : Entity
    {
        public const string EntityLogicalName = "personaldocumenttemplate";
        public PersonalDocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("personaldocumenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["personaldocumenttemplateid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string AssociatedEntityTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? PersonalDocumentTemplateId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ClientData = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? Status = null;
		
		public readonly string Content = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum AssociatedEntityTypeCode
            {

            }
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("officegraphdocument")]
	public class OfficeGraphDocument : Entity
    {
        public const string EntityLogicalName = "officegraphdocument";
        public OfficeGraphDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officegraphdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officegraphdocumentid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SiteUrl = null;
		
		public readonly string WebLocationUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string SecondaryFileExtension = null;
		
		public readonly int? QueryType = null;
		
		public readonly string PreviewImageUrl = null;
		
		public readonly string AuthorNames = null;
		
		public readonly string DocumentLastModifiedBy = null;
		
		public readonly string FileType = null;
		
		public readonly int? ViewCount = null;
		
		public readonly int? Rank = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ModifiedBy = null;
		
		public readonly string CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? DocumentLastModifiedOn = null;
		
		public readonly string DocumentId = null;
		
		public readonly string DocumentPreviewMetadata = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string SiteTitle = null;
		
		public readonly string FileExtension = null;
		
		public readonly DateTime? ModifiedTime = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ReadUrl = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly Guid? OfficeGraphDocumentId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("position")]
	public class Position : Entity
    {
        public const string EntityLogicalName = "position";
        public Position() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("positionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["positionid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference ParentPositionId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? PositionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("relationshiprolemap")]
	public class RelationshipRoleMap : Entity
    {
        public const string EntityLogicalName = "relationshiprolemap";
        public RelationshipRoleMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiprolemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiprolemapid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? RelationshipRoleMapId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RelationshipRoleId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string AssociateObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum AssociateObjectTypeCode
            {

            }
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("delveactionhub")]
	public class DelveActionHub : Entity
    {
        public const string EntityLogicalName = "delveactionhub";
        public DelveActionHub() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("delveactionhubid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["delveactionhubid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Sender = null;
		
		public readonly OptionSetValue CardType = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string IconClassName = null;
		
		public readonly Guid? SenderEntityId = null;
		
		public readonly string MessageId = null;
		
		public readonly string RelatedMailIds = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly string SenderImageUrl = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference RecordId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? SenderEntityObjectTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ModifiedTime = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? MessageTime = null;
		
		public readonly Guid? DelveActionHubId = null;
		
		public readonly string MailWebLink = null;

        public new static class Options
        {
            public enum CardType
            {
                Default = 0,
                SendContentRequest = 1,
                YesNo = 2,
                MeetingRequest = 3
            }
            public enum StateCode
            {
                Pending = 0,
                Completed = 1,
                Dismiss = 2
            }
            public enum StatusCode
            {
                Pending = 1,
                Completed = 2,
                Dismiss = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("invoice")]
	public class Invoice : Entity
    {
        public const string EntityLogicalName = "invoice";
        public Invoice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invoiceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invoiceid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly Guid? InvoiceId = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly string BillTo_Telephone = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly bool? WillCall = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly bool? msdyn_HasCorrections = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly bool? IsPriceLocked = null;
		
		public readonly string BillTo_Composite = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly OptionSetValue msdyn_projectinvoicestatus = null;
		
		public readonly DateTime? msdyn_InvoiceDate = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Money msdyn_AmountDue = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string BillTo_City = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? DueDate = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly DateTime? DateDelivered = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string ShipTo_City = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly string InvoiceNumber = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly Money msdyn_amountdue_Base = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly string EmailAddress = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string msdyn_billtocontactname = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly DateTime? LastBackofficeSubmit = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ShipTo_Composite = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly OptionSetValue msdyn_OrderType = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Money TotalTax = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference AccountId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly string BillTo_Line1 = null;

        public new static class Options
        {
            public enum msdyn_projectinvoicestatus
            {
                Draft = 192350000,
                InReview = 192350001,
                Confirmed = 192350002,
                InvoicePaid = 192350003
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum StateCode
            {
                Active = 0,
                ClosedDeprecated = 1,
                Paid = 2,
                Canceled = 3
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnRetrieve = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum msdyn_OrderType
            {
                WorkBased = 192350001,
                ItemBased = 192350000,
                ServiceMaintenanceBased = 690970002
            }
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum StatusCode
            {
                New = 1,
                PartiallyShipped = 2,
                Billed = 4,
                BookedAppliesToServices = 5,
                InstalledAppliesToServices = 6,
                CanceledDeprecated = 3,
                PaidInFullDeprecated = 7,
                Complete = 100001,
                Partial = 100002,
                Canceled = 100003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgesearchmodel")]
	public class KnowledgeSearchModel : Entity
    {
        public const string EntityLogicalName = "knowledgesearchmodel";
        public KnowledgeSearchModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgesearchmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgesearchmodelid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? NgramSize = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Entity = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? KnowledgeSearchModelIdUnique = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string SourceEntity = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly Guid? KnowledgeSearchModelId = null;
		
		public readonly int? MaxKeyWords = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SourceEntity
            {
                Case = 112
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("site")]
	public class Site : Entity
    {
        public const string EntityLogicalName = "site";
        public Site() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("siteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["siteid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string Address1_County = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SiteId = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string EMailAddress = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_City = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Name = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string Address2_City = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string Address1_PostOfficeBox = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contracttemplate")]
	public class ContractTemplate : Entity
    {
        public const string EntityLogicalName = "contracttemplate";
        public ContractTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contracttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contracttemplateid"] = value;
            }
        }
		
		public readonly Guid? ContractTemplateId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue BillingFrequencyCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly bool? UseDiscountAsPercentage = null;
		
		public readonly Guid? ContractTemplateIdUnique = null;
		
		public readonly OptionSetValue AllotmentTypeCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Abbreviation = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum BillingFrequencyCode
            {
                Monthly = 1,
                Bimonthly = 2,
                Quarterly = 3,
                Semiannually = 4,
                Annually = 5
            }
            public enum AllotmentTypeCode
            {
                NumberOfCases = 1,
                Time = 2,
                CoverageDates = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_siconfig")]
	public class msdyn_siconfig : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_siconfig";
        public msdyn_siconfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_siconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_siconfigid"] = value;
            }
        }
		
		public readonly Guid? msdyn_siconfigId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_version = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectteammembersignup")]
	public class msdyn_projectteammembersignup : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_projectteammembersignup";
        public msdyn_projectteammembersignup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectteammembersignupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectteammembersignupid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_projectteammembersignupId = null;
		
		public readonly EntityReference msdyn_TeamMembership = null;
		
		public readonly OptionSetValue msdyn_MembershipStatus = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_BookableResource = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_MembershipStatus
            {
                Requested = 1,
                Assigned = 2,
                Declined = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("recordcountsnapshot")]
	public class RecordCountSnapshot : Entity
    {
        public const string EntityLogicalName = "recordcountsnapshot";
        public RecordCountSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recordcountsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recordcountsnapshotid"] = value;
            }
        }
		
		public readonly DateTime? LastUpdated = null;
		
		public readonly int? Count = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? VersionNumberConverted = null;
		
		public readonly Guid? RecordCountSnapshotId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("duplicaterule")]
	public class DuplicateRule : Entity
    {
        public const string EntityLogicalName = "duplicaterule";
        public DuplicateRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string MatchingEntityMatchCodeTable = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string BaseEntityName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string MatchingEntityName = null;
		
		public readonly Guid? DuplicateRuleId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string BaseEntityMatchCodeTable = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue BaseEntityTypeCode = null;
		
		public readonly bool? IsCaseSensitive = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? ExcludeInactiveRecords = null;
		
		public readonly OptionSetValue MatchingEntityTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Inactive = 0,
                Active = 1
            }
            public enum StatusCode
            {
                Unpublished = 0,
                Publishing = 1,
                Published = 2
            }
            public enum BaseEntityTypeCode
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum MatchingEntityTypeCode
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ratingmodel")]
	public class RatingModel : Entity
    {
        public const string EntityLogicalName = "ratingmodel";
        public RatingModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ratingmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ratingmodelid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? MaxRatingValue = null;
		
		public readonly Guid? RatingModelId = null;
		
		public readonly OptionSetValue msdyn_RatableEntity = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? MinRatingValue = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_RatableEntity
            {
                None = 192350000,
                Skill = 192350001
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("socialprofile")]
	public class SocialProfile : Entity
    {
        public const string EntityLogicalName = "socialprofile";
        public SocialProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialprofileid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string ProfileName = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly double? InfluenceScore = null;
		
		public readonly string ProfileFullName = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string ProfileLink = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? Blocked = null;
		
		public readonly string UniqueProfileID = null;
		
		public readonly Guid? SocialProfileId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("duplicaterulecondition")]
	public class DuplicateRuleCondition : Entity
    {
        public const string EntityLogicalName = "duplicaterulecondition";
        public DuplicateRuleCondition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleconditionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleconditionid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? IgnoreBlankValues = null;
		
		public readonly string MatchingAttributeName = null;
		
		public readonly int? OperatorParam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? DuplicateRuleConditionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue OperatorCode = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly string BaseAttributeName = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum OperatorCode
            {
                ExactMatch = 0,
                SameFirstCharacters = 1,
                SameLastCharacters = 2,
                SameDate = 3,
                SameDateAndTime = 4,
                ExactMatchPickListLabel = 5,
                ExactMatchPickListValue = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("queueitem")]
	public class QueueItem : Entity
    {
        public const string EntityLogicalName = "queueitem";
        public QueueItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemid"] = value;
            }
        }
		
		public readonly int? Status = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Sender = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? QueueItemId = null;
		
		public readonly DateTime? WorkerIdModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference WorkerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? EnteredOn = null;
		
		public readonly string ToRecipients = null;
		
		public readonly int? Priority = null;
		
		public readonly int? State = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ObjectTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }
            public enum ObjectTypeCode
            {
                WorkOrderIncident = 10240,
                BookingAlert = 10047,
                ServiceActivity = 4214,
                PhoneCall = 4210,
                CampaignResponse = 4401,
                RecurringAppointment = 4251,
                CampaignActivity = 4402,
                InventoryTransfer = 10197,
                Task = 4212,
                AgreementInvoiceSetup = 10172,
                ResourceRequest = 10137,
                QuickCampaign = 4406,
                Case = 112,
                SurveyResponse = 10042,
                ProjectServiceApproval = 10075,
                AgreementBookingSetup = 10169,
                Email = 4202,
                Activity = 4200,
                SurveyInvite = 10041,
                WorkOrderService = 10243,
                Appointment = 4201,
                Fax = 4204,
                AgreementBookingDate = 10164,
                InventoryAdjustment = 10194,
                WorkOrder = 10237,
                ProjectTask = 10119,
                FulfillmentPreference = 10070,
                IoTAlert = 10248,
                KnowledgeArticle = 9953,
                AgreementInvoiceDate = 10170,
                Letter = 4207,
                TimeGroupDetail = 10071,
                Project = 10114,
                WorkOrderServiceTask = 10244,
                SocialActivity = 4216
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingsetup")]
	public class msdyn_agreementbookingsetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingsetup";
        public msdyn_agreementbookingsetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingsetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingsetupid"] = value;
            }
        }
		
		public readonly int? msdyn_GenerateWODaysInAdvance = null;
		
		public readonly int? msdyn_PreBookingFlexibility = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		
		public readonly DateTime? msdyn_PreferredStartTime = null;
		
		public readonly DateTime? msdyn_TimeWindowEnd = null;
		
		public readonly EntityReference msdyn_PreferredResource = null;
		
		public readonly string msdyn_RecurrenceSettings = null;
		
		public readonly string traversedpath = null;
		
		public readonly DateTime? msdyn_TimeWindowStart = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly EntityReference msdyn_WorkOrderType = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_Priority = null;
		
		public readonly Guid? stageid = null;
		
		public readonly int? msdyn_PostBookingFlexibility = null;
		
		public readonly string msdyn_WorkOrderSummary = null;
		
		public readonly bool? msdyn_AutoGenerateBooking = null;
		
		public readonly bool? msdyn_AutoGenerateWO = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly Guid? msdyn_agreementbookingsetupId = null;
		
		public readonly int? msdyn_Revision = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourceassignmentdetail")]
	public class msdyn_resourceassignmentdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourceassignmentdetail";
        public msdyn_resourceassignmentdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourceassignmentdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourceassignmentdetailid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_resourceassignmentid = null;
		
		public readonly Guid? msdyn_resourceassignmentdetailId = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly DateTime? msdyn_from = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("teamtemplate")]
	public class TeamTemplate : Entity
    {
        public const string EntityLogicalName = "teamtemplate";
        public TeamTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamtemplateid"] = value;
            }
        }
		
		public readonly int? DefaultAccessRightsMask = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? TeamTemplateId = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string TeamTemplateName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsSystem = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribboncommand")]
	public class RibbonCommand : Entity
    {
        public const string EntityLogicalName = "ribboncommand";
        public RibbonCommand() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncommandid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncommandid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string CommandDefinition = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? RibbonCommandUniqueId = null;
		
		public readonly string Command = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? RibbonCommandId = null;
		
		public readonly string Entity = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("orginsightsnotification")]
	public class OrgInsightsNotification : Entity
    {
        public const string EntityLogicalName = "orginsightsnotification";
        public OrgInsightsNotification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("orginsightsnotificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["orginsightsnotificationid"] = value;
            }
        }
		
		public readonly string InternalName = null;
		
		public readonly Guid? OrgInsightsNotificationId = null;
		
		public readonly string Name = null;
		
		public readonly string JsonData = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribbonclientmetadata")]
	public class RibbonClientMetadata : Entity
    {
        public const string EntityLogicalName = "ribbonclientmetadata";
        public RibbonClientMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbonid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbonid"] = value;
            }
        }
		
		public readonly string RibbonJson = null;
		
		public readonly int? ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string RibbonContext = null;
		
		public readonly Guid? RibbonIdUnique = null;
		
		public readonly Guid? RibbonId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("convertrule")]
	public class ConvertRule : Entity
    {
        public const string EntityLogicalName = "convertrule";
        public ConvertRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? CheckIfResolved = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? CheckBlockedSocialProfile = null;
		
		public readonly string SourceChannelTypeCode = null;
		
		public readonly bool? CheckActiveEntitlement = null;
		
		public readonly bool? CheckDirectMessages = null;
		
		public readonly bool? SendAutomaticResponse = null;
		
		public readonly EntityReference ChannelPropertyGroupId = null;
		
		public readonly OptionSetValue SourceTypeCode = null;
		
		public readonly bool? AllowUnknownSender = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ResolvedSince = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly string RecordVersion = null;
		
		public readonly EntityReference ResponseTemplateId = null;
		
		public readonly Guid? ConvertRuleIdUnique = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ConvertRuleId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum SourceChannelTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                Task = 4212,
                SocialActivity = 4216,
                ServiceActivity = 4214,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum SourceTypeCode
            {
                SocialMonitoring = 1,
                Email = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementtemplateproducts")]
	public class EntitlementTemplateProducts : Entity
    {
        public const string EntityLogicalName = "entitlementtemplateproducts";
        public EntitlementTemplateProducts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplateproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplateproductid"] = value;
            }
        }
		
		public readonly Guid? EntitlementTemplateId = null;
		
		public readonly Guid? EntitlementTemplateProductId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("incidentresolution")]
	public class IncidentResolution : Entity
    {
        public const string EntityLogicalName = "incidentresolution";
        public IncidentResolution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? TimeSpent = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Category = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Closed = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttypeservice")]
	public class msdyn_incidenttypeservice : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttypeservice";
        public msdyn_incidenttypeservice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypeserviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypeserviceid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly Guid? msdyn_incidenttypeserviceId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Service = null;
		
		public readonly string msdyn_InternalDescription = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly int? msdyn_Duration = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("leadcompetitors")]
	public class LeadCompetitors : Entity
    {
        public const string EntityLogicalName = "leadcompetitors";
        public LeadCompetitors() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadcompetitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadcompetitorid"] = value;
            }
        }
		
		public readonly Guid? LeadId = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? LeadCompetitorId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("salesprocessinstance")]
	public class SalesProcessInstance : Entity
    {
        public const string EntityLogicalName = "salesprocessinstance";
        public SalesProcessInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesprocessinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesprocessinstanceid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string SalesProcessName = null;
		
		public readonly Guid? SalesProcessInstanceId = null;
		
		public readonly string SalesStageName = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgearticle")]
	public class KnowledgeArticle : Entity
    {
        public const string EntityLogicalName = "knowledgearticle";
        public KnowledgeArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Keywords = null;
		
		public readonly decimal? Rating_Sum = null;
		
		public readonly int? KnowledgeArticleViews = null;
		
		public readonly int? KnowledgeArticleViews_State = null;
		
		public readonly int? MajorVersionNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Rating_State = null;
		
		public readonly int? Rating_Count = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? PublishOn = null;
		
		public readonly bool? IsPrimary = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsRootArticle = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly decimal? Rating = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? PublishStatusId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ExpirationStateId = null;
		
		public readonly int? ExpirationStatusId = null;
		
		public readonly string traversedpath = null;
		
		public readonly bool? IsLatestVersion = null;
		
		public readonly Guid? knowledgearticleId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference LanguageLocaleId = null;
		
		public readonly OptionSetValue ExpiredReviewOptions = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? SetCategoryAssociations = null;
		
		public readonly EntityReference primaryauthorid = null;
		
		public readonly Guid? processid = null;
		
		public readonly string Description = null;
		
		public readonly bool? ReadyForReview = null;
		
		public readonly Guid? stageid = null;
		
		public readonly EntityReference PreviousArticleContentId = null;
		
		public readonly EntityReference RootArticleId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue Review = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ScheduledStatusId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? UpdateContent = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? Rating_Date = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ParentArticleContentId = null;
		
		public readonly string Content = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? SetProductAssociations = null;
		
		public readonly DateTime? KnowledgeArticleViews_Date = null;
		
		public readonly DateTime? ExpirationDate = null;
		
		public readonly string ArticlePublicNumber = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly bool? IsInternal = null;
		
		public readonly int? MinorVersionNumber = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Approved = 1,
                Scheduled = 2,
                Published = 3,
                Expired = 4,
                Archived = 5,
                Discarded = 6
            }
            public enum ExpiredReviewOptions
            {
                NeedsUpdating = 0,
                Republish = 1,
                Archive = 2
            }
            public enum Review
            {
                Approved = 0,
                Rejected = 1
            }
            public enum StatusCode
            {
                Proposed = 1,
                Draft = 2,
                NeedsReview = 3,
                InReview = 4,
                Approved = 5,
                Scheduled = 6,
                Published = 7,
                NeedsReview1 = 8,
                Updating = 9,
                Expired = 10,
                Rejected = 11,
                Archived = 12,
                Discarded = 13,
                Rejected1 = 14
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("productsalesliterature")]
	public class ProductSalesLiterature : Entity
    {
        public const string EntityLogicalName = "productsalesliterature";
        public ProductSalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productsalesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productsalesliteratureid"] = value;
            }
        }
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ProductSalesLiteratureId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutioncomponentsummary")]
	public class msdyn_solutioncomponentsummary : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutioncomponentsummary";
        public msdyn_solutioncomponentsummary() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutioncomponentsummaryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutioncomponentsummaryid"] = value;
            }
        }
		
		public readonly string msdyn_workflowcategory = null;
		
		public readonly string msdyn_relatedentity = null;
		
		public readonly decimal? msdyn_componenttype = null;
		
		public readonly string msdyn_owningbusinessunit = null;
		
		public readonly string msdyn_schemaname = null;
		
		public readonly string msdyn_relatedentityattribute = null;
		
		public readonly string msdyn_istableenabled = null;
		
		public readonly string msdyn_objecttypecode = null;
		
		public readonly string msdyn_deployment = null;
		
		public readonly string msdyn_subtype = null;
		
		public readonly string msdyn_typename = null;
		
		public readonly string msdyn_primaryentityname = null;
		
		public readonly string msdyn_version = null;
		
		public readonly string msdyn_fieldsecurity = null;
		
		public readonly string msdyn_executionstage = null;
		
		public readonly string msdyn_modifiedon = null;
		
		public readonly string msdyn_createdon = null;
		
		public readonly string msdyn_iscustomizable = null;
		
		public readonly string msdyn_ismanaged = null;
		
		public readonly string msdyn_isolationmode = null;
		
		public readonly string msdyn_owner = null;
		
		public readonly string msdyn_isdefault = null;
		
		public readonly string msdyn_solutionid = null;
		
		public readonly string msdyn_logicalcollectionname = null;
		
		public readonly string msdyn_iscustomizablename = null;
		
		public readonly string msdyn_status = null;
		
		public readonly string msdyn_iscustomname = null;
		
		public readonly string msdyn_displayname = null;
		
		public readonly string msdyn_executionorder = null;
		
		public readonly string msdyn_publickeytoken = null;
		
		public readonly Guid? msdyn_solutioncomponentsummaryId = null;
		
		public readonly string msdyn_isdefaultname = null;
		
		public readonly string msdyn_statusname = null;
		
		public readonly string msdyn_synctoexternalsearchindex = null;
		
		public readonly string msdyn_uniquename = null;
		
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_sdkmessagename = null;
		
		public readonly string msdyn_workflowcategoryname = null;
		
		public readonly string msdyn_componenttypename = null;
		
		public readonly string msdyn_isauditenabledname = null;
		
		public readonly string msdyn_isappawarename = null;
		
		public readonly string msdyn_culture = null;
		
		public readonly string msdyn_eventhandler = null;
		
		public readonly string msdyn_ismanagedname = null;
		
		public readonly decimal? msdyn_total = null;
		
		public readonly string msdyn_objectid = null;
		
		public readonly string msdyn_fieldtype = null;
		
		public readonly string msdyn_workflowidunique = null;
		
		public readonly string msdyn_iscustom = null;
		
		public readonly string msdyn_isappaware = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_isauditenabled = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuserlicenses")]
	public class SystemUserLicenses : Entity
    {
        public const string EntityLogicalName = "systemuserlicenses";
        public SystemUserLicenses() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserlicenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserlicenseid"] = value;
            }
        }
		
		public readonly Guid? LicenseId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserLicenseId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mobileofflineprofile")]
	public class MobileOfflineProfile : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofile";
        public MobileOfflineProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileid"] = value;
            }
        }
		
		public readonly bool? IsValidated = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? MobileOfflineProfileIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string SelectedEntityMetadata = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? MobileOfflineProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectteam")]
	public class msdyn_projectteam : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projectteam";
        public msdyn_projectteam() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectteamid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectteamid"] = value;
            }
        }
		
		public readonly decimal? msdyn_softbookedhours = null;
		
		public readonly string msdyn_RoleDescription = null;
		
		public readonly EntityReference msdyn_organizationalunit = null;
		
		public readonly double? msdyn_HoursRequested = null;
		
		public readonly string msdyn_calendarId = null;
		
		public readonly EntityReference msdyn_resourcecategory = null;
		
		public readonly decimal? msdyn_requiredhours = null;
		
		public readonly Guid? msdyn_projectteamId = null;
		
		public readonly int? msdyn_Number = null;
		
		public readonly OptionSetValue msdyn_MembershipStatus = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly EntityReference msdyn_resourcerequirementid = null;
		
		public readonly decimal? msdyn_hardbookedhours = null;
		
		public readonly DateTime? msdyn_From = null;
		
		public readonly decimal? msdyn_AssignedHours = null;
		
		public readonly int? msdyn_Applicantcount_State = null;
		
		public readonly DateTime? msdyn_To = null;
		
		public readonly decimal? msdyn_hours = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_allocationmethod = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly bool? msdyn_Applicantsavailable = null;
		
		public readonly bool? msdyn_ProjectApprover = null;
		
		public readonly DateTime? msdyn_Applicantcount_Date = null;
		
		public readonly EntityReference msdyn_project = null;
		
		public readonly EntityReference msdyn_bookableresourceid = null;
		
		public readonly decimal? msdyn_percentage = null;
		
		public readonly string msdyn_msprojectclientid = null;
		
		public readonly int? msdyn_Applicantcount = null;
		
		public readonly EntityReference msdyn_worktemplate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_MembershipStatus
            {
                Requested = 1,
                Assigned = 2,
                Declined = 3
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_allocationmethod
            {
                None = 192350000,
                FullCapacity = 192350001,
                PercentageCapacity = 192350004,
                ByHoursDistributeEvenly = 192350003,
                ByHoursFrontLoad = 192350005
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mailmergetemplate")]
	public class MailMergeTemplate : Entity
    {
        public const string EntityLogicalName = "mailmergetemplate";
        public MailMergeTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailmergetemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailmergetemplateid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? SupportingSolutionId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string FileName = null;
		
		public readonly int? FileSize = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue DocumentFormat = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly Guid? MailMergeTemplateIdUnique = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? MailMergeTemplateId = null;
		
		public readonly string DefaultFilter = null;
		
		public readonly string ParameterXml = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TemplateTypeCode = null;
		
		public readonly string Body = null;
		
		public readonly OptionSetValue MailMergeType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DocumentFormat
            {
                _2003 = 1,
                _2007 = 2
            }
            public enum TemplateTypeCode
            {
                Quote = 1084
            }
            public enum MailMergeType
            {
                Letter = 1,
                EmailMessage = 2,
                Envelope = 3,
                Labels = 4,
                Quotes = 5,
                Fax = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("quoteclose")]
	public class QuoteClose : Entity
    {
        public const string EntityLogicalName = "quoteclose";
        public QuoteClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly int? Revision = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string QuoteNumber = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Category = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference QuoteId = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_baa0a411a239410cb8bded8b5fdd88e3")]
	public class msdyn_bpf_baa0a411a239410cb8bded8b5fdd88e3 : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_baa0a411a239410cb8bded8b5fdd88e3";
        public msdyn_bpf_baa0a411a239410cb8bded8b5fdd88e3() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference bpf_msdyn_agreementinvoicesetupid = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference bpf_msdyn_agreementid = null;
		
		public readonly EntityReference bpf_msdyn_agreementbookingsetupid = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_organizationalunit_pricelevel")]
	public class msdyn_organizationalunit_pricelevel : Entity
    {
        public const string EntityLogicalName = "msdyn_organizationalunit_pricelevel";
        public msdyn_organizationalunit_pricelevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_organizationalunit_pricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_organizationalunit_pricelevelid"] = value;
            }
        }
		
		public readonly Guid? pricelevelid = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_organizationalunit_pricelevelId = null;
		
		public readonly Guid? msdyn_organizationalunitid = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_delegation")]
	public class msdyn_delegation : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_delegation";
        public msdyn_delegation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_delegationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_delegationid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_startdate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_type = null;
		
		public readonly EntityReference msdyn_delegationto = null;
		
		public readonly EntityReference msdyn_delegationfrom = null;
		
		public readonly Guid? msdyn_delegationId = null;
		
		public readonly DateTime? msdyn_enddate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_type
            {
                TimeEntry = 192350000,
                Expense = 192350001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingservice")]
	public class msdyn_agreementbookingservice : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingservice";
        public msdyn_agreementbookingservice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingserviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingserviceid"] = value;
            }
        }
		
		public readonly Guid? msdyn_agreementbookingserviceId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_currency_Base = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly EntityReference msdyn_Service = null;
		
		public readonly EntityReference msdyn_AgreementBookingSetup = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_AgreementBookingIncident = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly bool? msdyn_IsCopied = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_Currency = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly int? msdyn_DurationToBill = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_playbookactivity")]
	public class msdyn_playbookactivity : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_playbookactivity";
        public msdyn_playbookactivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_playbookactivityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_playbookactivityid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_activityLogicalName")]
		public readonly string msdyn_activityLogicalName = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_activityType")]
		public readonly OptionSetValue msdyn_activityType = null;
		
		public readonly string msdyn_playbookactivity_json = null;
		
		public readonly EntityReference msdyn_playbooktemplateid = null;
		
		public readonly Guid? msdyn_playbookactivityId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_subject = null;

        public new static class Options
        {
            public enum statecode
            {
                Draft = 0,
                Published = 1
            }
            public enum msdyn_activityType
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum statuscode
            {
                Draft = 1,
                Published = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcecategorymarkuppricelevel")]
	public class msdyn_resourcecategorymarkuppricelevel : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_resourcecategorymarkuppricelevel";
        public msdyn_resourcecategorymarkuppricelevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcecategorymarkuppricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcecategorymarkuppricelevelid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_organizationalunit = null;
		
		public readonly EntityReference msdyn_resourcecategory = null;
		
		public readonly EntityReference msdyn_transactioncategory = null;
		
		public readonly EntityReference msdyn_pricelist = null;
		
		public readonly Guid? msdyn_resourcecategorymarkuppricelevelId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly decimal? msdyn_percent = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly OptionSetValue msdyn_pricecalculation = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_pricecalculation
            {
                PricePerUnit = 192350000,
                AtCost = 192350001,
                MarkupPercentage = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("fixedmonthlyfiscalcalendar")]
	public class FixedMonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "fixedmonthlyfiscalcalendar";
        public FixedMonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money Period5_Base = null;
		
		public readonly Money Period4_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Period2_Base = null;
		
		public readonly Money Period13 = null;
		
		public readonly Money Period10 = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly Money Period11 = null;
		
		public readonly Money Period8_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money Period7 = null;
		
		public readonly Money Period6 = null;
		
		public readonly Money Period5 = null;
		
		public readonly Money Period4 = null;
		
		public readonly Money Period3 = null;
		
		public readonly Money Period2 = null;
		
		public readonly Money Period1 = null;
		
		public readonly Money Period12 = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly Money Period9 = null;
		
		public readonly Money Period8 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Period1_Base = null;
		
		public readonly Money Period10_Base = null;
		
		public readonly Money Period3_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly Money Period9_Base = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money Period6_Base = null;
		
		public readonly Money Period12_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money Period13_Base = null;
		
		public readonly Money Period11_Base = null;
		
		public readonly Money Period7_Base = null;
		
		public readonly EntityReference SalesPersonId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("solutioncomponent")]
	public class SolutionComponent : Entity
    {
        public const string EntityLogicalName = "solutioncomponent";
        public SolutionComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentid"] = value;
            }
        }
		
		public readonly Guid? SolutionComponentId = null;
		
		public readonly OptionSetValue RootComponentBehavior = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SolutionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? RootSolutionComponentId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly bool? IsMetadata = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourceassignment")]
	public class msdyn_resourceassignment : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourceassignment";
        public msdyn_resourceassignment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourceassignmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourceassignmentid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_projectteamid = null;
		
		public readonly EntityReference msdyn_taskid = null;
		
		public readonly DateTime? msdyn_fromdate = null;
		
		public readonly Money msdyn_plannedcost = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_plannedsalescontour = null;
		
		public readonly string msdyn_plannedwork = null;
		
		public readonly Money msdyn_plannedsales = null;
		
		public readonly Money msdyn_plannedcost_Base = null;
		
		public readonly EntityReference msdyn_bookingstatusid = null;
		
		public readonly DateTime? msdyn_todate = null;
		
		public readonly string msdyn_plannedcostcontour = null;
		
		public readonly EntityReference msdyn_userresourceid = null;
		
		public readonly string msdyn_msprojectclientid = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? msdyn_resourceassignmentId = null;
		
		public readonly OptionSetValue msdyn_CommitType = null;
		
		public readonly Money msdyn_plannedsales_Base = null;
		
		public readonly decimal? msdyn_hours = null;
		
		public readonly EntityReference msdyn_bookableresourceid = null;
		
		public readonly EntityReference msdyn_projectid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_CommitType
            {
                Canceled = 192350004,
                None = 192350000,
                HardBook = 192350001,
                SoftBook = 192350002,
                Proposed = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("organization")]
	public class Organization : Entity
    {
        public const string EntityLogicalName = "organization";
        public Organization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationid"] = value;
            }
        }
		
		public readonly bool? AllowAutoResponseCreation = null;
		
		public readonly string ACIWebEndpointUrl = null;
		
		public readonly int? MobileOfflineSyncInterval = null;
		
		public readonly bool? UseReadForm = null;
		
		public readonly bool? YammerOAuthAccessTokenExpired = null;
		
		public readonly int? MaxActionStepsInBPF = null;
		
		public readonly Guid? ReportingGroupId = null;
		
		public readonly bool? AllowWebExcelExport = null;
		
		public readonly bool? QuickFindRecordLimitEnabled = null;
		
		public readonly bool? SyncOptInSelection = null;
		
		public readonly int? SessionTimeoutInMins = null;
		
		public readonly int? ExpireSubscriptionsInDays = null;
		
		public readonly string OrgDbOrgSettings = null;
		
		public readonly bool? IsResourceBookingExchangeSyncEnabled = null;
		
		public readonly int? MaxConditionsForMobileOfflineFilters = null;
		
		public readonly string BulkOperationPrefix = null;
		
		public readonly bool? IsMobileClientOnDemandSyncEnabled = null;
		
		public readonly int? MinOutlookSyncInterval = null;
		
		public readonly int? CurrentParsedTableNumber = null;
		
		public readonly bool? DisableSocialCare = null;
		
		public readonly int? CurrentOrderNumber = null;
		
		public readonly int? HashMinAddressCount = null;
		
		public readonly bool? IsEnabledForAllRoles = null;
		
		public readonly bool? OrgInsightsEnabled = null;
		
		public readonly int? RecurrenceDefaultNumberOfOccurrences = null;
		
		public readonly int? MaximumEntitiesWithActiveSLA = null;
		
		public readonly string InvoicePrefix = null;
		
		public readonly bool? IsFullTextSearchEnabled = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate = null;
		
		public readonly int? EmailSendPollingPeriod = null;
		
		public readonly bool? IsActivityAnalysisEnabled = null;
		
		public readonly bool? NotifyMailboxOwnerOfEmailServerLevelAlerts = null;
		
		public readonly bool? ResolveSimilarUnresolvedEmailAddress = null;
		
		public readonly int? SyncBulkOperationBatchSize = null;
		
		public readonly bool? CreateProductsWithoutParentInActiveState = null;
		
		public readonly bool? IsMSTeamsSettingChangedByUser = null;
		
		public readonly bool? EmailCorrelationEnabled = null;
		
		public readonly string ReferenceSiteMapXml = null;
		
		public readonly bool? AllowUserFormModePreference = null;
		
		public readonly bool? AutoApplyDefaultonCaseUpdate = null;
		
		public readonly DateTime? FiscalCalendarStart = null;
		
		public readonly int? UniqueSpecifierLength = null;
		
		public readonly string ContentSecurityPolicyConfiguration = null;
		
		public readonly int? CurrentCampaignNumber = null;
		
		public readonly bool? IsFolderAutoCreatedonSP = null;
		
		public readonly EntityReference DefaultMobileOfflineProfileId = null;
		
		public readonly bool? ShowKBArticleDeprecationNotification = null;
		
		public readonly OptionSetValue YammerPostMethod = null;
		
		public readonly OptionSetValue FullNameConventionCode = null;
		
		public readonly bool? TextAnalyticsEnabled = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForImport = null;
		
		public readonly string YammerNetworkPermalink = null;
		
		public readonly OptionSetValue CurrencyFormatCode = null;
		
		public readonly string ParsedTableColumnPrefix = null;
		
		public readonly int? LocaleId = null;
		
		public readonly string DisabledReason = null;
		
		public readonly string DateFormatString = null;
		
		public readonly string FiscalPeriodFormat = null;
		
		public readonly string KbPrefix = null;
		
		public readonly bool? IsExternalSearchIndexEnabled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? MaxDepthForHierarchicalSecurityModel = null;
		
		public readonly bool? GlobalAppendUrlParametersEnabled = null;
		
		public readonly bool? DisplayNavigationTour = null;
		
		public readonly bool? AllowUnresolvedPartiesOnEmailSend = null;
		
		public readonly bool? UnresolveEmailAddressIfMultipleMatch = null;
		
		public readonly bool? IsDelegateAccessEnabled = null;
		
		public readonly bool? AppDesignerExperienceEnabled = null;
		
		public readonly string PostMessageWhitelistDomains = null;
		
		public readonly int? RecurrenceExpansionSynchCreateMax = null;
		
		public readonly string HashFilterKeywords = null;
		
		public readonly string SlaPauseStates = null;
		
		public readonly string SchemaNamePrefix = null;
		
		public readonly int? CurrentQuoteNumber = null;
		
		public readonly bool? GenerateAlertsForErrors = null;
		
		public readonly bool? AllowLegacyClientExperience = null;
		
		public readonly int? FutureExpansionWindow = null;
		
		public readonly OptionSetValue ISVIntegrationCode = null;
		
		public readonly int? MobileOfflineMinLicenseTrial = null;
		
		public readonly string NumberSeparator = null;
		
		public readonly bool? TaskBasedFlowEnabled = null;
		
		public readonly OptionSetValue WeekStartDayCode = null;
		
		public readonly bool? AllowUsersSeeAppdownloadMessage = null;
		
		public readonly Guid? DelegatedAdminUserId = null;
		
		public readonly OptionSetValue PluginTraceLogSetting = null;
		
		public readonly bool? IsFolderBasedTrackingEnabled = null;
		
		public readonly string ClientFeatureSet = null;
		
		public readonly bool? SessionTimeoutEnabled = null;
		
		public readonly bool? AllowMarketingEmailExecution = null;
		
		public readonly bool? GenerateAlertsForInformation = null;
		
		public readonly bool? IsActionCardEnabled = null;
		
		public readonly string OrderPrefix = null;
		
		public readonly EntityReference AcknowledgementTemplateId = null;
		
		public readonly bool? AllowOfflineScheduledSyncs = null;
		
		public readonly string TokenKey = null;
		
		public readonly int? ExpireChangeTrackingInDays = null;
		
		public readonly bool? OfficeAppsAutoDeploymentEnabled = null;
		
		public readonly Guid? SupportUserId = null;
		
		public readonly bool? IsMSTeamsEnabled = null;
		
		public readonly bool? IsConflictDetectionEnabledForMobileClient = null;
		
		public readonly bool? IgnoreInternalEmail = null;
		
		public readonly string Picture = null;
		
		public readonly string WebResourceHash = null;
		
		public readonly string ContractPrefix = null;
		
		public readonly string BingMapsApiKey = null;
		
		public readonly bool? IsPreviewForEmailMonitoringAllowed = null;
		
		public readonly int? BaseCurrencyPrecision = null;
		
		public readonly bool? IsAssignedTasksSyncEnabled = null;
		
		public readonly string BaseISOCurrencyCode = null;
		
		public readonly bool? IsLUISEnabledforD365Bot = null;
		
		public readonly string NumberGroupFormat = null;
		
		public readonly bool? SocialInsightsEnabled = null;
		
		public readonly int? PricingDecimalPrecision = null;
		
		public readonly int? FiscalYearDisplayCode = null;
		
		public readonly int? MaxUploadFileSize = null;
		
		public readonly int? MaximumActiveBusinessProcessFlowsAllowedPerEntity = null;
		
		public readonly string AzureSchedulerJobCollectionName = null;
		
		public readonly string DecimalSymbol = null;
		
		public readonly int? CurrentInvoiceNumber = null;
		
		public readonly int? MobileOfflineMinLicenseProd = null;
		
		public readonly bool? AllowAutoUnsubscribeAcknowledgement = null;
		
		public readonly int? HashDeltaSubjectCount = null;
		
		public readonly bool? BoundDashboardDefaultCardExpanded = null;
		
		public readonly bool? IsHierarchicalSecurityModelEnabled = null;
		
		public readonly bool? SuppressSLA = null;
		
		public readonly int? CurrentCategoryNumber = null;
		
		public readonly string SignupOutlookDownloadFWLink = null;
		
		public readonly bool? GrantAccessToNetworkService = null;
		
		public readonly int? MetadataSyncTimestamp = null;
		
		public readonly string CasePrefix = null;
		
		public readonly int? MaxSupportedInternetExplorerVersion = null;
		
		public readonly string FiscalYearFormat = null;
		
		public readonly int? SortId = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly int? InactivityTimeoutReminderInMins = null;
		
		public readonly OptionSetValue ReportScriptErrors = null;
		
		public readonly EntityReference BaseCurrencyId = null;
		
		public readonly bool? IsEmailMonitoringAllowed = null;
		
		public readonly string InitialVersion = null;
		
		public readonly string TrackingPrefix = null;
		
		public readonly int? CurrencyDecimalPrecision = null;
		
		public readonly bool? EnableUnifiedInterfaceShellRefresh = null;
		
		public readonly Guid? BusinessClosureCalendarId = null;
		
		public readonly bool? EnableLivePersonaCardUCI = null;
		
		public readonly string PMDesignator = null;
		
		public readonly bool? EnforceReadOnlyPlugins = null;
		
		public readonly int? MailboxIntermittentIssueMinRange = null;
		
		public readonly string HighContrastThemeData = null;
		
		public readonly OptionSetValue NegativeFormatCode = null;
		
		public readonly Guid? SqlAccessGroupId = null;
		
		public readonly int? CurrentContractNumber = null;
		
		public readonly bool? IsActionSupportFeatureEnabled = null;
		
		public readonly OptionSetValue SharePointDeploymentType = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForOfflineSync = null;
		
		public readonly bool? EnableBingMapsIntegration = null;
		
		public readonly bool? ProductRecommendationsEnabled = null;
		
		public readonly int? YearStartWeekCode = null;
		
		public readonly bool? IsPreviewForAutoCaptureEnabled = null;
		
		public readonly bool? RequireApprovalForUserEmail = null;
		
		public readonly string ExternalPartyCorrelationKeys = null;
		
		public readonly int? TagPollingPeriod = null;
		
		public readonly int? MaxProductsInBundle = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? EnableSmartMatching = null;
		
		public readonly bool? GenerateAlertsForWarnings = null;
		
		public readonly int? DaysSinceRecordLastModifiedMaxValue = null;
		
		public readonly int? CurrentImportSequenceNumber = null;
		
		public readonly bool? UsePositionHierarchy = null;
		
		public readonly bool? IsExternalFileStorageEnabled = null;
		
		public readonly int? MaxFolderBasedTrackingMappings = null;
		
		public readonly bool? UseLegacyRendering = null;
		
		public readonly bool? AppointmentRichEditorExperience = null;
		
		public readonly int? RiErrorStatus = null;
		
		public readonly bool? EnableImmersiveSkypeIntegration = null;
		
		public readonly int? MaximumTrackingNumber = null;
		
		public readonly bool? ShowWeekNumber = null;
		
		public readonly int? SessionTimeoutReminderInMins = null;
		
		public readonly string DefaultCountryCode = null;
		
		public readonly int? NextTrackingNumber = null;
		
		public readonly string ReportingGroupName = null;
		
		public readonly bool? FiscalSettingsUpdated = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly int? SyncBulkOperationMaxLimit = null;
		
		public readonly bool? IsMailboxForcedUnlockingEnabled = null;
		
		public readonly bool? EnableMicrosoftFlowIntegration = null;
		
		public readonly bool? IsSOPIntegrationEnabled = null;
		
		public readonly OptionSetValue CurrencyDisplayOption = null;
		
		public readonly bool? OOBPriceCalculationEnabled = null;
		
		public readonly bool? IsAppMode = null;
		
		public readonly string SqlAccessGroupName = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly string ExternalPartyEntitySettings = null;
		
		public readonly int? MaxRecordsForExportToExcel = null;
		
		public readonly OptionSetValue TimeFormatCode = null;
		
		public readonly OptionSetValue SchedulingEngine = null;
		
		public readonly OptionSetValue FiscalYearFormatPrefix = null;
		
		public readonly bool? AutoApplySLA = null;
		
		public readonly bool? IsDuplicateDetectionEnabled = null;
		
		public readonly bool? ShareToPreviousOwnerOnAssign = null;
		
		public readonly EntityReference DefaultEmailServerProfileId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? RestrictStatusUpdate = null;
		
		public readonly bool? PowerBiFeatureEnabled = null;
		
		public readonly string PrivReportingGroupName = null;
		
		public readonly string CategoryPrefix = null;
		
		public readonly int? NegativeCurrencyFormatCode = null;
		
		public readonly bool? EnableLPAuthoring = null;
		
		public readonly bool? IsEmailServerProfileContentFilteringEnabled = null;
		
		public readonly int? GoalRollupExpiryTime = null;
		
		public readonly int? MailboxPermanentIssueMinRange = null;
		
		public readonly Guid? IntegrationUserId = null;
		
		public readonly int? TokenExpiry = null;
		
		public readonly int? MaximumSLAKPIPerEntityWithActiveSLA = null;
		
		public readonly OptionSetValue FiscalPeriodFormatPeriod = null;
		
		public readonly OptionSetValue DefaultRecurrenceEndRangeType = null;
		
		public readonly string IsPDFGenerationEnabled = null;
		
		public readonly int? RecurrenceExpansionJobBatchSize = null;
		
		public readonly int? IncomingEmailExchangeEmailRetrievalBatchSize = null;
		
		public readonly bool? IsPAIEnabled = null;
		
		public readonly int? InactivityTimeoutInMins = null;
		
		public readonly int? CurrentKaNumber = null;
		
		public readonly bool? IsUserAccessAuditEnabled = null;
		
		public readonly bool? ServeStaticResourcesFromAzureCDN = null;
		
		public readonly Guid? PrivReportingGroupId = null;
		
		public readonly int? MaxVerboseLoggingSyncCycles = null;
		
		public readonly DateTime? MetadataSyncLastTimeOfNeverExpiredDeletedObjects = null;
		
		public readonly int? CurrentCaseNumber = null;
		
		public readonly bool? AutoApplyDefaultonCaseCreate = null;
		
		public readonly OptionSetValue SyncOptInSelectionStatus = null;
		
		public readonly bool? AllowLegacyDialogsEmbedding = null;
		
		public readonly string SocialInsightsInstance = null;
		
		public readonly int? YammerGroupId = null;
		
		public readonly bool? AllowEntityOnlyAudit = null;
		
		public readonly OptionSetValue OrganizationState = null;
		
		public readonly string DefaultEmailSettings = null;
		
		public readonly string NumberFormat = null;
		
		public readonly string OfficeGraphDelveUrl = null;
		
		public readonly string V3CalloutConfigHash = null;
		
		public readonly bool? IsAutoSaveEnabled = null;
		
		public readonly bool? SocialInsightsTermsAccepted = null;
		
		public readonly string MicrosoftFlowEnvironment = null;
		
		public readonly string ExternalBaseUrl = null;
		
		public readonly int? TrackingTokenIdDigits = null;
		
		public readonly string BlockedAttachments = null;
		
		public readonly bool? EnablePricingOnCreate = null;
		
		public readonly string SiteMapXml = null;
		
		public readonly string BaseCurrencySymbol = null;
		
		public readonly bool? IsTextWrapEnabled = null;
		
		public readonly Guid? PrivilegeUserGroupId = null;
		
		public readonly bool? InactivityTimeoutEnabled = null;
		
		public readonly bool? IsDelveActionHubIntegrationEnabled = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string KaPrefix = null;
		
		public readonly bool? IsMSTeamsUserSyncEnabled = null;
		
		public readonly bool? AllowOutlookScheduledSyncs = null;
		
		public readonly bool? IsOfficeGraphEnabled = null;
		
		public readonly bool? IsMSTeamsCollaborationEnabled = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly bool? CascadeStatusUpdate = null;
		
		public readonly int? HashMaxCount = null;
		
		public readonly OptionSetValue DateFormatCode = null;
		
		public readonly bool? IsDefaultCountryCodeCheckEnabled = null;
		
		public readonly bool? IsManualSalesForecastingEnabled = null;
		
		public readonly OptionSetValue EmailConnectionChannel = null;
		
		public readonly int? MaxRecordsForLookupFilters = null;
		
		public readonly bool? AllowAddressBookSyncs = null;
		
		public readonly int? GoalRollupFrequency = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? TagMaxAggressiveCycles = null;
		
		public readonly int? MaxAppointmentDurationDays = null;
		
		public readonly int? UserAccessAuditingInterval = null;
		
		public readonly bool? IsMobileOfflineEnabled = null;
		
		public readonly string AMDesignator = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string PrivacyStatementUrl = null;
		
		public readonly int? NextCustomObjectTypeCode = null;
		
		public readonly string QuotePrefix = null;
		
		public readonly bool? IsAutoDataCaptureEnabled = null;
		
		public readonly bool? IsContactMailingAddressSyncEnabled = null;
		
		public readonly bool? GlobalHelpUrlEnabled = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? MaxVerboseLoggingMailbox = null;
		
		public readonly OptionSetValue FiscalYearFormatYear = null;
		
		public readonly bool? IsRelationshipInsightsEnabled = null;
		
		public readonly int? MaximumDynamicPropertiesAllowed = null;
		
		public readonly OptionSetValue DiscountCalculationMethod = null;
		
		public readonly bool? UseInbuiltRuleForDefaultPricelistSelection = null;
		
		public readonly bool? IsQuickCreateEnabledForOpportunityClose = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string TimeSeparator = null;
		
		public readonly bool? AllowAutoUnsubscribe = null;
		
		public readonly bool? AllowClientMessageBarAd = null;
		
		public readonly bool? IsPresenceEnabled = null;
		
		public readonly bool? RenderSecureIFrameForEmail = null;
		
		public readonly bool? IsReadAuditEnabled = null;
		
		public readonly int? PinpointLanguageCode = null;
		
		public readonly int? LongDateFormatCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string DefaultThemeData = null;
		
		public readonly string ParsedTablePrefix = null;
		
		public readonly string DefaultCrmCustomName = null;
		
		public readonly bool? SQMEnabled = null;
		
		public readonly string TimeFormatString = null;
		
		public readonly int? CurrentKbNumber = null;
		
		public readonly bool? IsAuditEnabled = null;
		
		public readonly bool? UseSkypeProtocol = null;
		
		public readonly int? MinAddressBookSyncInterval = null;
		
		public readonly int? PastExpansionWindow = null;
		
		public readonly string FiscalYearPeriodConnect = null;
		
		public readonly bool? IsFiscalPeriodMonthBased = null;
		
		public readonly bool? RequireApprovalForQueueEmail = null;
		
		public readonly bool? IsPreviewEnabledForActionCard = null;
		
		public readonly int? MinOfflineSyncInterval = null;
		
		public readonly OptionSetValue FiscalYearFormatSuffix = null;
		
		public readonly bool? IsCustomControlsInCanvasAppsEnabled = null;
		
		public readonly bool? IsAppointmentAttachmentSyncEnabled = null;
		
		public readonly int? CalendarType = null;
		
		public readonly string DateSeparator = null;
		
		public readonly string CampaignPrefix = null;
		
		public readonly int? TrackingTokenIdBase = null;
		
		public readonly Guid? SampleDataImportId = null;
		
		public readonly string FeatureSet = null;
		
		public readonly bool? IsContentSecurityPolicyEnabled = null;
		
		public readonly bool? IsNotesAnalysisEnabled = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? UserGroupId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? CortanaProactiveExperienceEnabled = null;
		
		public readonly string KMSettings = null;
		
		public readonly bool? IsOneDriveEnabled = null;
		
		public readonly string WidgetProperties = null;
		
		public readonly bool? GetStartedPaneContentEnabled = null;
		
		public readonly string GlobalHelpUrl = null;
		
		public readonly int? CurrentBulkOperationNumber = null;
		
		public readonly bool? IsBPFEntityCustomizationFeatureEnabled = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? RecurrenceExpansionJobBatchInterval = null;
		
		public readonly bool? IsMailboxInactiveBackoffEnabled = null;
		
		public readonly Guid? OrganizationId = null;

        public new static class Options
        {
            public enum YammerPostMethod
            {
                Public = 0,
                Private = 1
            }
            public enum FullNameConventionCode
            {
                LastNameFirstName = 0,
                FirstName = 1,
                LastNameFirstNameMiddleInitial = 2,
                FirstNameMiddleInitialLastName = 3,
                LastNameFirstNameMiddleName = 4,
                FirstNameMiddleNameLastName = 5,
                LastNameSpaceFirstName = 6,
                LastNameNoSpaceFirstName = 7
            }
            public enum CurrencyFormatCode
            {
                _123 = 0,
                _1231 = 1,
                _1232 = 2,
                _1233 = 3
            }
            public enum ISVIntegrationCode
            {
                None = 0,
                Web = 1,
                OutlookWorkstationClient = 2,
                WebOutlookWorkstationClient = 3,
                OutlookLaptopClient = 4,
                WebOutlookLaptopClient = 5,
                Outlook = 6,
                All = 7
            }
            public enum WeekStartDayCode
            {

            }
            public enum PluginTraceLogSetting
            {
                Off = 0,
                Exception = 1,
                All = 2
            }
            public enum ReportScriptErrors
            {
                NoPreferenceForSendingAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 0,
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }
            public enum NegativeFormatCode
            {
                Brackets = 0,
                Dash = 1,
                DashPlusSpace = 2,
                TrailingDash = 3,
                SpacePlusTrailingDash = 4
            }
            public enum SharePointDeploymentType
            {
                Online = 0,
                OnPremises = 1
            }
            public enum CurrencyDisplayOption
            {
                CurrencySymbol = 0,
                CurrencyCode = 1
            }
            public enum TimeFormatCode
            {

            }
            public enum SchedulingEngine
            {
                LegacySchedulingEngine = 0,
                UniversalResourceScheduling = 192350000
            }
            public enum FiscalYearFormatPrefix
            {
                FY = 1,

            }
            public enum FiscalPeriodFormatPeriod
            {
                Quarter0 = 1,
                Q0 = 2,
                P0 = 3,
                Month0 = 4,
                M0 = 5,
                Semester0 = 6,
                MonthName = 7
            }
            public enum DefaultRecurrenceEndRangeType
            {
                NoEndDate = 1,
                NumberOfOccurrences = 2,
                EndByDate = 3
            }
            public enum SyncOptInSelectionStatus
            {
                Processing = 1,
                Passed = 2,
                Failed = 3
            }
            public enum OrganizationState
            {
                Creating = 0,
                Upgrading = 1,
                Updating = 2,
                Active = 3
            }
            public enum DateFormatCode
            {

            }
            public enum EmailConnectionChannel
            {
                ServerSideSynchronization = 0,
                MicrosoftDynamics365EmailRouter = 1
            }
            public enum FiscalYearFormatYear
            {
                YYYY = 1,
                YY = 2,
                GGYY = 3
            }
            public enum DiscountCalculationMethod
            {
                LineItem = 0,
                PerUnit = 1
            }
            public enum FiscalYearFormatSuffix
            {
                FY = 1,
                FiscalYear = 2,

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderlinetransactioncategory")]
	public class msdyn_orderlinetransactioncategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderlinetransactioncategory";
        public msdyn_orderlinetransactioncategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderlinetransactioncategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderlinetransactioncategoryid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly Guid? msdyn_orderlinetransactioncategoryId = null;
		
		public readonly EntityReference msdyn_ContractLineId = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_ContractLineTransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("displaystring")]
	public class DisplayString : Entity
    {
        public const string EntityLogicalName = "displaystring";
        public DisplayString() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string CustomComment = null;
		
		public readonly Guid? DisplayStringId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? DisplayStringIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string CustomDisplayString = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? FormatParameters = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string DisplayStringKey = null;
		
		public readonly string PublishedDisplayString = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("leadaddress")]
	public class LeadAddress : Entity
    {
        public const string EntityLogicalName = "leadaddress";
        public LeadAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadaddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadaddressid"] = value;
            }
        }
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Composite = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string Country = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly string City = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly double? Longitude = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Line1 = null;
		
		public readonly Guid? LeadAddressId = null;
		
		public readonly Guid? OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string PostalCode = null;
		
		public readonly string County = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Line2 = null;
		
		public readonly string Line3 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {

            }
            public enum AddressTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequirement_bookingheader")]
	public class msdyn_resourcerequirement_bookingheader : Entity
    {
        public const string EntityLogicalName = "msdyn_resourcerequirement_bookingheader";
        public msdyn_resourcerequirement_bookingheader() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequirement_bookingheaderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequirement_bookingheaderid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_resourcerequirementid = null;
		
		public readonly Guid? bookableresourcebookingheaderid = null;
		
		public readonly Guid? msdyn_resourcerequirement_bookingheaderId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcecategoryassn")]
	public class BookableResourceCategoryAssn : Entity
    {
        public const string EntityLogicalName = "bookableresourcecategoryassn";
        public BookableResourceCategoryAssn() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecategoryassnid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecategoryassnid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference Resource = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? msdyn_IsDefault = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? BookableResourceCategoryAssnId = null;
		
		public readonly EntityReference ResourceCategory = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("syncattributemapping")]
	public class SyncAttributeMapping : Entity
    {
        public const string EntityLogicalName = "syncattributemapping";
        public SyncAttributeMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsComputed = null;
		
		public readonly Guid? SyncAttributeMappingIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SyncAttributeMappingId = null;
		
		public readonly EntityReference SyncAttributeMappingProfileId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue DefaultSyncDirection = null;
		
		public readonly string AttributeCRMName = null;
		
		public readonly OptionSetValue SyncDirection = null;
		
		public readonly string MappingName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? AllowedSyncDirection = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string ComputedProperties = null;
		
		public readonly EntityReference ParentSyncAttributeMappingId = null;
		
		public readonly string AttributeExchangeName = null;
		
		public readonly string EntityTypeCode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("reportentity")]
	public class ReportEntity : Entity
    {
        public const string EntityLogicalName = "reportentity";
        public ReportEntity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportentityid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly Guid? ReportEntityIdUnique = null;
		
		public readonly Guid? ReportEntityId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsFilterable = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribbondiff")]
	public class RibbonDiff : Entity
    {
        public const string EntityLogicalName = "ribbondiff";
        public RibbonDiff() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbondiffid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbondiffid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? Sequence = null;
		
		public readonly string TabId = null;
		
		public readonly OptionSetValue DiffType = null;
		
		public readonly string Entity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ContextGroupId = null;
		
		public readonly string RDX = null;
		
		public readonly bool? IsAppAware = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? RibbonDiffId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? RibbonDiffUniqueId = null;
		
		public readonly string DiffId = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DiffType
            {
                Standard = 0,
                Tab = 1,
                LayoutTemplate = 2,
                LocalizedLabel = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcerequirementdetail")]
	public class msdyn_resourcerequirementdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourcerequirementdetail";
        public msdyn_resourcerequirementdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcerequirementdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcerequirementdetailid"] = value;
            }
        }
		
		public readonly Guid? msdyn_resourcerequirementdetailId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_resourcerequirementid = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly DateTime? msdyn_from = null;
		
		public readonly DateTime? msdyn_to = null;
		
		public readonly decimal? msdyn_hours = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("privilegeobjecttypecodes")]
	public class PrivilegeObjectTypeCodes : Entity
    {
        public const string EntityLogicalName = "privilegeobjecttypecodes";
        public PrivilegeObjectTypeCodes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeobjecttypecodeid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference PrivilegeId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? PrivilegeObjectTypeCodeRowId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? PrivilegeObjectTypeCodeId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_dimensionfieldname")]
	public class msdyn_dimensionfieldname : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_dimensionfieldname";
        public msdyn_dimensionfieldname() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_dimensionfieldnameid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_dimensionfieldnameid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_DimensionId = null;
		
		public readonly Guid? msdyn_dimensionfieldnameId = null;
		
		public readonly string msdyn_EntityLogicalName = null;
		
		public readonly string msdyn_FieldName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_accountpricelist")]
	public class msdyn_accountpricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_accountpricelist";
        public msdyn_accountpricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_accountpricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_accountpricelistid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Account = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_accountpricelistId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("opportunityclose")]
	public class OpportunityClose : Entity
    {
        public const string EntityLogicalName = "opportunityclose";
        public OpportunityClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly Money ActualRevenue = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Category = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CompetitorId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly Money ActualRevenue_Base = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("goal")]
	public class Goal : Entity
    {
        public const string EntityLogicalName = "goal";
        public Goal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference RollUpQueryInprogressMoneyId = null;
		
		public readonly bool? IsFiscalPeriodGoal = null;
		
		public readonly int? ActualInteger = null;
		
		public readonly EntityReference ParentGoalId = null;
		
		public readonly Money CustomRollupFieldMoney_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly Guid? TreeId = null;
		
		public readonly Money InProgressMoney_Base = null;
		
		public readonly int? Depth = null;
		
		public readonly int? StretchTargetInteger = null;
		
		public readonly EntityReference RollUpQueryCustomDecimalId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money ActualMoney_Base = null;
		
		public readonly string TargetString = null;
		
		public readonly EntityReference GoalWithErrorId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money ComputedTargetAsOfTodayMoney_Base = null;
		
		public readonly decimal? CustomRollupFieldDecimal = null;
		
		public readonly EntityReference RollUpQueryCustomMoneyId = null;
		
		public readonly EntityReference MetricId = null;
		
		public readonly EntityReference GoalOwnerId = null;
		
		public readonly OptionSetValue FiscalPeriod = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference RollupQueryActualIntegerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? RollupOnlyFromChildGoals = null;
		
		public readonly decimal? TargetDecimal = null;
		
		public readonly OptionSetValue AmountDataType = null;
		
		public readonly Money ActualMoney = null;
		
		public readonly string CustomRollupFieldString = null;
		
		public readonly string ActualString = null;
		
		public readonly EntityReference RollUpQueryInprogressIntegerId = null;
		
		public readonly decimal? StretchTargetDecimal = null;
		
		public readonly decimal? Percentage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? RollupErrorCode = null;
		
		public readonly string StretchTargetString = null;
		
		public readonly Money ComputedTargetAsOfTodayMoney = null;
		
		public readonly bool? IsOverride = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money TargetMoney_Base = null;
		
		public readonly Money CustomRollupFieldMoney = null;
		
		public readonly decimal? ComputedTargetAsOfTodayDecimal = null;
		
		public readonly EntityReference RollUpQueryCustomIntegerId = null;
		
		public readonly EntityReference RollUpQueryActualDecimalId = null;
		
		public readonly decimal? InProgressDecimal = null;
		
		public readonly bool? ConsiderOnlyGoalOwnersRecords = null;
		
		public readonly DateTime? GoalStartDate = null;
		
		public readonly int? InProgressInteger = null;
		
		public readonly Money StretchTargetMoney = null;
		
		public readonly OptionSetValue FiscalYear = null;
		
		public readonly Money InProgressMoney = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? TargetInteger = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ActualDecimal = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsOverridden = null;
		
		public readonly EntityReference RollUpQueryActualMoneyId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly decimal? ComputedTargetAsOfTodayPercentageAchieved = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? GoalEndDate = null;
		
		public readonly string InProgressString = null;
		
		public readonly int? ComputedTargetAsOfTodayInteger = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly DateTime? LastRolledupDate = null;
		
		public readonly bool? IsAmount = null;
		
		public readonly Guid? GoalId = null;
		
		public readonly int? CustomRollupFieldInteger = null;
		
		public readonly Money StretchTargetMoney_Base = null;
		
		public readonly EntityReference RollUpQueryInprogressDecimalId = null;
		
		public readonly Money TargetMoney = null;

        public new static class Options
        {
            public enum FiscalPeriod
            {
                Quarter1 = 1,
                Quarter2 = 2,
                Quarter3 = 3,
                Quarter4 = 4,
                January = 101,
                February = 102,
                March = 103,
                April = 104,
                May = 105,
                June = 106,
                July = 107,
                August = 108,
                September = 109,
                October = 110,
                November = 111,
                December = 112,
                Semester1 = 201,
                Semester2 = 202,
                Annual = 301,
                P1 = 401,
                P2 = 402,
                P3 = 403,
                P4 = 404,
                P5 = 405,
                P6 = 406,
                P7 = 407,
                P8 = 408,
                P9 = 409,
                P10 = 410,
                P11 = 411,
                P12 = 412,
                P13 = 413
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }
            public enum FiscalYear
            {
                FY2038 = 2038,
                FY2037 = 2037,
                FY2036 = 2036,
                FY2035 = 2035,
                FY2034 = 2034,
                FY2033 = 2033,
                FY2032 = 2032,
                FY2031 = 2031,
                FY2030 = 2030,
                FY2029 = 2029,
                FY2028 = 2028,
                FY2027 = 2027,
                FY2026 = 2026,
                FY2025 = 2025,
                FY2024 = 2024,
                FY2023 = 2023,
                FY2022 = 2022,
                FY2021 = 2021,
                FY2020 = 2020,
                FY2019 = 2019,
                FY2018 = 2018,
                FY2017 = 2017,
                FY2016 = 2016,
                FY2015 = 2015,
                FY2014 = 2014,
                FY2013 = 2013,
                FY2012 = 2012,
                FY2011 = 2011,
                FY2010 = 2010,
                FY2009 = 2009,
                FY2008 = 2008,
                FY2007 = 2007,
                FY2006 = 2006,
                FY2005 = 2005,
                FY2004 = 2004,
                FY2003 = 2003,
                FY2002 = 2002,
                FY2001 = 2001,
                FY2000 = 2000,
                FY1999 = 1999,
                FY1998 = 1998,
                FY1997 = 1997,
                FY1996 = 1996,
                FY1995 = 1995,
                FY1994 = 1994,
                FY1993 = 1993,
                FY1992 = 1992,
                FY1991 = 1991,
                FY1990 = 1990,
                FY1989 = 1989,
                FY1988 = 1988,
                FY1987 = 1987,
                FY1986 = 1986,
                FY1985 = 1985,
                FY1984 = 1984,
                FY1983 = 1983,
                FY1982 = 1982,
                FY1981 = 1981,
                FY1980 = 1980,
                FY1979 = 1979,
                FY1978 = 1978,
                FY1977 = 1977,
                FY1976 = 1976,
                FY1975 = 1975,
                FY1974 = 1974,
                FY1973 = 1973,
                FY1972 = 1972,
                FY1971 = 1971,
                FY1970 = 1970
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1,
                Discarded = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("fieldpermission")]
	public class FieldPermission : Entity
    {
        public const string EntityLogicalName = "fieldpermission";
        public FieldPermission() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldpermissionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldpermissionid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string AttributeLogicalName = null;
		
		public readonly EntityReference FieldSecurityProfileId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue CanUpdate = null;
		
		public readonly string EntityName = null;
		
		public readonly Guid? FieldPermissionIdUnique = null;
		
		public readonly Guid? FieldPermissionId = null;
		
		public readonly OptionSetValue CanRead = null;
		
		public readonly OptionSetValue CanCreate = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum CanUpdate
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanRead
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanCreate
            {
                NotAllowed = 0,
                Allowed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemform")]
	public class SystemForm : Entity
    {
        public const string EntityLogicalName = "systemform";
        public SystemForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }
		
		public readonly Guid? FormId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? IsAIRMerged = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly OptionSetValue FormPresentation = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference AncestorFormId = null;
		
		public readonly string FormXml = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsDesktopEnabled = null;
		
		public readonly string FormJson = null;
		
		public readonly Guid? FormIdUnique = null;
		
		public readonly int? Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue FormActivationState = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsTabletEnabled = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string UniqueName = null;
		
		public readonly string FormXmlManaged = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum FormPresentation
            {
                ClassicForm = 0,
                AirForm = 1,
                ConvertedICForm = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FormActivationState
            {
                Inactive = 0,
                Active = 1
            }
            public enum Type
            {
                Dashboard = 0,
                AppointmentBook = 1,
                Main = 2,
                MiniCampaignBO = 3,
                Preview = 4,
                MobileExpress = 5,
                QuickViewForm = 6,
                QuickCreate = 7,
                Dialog = 8,
                TaskFlowForm = 9,
                InteractionCentricDashboard = 10,
                Card = 11,
                MainInteractiveExperience = 12,
                Other = 100,
                MainBackup = 101,
                AppointmentBookBackup = 102,
                PowerBIDashboard = 103
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("listmember")]
	public class ListMember : Entity
    {
        public const string EntityLogicalName = "listmember";
        public ListMember() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("listmemberid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["listmemberid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string EntityType = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ListMemberId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ListId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference EntityId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingtimestamp")]
	public class msdyn_bookingtimestamp : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingtimestamp";
        public msdyn_bookingtimestamp() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingtimestampid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingtimestampid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Booking = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_TimestampSource = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly bool? msdyn_GenerateJournals = null;
		
		public readonly Guid? msdyn_bookingtimestampId = null;
		
		public readonly DateTime? msdyn_TimestampTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TimestampSource
            {
                Desktop = 690970000,
                Mobile = 690970001
            }
            public enum msdyn_SystemStatus
            {
                Scheduled = 690970000,
                Traveling = 690970001,
                InProgress = 690970003,
                OnBreak = 690970002,
                Completed = 690970004,
                Canceled = 690970005
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmodule")]
	public class AppModule : Entity
    {
        public const string EntityLogicalName = "appmodule";
        public AppModule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? FormFactor = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly string AppModuleVersion = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ClientType = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? AppModuleIdUnique = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? WelcomePageId = null;
		
		public readonly EntityReference PublisherId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string EventHandlers = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string URL = null;
		
		public readonly string Descriptor = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly string AppModuleXmlManaged = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string UniqueName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue NavigationType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? AppModuleId = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly string ConfigXML = null;
		
		public readonly bool? IsFeatured = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum NavigationType
            {
                SingleSession = 0,
                MultiSession = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_postalbum")]
	public class msdyn_PostAlbum : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_postalbum";
        public msdyn_PostAlbum() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postalbumid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postalbumid"] = value;
            }
        }
		
		public readonly Guid? msdyn_PostAlbumId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("phonecall")]
	public class PhoneCall : Entity
    {
        public const string EntityLogicalName = "phonecall";
        public PhoneCall() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityCollection from = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly EntityCollection to = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string PhoneNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference SLAId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Made = 2,
                Canceled = 3,
                Received = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdynsm_salessitemap")]
	public class msdynsm_salessitemap : OrganizationEntity
    {
        public const string EntityLogicalName = "msdynsm_salessitemap";
        public msdynsm_salessitemap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdynsm_salessitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdynsm_salessitemapid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdynsm_name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdynsm_salessitemapId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_roleutilization")]
	public class msdyn_roleutilization : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_roleutilization";
        public msdyn_roleutilization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_roleutilizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_roleutilizationid"] = value;
            }
        }
		
		public readonly int? msdyn_utilpercentdiff = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_roleutilizationId = null;
		
		public readonly EntityReference msdyn_role = null;
		
		public readonly int? msdyn_utilpercent = null;
		
		public readonly int? msdyn_targetutilpercent = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workordersubstatus")]
	public class msdyn_workordersubstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workordersubstatus";
        public msdyn_workordersubstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workordersubstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workordersubstatusid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_DefaultSubStatus = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly Guid? msdyn_workordersubstatusId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_SystemStatus
            {
                OpenUnscheduled = 690970000,
                OpenScheduled = 690970001,
                OpenInProgress = 690970002,
                OpenCompleted = 690970003,
                ClosedPosted = 690970004,
                ClosedCanceled = 690970005
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicecommanddefinition")]
	public class msdyn_iotdevicecommanddefinition : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdevicecommanddefinition";
        public msdyn_iotdevicecommanddefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicecommanddefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicecommanddefinitionid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_iotdevicecommanddefinitionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderinvoicingproduct")]
	public class msdyn_orderinvoicingproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderinvoicingproduct";
        public msdyn_orderinvoicingproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderinvoicingproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderinvoicingproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_OrderInvoicingSetup = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_unitprice_Base = null;
		
		public readonly Money msdyn_UnitPrice = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly Guid? msdyn_orderinvoicingproductId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactioncategorypricelevel")]
	public class msdyn_transactioncategorypricelevel : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_transactioncategorypricelevel";
        public msdyn_transactioncategorypricelevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactioncategorypricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactioncategorypricelevelid"] = value;
            }
        }
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly decimal? msdyn_percent = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? msdyn_transactioncategorypricelevelId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly OptionSetValue msdyn_pricecalculation = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_pricecalculation
            {
                PricePerUnit = 192350000,
                AtCost = 192350001,
                MarkupPercentage = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userquery")]
	public class UserQuery : Entity
    {
        public const string EntityLogicalName = "userquery";
        public UserQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ConditionalFormatting = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? QueryType = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ParentQueryId = null;
		
		public readonly string AdvancedGroupBy = null;
		
		public readonly string ColumnSetXml = null;
		
		public readonly string OfflineSqlQuery = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string FetchXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? UserQueryId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ReturnedTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string LayoutJson = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string LayoutXml = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                All = 3,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("teammembership")]
	public class TeamMembership : Entity
    {
        public const string EntityLogicalName = "teammembership";
        public TeamMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teammembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teammembershipid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TeamMembershipId = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("savedquery")]
	public class SavedQuery : Entity
    {
        public const string EntityLogicalName = "savedquery";
        public SavedQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryid"] = value;
            }
        }
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsUserDefined = null;
		
		public readonly Guid? SavedQueryId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SavedQueryIdUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ConditionalFormatting = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? QueryType = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsQuickFindQuery = null;
		
		public readonly string ColumnSetXml = null;
		
		public readonly string OfflineSqlQuery = null;
		
		public readonly int? QueryAppUsage = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string AdvancedGroupBy = null;
		
		public readonly string FetchXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string ReturnedTypeCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsCustom = null;
		
		public readonly string LayoutJson = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string QueryAPI = null;
		
		public readonly int? OrganizationTabOrder = null;
		
		public readonly string LayoutXml = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("postrole")]
	public class PostRole : Entity
    {
        public const string EntityLogicalName = "postrole";
        public PostRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postroleid"] = value;
            }
        }
		
		public readonly EntityReference PostId = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly Guid? PostRoleId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum Type
            {
                Regarding = 1,
                Mentioning = 2,
                MentioningAndRegarding = 3,
                Topic = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("adminsettingsentity")]
	public class adminsettingsentity : UserOrTeamEntity
    {
        public const string EntityLogicalName = "adminsettingsentity";
        public adminsettingsentity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("adminsettingsentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["adminsettingsentityid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string new_name = null;
		
		public readonly Guid? adminsettingsentityId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("attributemap")]
	public class AttributeMap : Entity
    {
        public const string EntityLogicalName = "attributemap";
        public AttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attributemapid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? AttributeMapId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string TargetAttributeName = null;
		
		public readonly Guid? AttributeMapIdUnique = null;
		
		public readonly bool? IsSystem = null;
		
		public readonly EntityReference ParentAttributeMapId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string SourceAttributeName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference EntityMapId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("emailhash")]
	public class EmailHash : Entity
    {
        public const string EntityLogicalName = "emailhash";
        public EmailHash() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailhashid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailhashid"] = value;
            }
        }
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference ActivityId = null;
		
		public readonly int? Hash = null;
		
		public readonly Guid? EmailHashId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? HashType = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mobileofflineprofileitemassociation")]
	public class MobileOfflineProfileItemAssociation : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitemassociation";
        public MobileOfflineProfileItemAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemassociationid"] = value;
            }
        }
		
		public readonly bool? IsValidated = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? MobileOfflineProfileItemAssociationIdUnique = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? RelationshipId = null;
		
		public readonly EntityReference MobileOfflineProfileItemId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? MobileOfflineProfileItemAssociationId = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string RelationshipData = null;
		
		public readonly OptionSetValue SelectedRelationShipsSchema = null;
		
		public readonly string RelationshipDisplayName = null;
		
		public readonly string RelationshipName = null;
		
		public readonly string ProfileItemAssociationEntityFilter = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SelectedRelationShipsSchema
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionsyncinfo")]
	public class SubscriptionSyncInfo : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncinfo";
        public SubscriptionSyncInfo() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionsyncinfoid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionsyncinfoid"] = value;
            }
        }
		
		public readonly int? SubscriptionSyncInfoId = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? DataSize = null;
		
		public readonly bool? SyncResult = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string ClientVersion = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference SubscriptionId = null;
		
		public readonly int? InsertObjectCount = null;
		
		public readonly int? DeleteObjectCount = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_d3d97bac8c294105840e99e37a9d1c39")]
	public class msdyn_bpf_d3d97bac8c294105840e99e37a9d1c39 : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_d3d97bac8c294105840e99e37a9d1c39";
        public msdyn_bpf_d3d97bac8c294105840e99e37a9d1c39() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference bpf_msdyn_workorderid = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorder")]
	public class msdyn_workorder : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorder";
        public msdyn_workorder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderid"] = value;
            }
        }
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly DateTime? msdyn_TimeToPromised = null;
		
		public readonly string msdyn_mapcontrol = null;
		
		public readonly bool? msdyn_IsFollowUp = null;
		
		public readonly Money msdyn_subtotalamount_Base = null;
		
		public readonly EntityReference msdyn_WorkOrderType = null;
		
		public readonly EntityReference msdyn_ParentWorkOrder = null;
		
		public readonly string msdyn_City = null;
		
		public readonly string msdyn_PrimaryIncidentDescription = null;
		
		public readonly EntityReference msdyn_ReportedByContact = null;
		
		public readonly string msdyn_AutoNumbering = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;
		
		public readonly DateTime? msdyn_TimeWindowStart = null;
		
		public readonly EntityReference msdyn_ServiceAccount = null;
		
		public readonly Guid? msdyn_workorderId = null;
		
		public readonly string msdyn_Address1 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_TimeGroup = null;
		
		public readonly EntityReference msdyn_BillingAccount = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly DateTime? msdyn_DateWindowEnd = null;
		
		public readonly string msdyn_Address3 = null;
		
		public readonly Money msdyn_EstimateSubtotalAmount = null;
		
		public readonly EntityReference msdyn_workhourtemplate = null;
		
		public readonly EntityReference msdyn_IoTAlert = null;
		
		public readonly DateTime? msdyn_TimeWindowEnd = null;
		
		public readonly bool? msdyn_IsMobile = null;
		
		public readonly int? msdyn_PrimaryIncidentEstimatedDuration = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly EntityReference msdyn_PreferredResource = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_SubStatus = null;
		
		public readonly Money msdyn_estimatesubtotalamount_Base = null;
		
		public readonly string msdyn_FollowUpNote = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly EntityReference msdyn_workorderarrivaltimekpiid = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly string msdyn_BookingSummary = null;
		
		public readonly Guid? processid = null;
		
		public readonly EntityReference msdyn_ClosedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Instructions = null;
		
		public readonly string msdyn_Address2 = null;
		
		public readonly DateTime? msdyn_DateWindowStart = null;
		
		public readonly EntityReference msdyn_PrimaryIncidentType = null;
		
		public readonly string msdyn_Country = null;
		
		public readonly EntityReference msdyn_workorderresolutionkpiid = null;
		
		public readonly string msdyn_AddressName = null;
		
		public readonly Money msdyn_SubtotalAmount = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly DateTime? msdyn_TimeFromPromised = null;
		
		public readonly bool? msdyn_FollowUpRequired = null;
		
		public readonly Guid? stageid = null;
		
		public readonly DateTime? msdyn_TimeClosed = null;
		
		public readonly string msdyn_PostalCode = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly EntityReference msdyn_OpportunityId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_totalsalestax_Base = null;
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly EntityReference msdyn_SupportContact = null;
		
		public readonly EntityReference msdyn_ServiceRequest = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly string msdyn_StateOrProvince = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly EntityReference msdyn_Priority = null;
		
		public readonly int? msdyn_ChildIndex = null;
		
		public readonly EntityReference msdyn_TimeGroupDetailSelected = null;
		
		public readonly string msdyn_WorkOrderSummary = null;
		
		public readonly Money msdyn_TotalSalesTax = null;
		
		public readonly Money msdyn_TotalAmount = null;

        public new static class Options
        {
            public enum msdyn_SystemStatus
            {
                OpenUnscheduled = 690970000,
                OpenScheduled = 690970001,
                OpenInProgress = 690970002,
                OpenCompleted = 690970003,
                ClosedPosted = 690970004,
                ClosedCanceled = 690970005
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("workflow")]
	public class Workflow : Entity
    {
        public const string EntityLogicalName = "workflow";
        public Workflow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? AsyncAutoDelete = null;
		
		public readonly Guid? FormId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string UIData = null;
		
		public readonly string PrimaryEntity = null;
		
		public readonly Guid? WorkflowIdUnique = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly string UniqueName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? TriggerOnDelete = null;
		
		public readonly EntityReference ParentWorkflowId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly bool? SyncWorkflowLogOnFailure = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly OptionSetValue DeleteStage = null;
		
		public readonly string ProcessRoleAssignment = null;
		
		public readonly OptionSetValue RunAs = null;
		
		public readonly Guid? WorkflowId = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly bool? Subprocess = null;
		
		public readonly string TriggerOnUpdateAttributeList = null;
		
		public readonly OptionSetValue UpdateStage = null;
		
		public readonly string RendererObjectTypeCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? TriggerOnCreate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ClientData = null;
		
		public readonly string Description = null;
		
		public readonly int? Rank = null;
		
		public readonly string InputParameters = null;
		
		public readonly bool? OnDemand = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ActiveWorkflowId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue Scope = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ProcessOrder = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly OptionSetValue BusinessProcessType = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue Category = null;
		
		public readonly string Xaml = null;
		
		public readonly bool? IsTransacted = null;
		
		public readonly OptionSetValue CreateStage = null;
		
		public readonly bool? IsCrmUIWorkflow = null;

        public new static class Options
        {
            public enum PrimaryEntity
            {

            }
            public enum StateCode
            {
                Draft = 0,
                Activated = 1
            }
            public enum DeleteStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum RunAs
            {
                Owner = 0,
                CallingUser = 1
            }
            public enum Mode
            {
                Background = 0,
                RealTime = 1
            }
            public enum UpdateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum Type
            {
                Definition = 1,
                Activation = 2,
                Template = 3
            }
            public enum Scope
            {
                User = 1,
                BusinessUnit = 2,
                ParentChildBusinessUnits = 3,
                Organization = 4
            }
            public enum StatusCode
            {
                Draft = 1,
                Activated = 2
            }
            public enum BusinessProcessType
            {
                BusinessFlow = 0,
                TaskFlow = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Category
            {
                Workflow = 0,
                Dialog = 1,
                BusinessRule = 2,
                Action = 3,
                BusinessProcessFlow = 4,
                ModernFlow = 5
            }
            public enum CreateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("license")]
	public class License : Entity
    {
        public const string EntityLogicalName = "license";
        public License() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("licenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["licenseid"] = value;
            }
        }
		
		public readonly Guid? LicenseType = null;
		
		public readonly string LicenseKey = null;
		
		public readonly Guid? LicenseId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? InstalledOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_findworkevent")]
	public class msdyn_findworkevent : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_findworkevent";
        public msdyn_findworkevent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_findworkeventid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_findworkeventid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_Timestamp = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly string msdyn_Value = null;
		
		public readonly Guid? msdyn_findworkeventId = null;
		
		public readonly EntityReference msdyn_BookableResource = null;
		
		public readonly EntityReference msdyn_Work = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Type
            {
                WorkOpen = 192350000,
                WorkViewDuration = 192350001,
                WorkApply = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("equipment")]
	public class Equipment : Entity
    {
        public const string EntityLogicalName = "equipment";
        public Equipment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("equipmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["equipmentid"] = value;
            }
        }
		
		public readonly string Skills = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly string EMailAddress = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly Guid? EquipmentId = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("invoicedetail")]
	public class InvoiceDetail : Entity
    {
        public const string EntityLogicalName = "invoicedetail";
        public InvoiceDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invoicedetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invoicedetailid"] = value;
            }
        }
		
		public readonly Money msdyn_invoicedtilldate_Base = null;
		
		public readonly EntityReference ParentBundleIdRef = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference SalesOrderDetailId = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly string ProductName = null;
		
		public readonly EntityReference InvoiceId = null;
		
		public readonly string ProductDescription = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money msdyn_complimentaryamount = null;
		
		public readonly Guid? InvoiceDetailId = null;
		
		public readonly bool? WillCall = null;
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly decimal? QuantityBackordered = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsCopied = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly EntityReference msdyn_WorkOrderId = null;
		
		public readonly Money msdyn_nonchargeableamount_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly bool? InvoiceIsPriceLocked = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money msdyn_chargeableamount_Base = null;
		
		public readonly Money msdyn_contractlineamount = null;
		
		public readonly EntityReference msdyn_OrderInvoicingProduct = null;
		
		public readonly decimal? QuantityCancelled = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference msdyn_WorkOrderServiceId = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly Money msdyn_contractlineamount_Base = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Money Tax = null;
		
		public readonly EntityReference msdyn_AgreementInvoiceProduct = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly Money msdyn_chargeableamount = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly Money msdyn_nonchargeableamount = null;
		
		public readonly EntityReference msdyn_WorkOrderProductId = null;
		
		public readonly Money msdyn_invoicedtilldate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string InvoiceDetailName = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Currency = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue msdyn_BillingMethod = null;
		
		public readonly OptionSetValue msdyn_LineType = null;
		
		public readonly OptionSetValue InvoiceStateCode = null;
		
		public readonly DateTime? ActualDeliveryOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly string ShippingTrackingNumber = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly Money msdyn_complimentaryamount_Base = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly decimal? QuantityShipped = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly Guid? ProductAssociationId = null;

        public new static class Options
        {
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnCreate = 1,
                SkipPriceCalcOnUpdate = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum msdyn_BillingMethod
            {
                TimeAndMaterial = 192350000,
                FixedPrice = 192350001
            }
            public enum msdyn_LineType
            {
                ProjectServiceLine = 690970000,
                FieldServiceLine = 690970001
            }
            public enum InvoiceStateCode
            {

            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderdetailsgenerationqueue")]
	public class msdyn_workorderdetailsgenerationqueue : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_workorderdetailsgenerationqueue";
        public msdyn_workorderdetailsgenerationqueue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderdetailsgenerationqueueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderdetailsgenerationqueueid"] = value;
            }
        }
		
		public readonly string msdyn_ExceptionMessage = null;
		
		public readonly string msdyn_Booking = null;
		
		public readonly string msdyn_ExceptionTrace = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_AgreementBookingDate = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_SchDateOwnerId = null;
		
		public readonly string msdyn_WorkOrderDetails = null;
		
		public readonly string msdyn_WorkorderId = null;
		
		public readonly Guid? msdyn_workorderdetailsgenerationqueueId = null;
		
		public readonly bool? msdyn_Processed = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_odatav4ds")]
	public class msdyn_odatav4ds : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_odatav4ds";
        public msdyn_odatav4ds() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_odatav4dsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_odatav4dsid"] = value;
            }
        }
		
		public readonly string msdyn_parameter9name = null;
		
		public readonly string msdyn_parameter7name = null;
		
		public readonly bool? msdyn_isparameter8header = null;
		
		public readonly string msdyn_parameter1value = null;
		
		public readonly string msdyn_parameter3value = null;
		
		public readonly string msdyn_parameter2value = null;
		
		public readonly string msdyn_parameter5value = null;
		
		public readonly string msdyn_parameter9value = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_parameter6value = null;
		
		public readonly bool? msdyn_isparameter10header = null;
		
		public readonly bool? msdyn_isparameter6header = null;
		
		public readonly bool? msdyn_isparameter1header = null;
		
		public readonly string msdyn_parameter4name = null;
		
		public readonly string msdyn_parameter7value = null;
		
		public readonly bool? msdyn_isparameter5header = null;
		
		public readonly string msdyn_parameter6name = null;
		
		public readonly bool? msdyn_isparameter3header = null;
		
		public readonly bool? msdyn_returninlinecount = null;
		
		public readonly string msdyn_parameter8name = null;
		
		public readonly int? msdyn_timeout = null;
		
		public readonly bool? msdyn_paginationmode = null;
		
		public readonly string msdyn_parameter10value = null;
		
		public readonly string msdyn_parameter1name = null;
		
		public readonly string msdyn_parameter10name = null;
		
		public readonly string msdyn_parameter3name = null;
		
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_odatav4dsId = null;
		
		public readonly string msdyn_parameter2name = null;
		
		public readonly bool? msdyn_isparameter4header = null;
		
		public readonly string msdyn_parameter8value = null;
		
		public readonly OptionSetValue msdyn_paginationtype = null;
		
		public readonly bool? msdyn_isparameter7header = null;
		
		public readonly string msdyn_parameter5name = null;
		
		public readonly bool? msdyn_isparameter9header = null;
		
		public readonly string msdyn_parameter4value = null;
		
		public readonly bool? msdyn_isparameter2header = null;
		
		public readonly string msdyn_uri = null;

        public new static class Options
        {
            public enum msdyn_paginationtype
            {
                ClientSidePaging = 0,
                ServerSidePaging = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("socialactivity")]
	public class SocialActivity : Entity
    {
        public const string EntityLogicalName = "socialactivity";
        public SocialActivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string PostId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string InResponseTo = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ThreadId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference PostAuthorAccount = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly EntityReference PostFromProfileId = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? PostedOn = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly string PostURL = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly double? SentimentValue = null;
		
		public readonly string PostToProfileId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly string SocialAdditionalParams = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly OptionSetValue PostMessageType = null;
		
		public readonly EntityReference PostAuthor = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityReference ServiceId = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum PostMessageType
            {
                PublicMessage = 0,
                PrivateMessage = 1
            }
            public enum StatusCode
            {
                Completed = 1,
                Failed = 2,
                Processing = 3,
                Open = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sharedobjectsforread")]
	public class SharedObjectsForRead : Entity
    {
        public const string EntityLogicalName = "sharedobjectsforread";
        public SharedObjectsForRead() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharedobjectsforreadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharedobjectsforreadid"] = value;
            }
        }
		
		public readonly Guid? SharedObjectsForReadId = null;
		
		public readonly string UserIds = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderincident")]
	public class msdyn_workorderincident : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorderincident";
        public msdyn_workorderincident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderincidentid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		
		public readonly double? msdyn_TasksPercentCompleted = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_ItemsPopulated = null;
		
		public readonly bool? msdyn_IsPrimary = null;
		
		public readonly EntityReference msdyn_AgreementBookingIncident = null;
		
		public readonly Guid? msdyn_workorderincidentId = null;
		
		public readonly bool? msdyn_IncidentResolved = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly bool? msdyn_IsMobile = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlement")]
	public class Entitlement : Entity
    {
        public const string EntityLogicalName = "entitlement";
        public Entitlement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue KbAccessLevel = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly OptionSetValue entitytype = null;
		
		public readonly OptionSetValue AllocationTypeCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference SLAId = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly decimal? RemainingTerms = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string EmailAddress = null;
		
		public readonly string TraversedPath = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference msdyn_PriceListToApply = null;
		
		public readonly OptionSetValue DecreaseRemainingOn = null;
		
		public readonly OptionSetValue msdyn_AppliesTo = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? EntitlementId = null;
		
		public readonly double? msdyn_PercentDiscount = null;
		
		public readonly DateTime? StartDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? RestrictCaseCreation = null;
		
		public readonly int? msdyn_EntitlementPrioritization = null;
		
		public readonly EntityReference EntitlementTemplateId = null;

        public new static class Options
        {
            public enum KbAccessLevel
            {
                Standard = 0,
                Premium = 1,
                None = 2
            }
            public enum entitytype
            {
                WorkOrder = 192350000,
                Case = 0
            }
            public enum AllocationTypeCode
            {
                NumberOfCases = 0,
                NumberOfHours = 1,
                DiscountAndPriceList = 192350000
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1,
                Cancelled = 2,
                Expired = 3,
                Waiting = 4
            }
            public enum DecreaseRemainingOn
            {
                CaseResolution = 0,
                CaseCreation = 1
            }
            public enum msdyn_AppliesTo
            {
                WorkOrderProducts = 690970000,
                WorkOrderServices = 690970001,
                BothWorkOrderProductsServices = 690970002
            }
            public enum StatusCode
            {
                Draft = 0,
                Active = 1,
                Cancelled = 2,
                Expired = 3,
                Waiting = 1200
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("list")]
	public class List : Entity
    {
        public const string EntityLogicalName = "list";
        public List() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("listid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["listid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Money Cost_Base = null;
		
		public readonly string Description = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string ListName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? IgnoreInactiveListMembers = null;
		
		public readonly string Query = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? MemberType = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? MemberCount = null;
		
		public readonly bool? LockStatus = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ListId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? LastUsedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue CreatedFromCode = null;
		
		public readonly Money Cost = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Purpose = null;
		
		public readonly bool? Type = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Source = null;
		
		public readonly bool? DoNotSendOnOptOut = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum CreatedFromCode
            {
                Account = 1,
                Contact = 2,
                Lead = 4
            }
            public enum StatusCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelineresourcecategory")]
	public class msdyn_quotelineresourcecategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelineresourcecategory";
        public msdyn_quotelineresourcecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelineresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelineresourcecategoryid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_QuoteLineTransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_QuoteLineId = null;
		
		public readonly Guid? msdyn_quotelineresourcecategoryId = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("unresolvedaddress")]
	public class UnresolvedAddress : Entity
    {
        public const string EntityLogicalName = "unresolvedaddress";
        public UnresolvedAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("unresolvedaddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["unresolvedaddressid"] = value;
            }
        }
		
		public readonly string FullName = null;
		
		public readonly Guid? UnresolvedAddressId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Telephone = null;
		
		public readonly string EMailAddress = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("constraintbasedgroup")]
	public class ConstraintBasedGroup : Entity
    {
        public const string EntityLogicalName = "constraintbasedgroup";
        public ConstraintBasedGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("constraintbasedgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["constraintbasedgroupid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Constraints = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue GroupTypeCode = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ConstraintBasedGroupId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum GroupTypeCode
            {
                Static = 0,
                Dynamic = 1,
                Hidden = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingchange")]
	public class msdyn_bookingchange : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingchange";
        public msdyn_bookingchange() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingchangeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingchangeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_ChangesJSON = null;
		
		public readonly Guid? msdyn_bookingchangeId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_invoicelinetransaction")]
	public class msdyn_invoicelinetransaction : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_invoicelinetransaction";
        public msdyn_invoicelinetransaction() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_invoicelinetransactionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_invoicelinetransactionid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_InvoiceLineId = null;
		
		public readonly string msdyn_SalesContractLine = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly string msdyn_externaldescription = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly string msdyn_InvoiceLine = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly bool? msdyn_Correction = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly Money msdyn_invoiceamount_Base = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly EntityReference msdyn_OriginalInvoiceLineDetail = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly EntityReference msdyn_SalesContractLineId = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly Money msdyn_InvoiceAmount = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference msdyn_SalesContract = null;
		
		public readonly Money msdyn_previousamount_Base = null;
		
		public readonly EntityReference msdyn_contractorganizationalunitid = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Guid? msdyn_invoicelinetransactionId = null;
		
		public readonly Money msdyn_PreviousAmount = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_notesanalysisconfig")]
	public class msdyn_notesanalysisconfig : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_notesanalysisconfig";
        public msdyn_notesanalysisconfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_notesanalysisconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_notesanalysisconfigid"] = value;
            }
        }
		
		public readonly bool? msdyn_isadminsettingenabled = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_throttlelimit = null;
		
		public readonly bool? msdyn_aretermsaccepted = null;
		
		public readonly Guid? msdyn_notesanalysisconfigId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sqlencryptionaudit")]
	public class SqlEncryptionAudit : Entity
    {
        public const string EntityLogicalName = "sqlencryptionaudit";
        public SqlEncryptionAudit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("createdon")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["createdon"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("similarityrule")]
	public class SimilarityRule : Entity
    {
        public const string EntityLogicalName = "similarityrule";
        public SimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("similarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["similarityruleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly string BaseEntityName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly OptionSetValue MatchingEntityTypeCode = null;
		
		public readonly int? NgramSize = null;
		
		public readonly string MatchingEntityName = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string RuleConditionXml = null;
		
		public readonly string FetchXmlList = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ActiveRuleFetchXML = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? MaxKeyWords = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue BaseEntityTypeCode = null;
		
		public readonly bool? ExcludeInactiveRecords = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly Guid? SimilarityRuleIdUnique = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SimilarityRuleId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum MatchingEntityTypeCode
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum statecode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum BaseEntityTypeCode
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum statuscode
            {
                Draft = 0,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactioncategory")]
	public class msdyn_transactioncategory : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_transactioncategory";
        public msdyn_transactioncategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactioncategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactioncategoryid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_UnitGroup = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_transactioncategoryId = null;
		
		public readonly EntityReference msdyn_DefaultUnit = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("pricelevel")]
	public class PriceLevel : Entity
    {
        public const string EntityLogicalName = "pricelevel";
        public PriceLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pricelevelid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue msdyn_Entity = null;
		
		public readonly DateTime? BeginDate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference msdyn_CopiedFromPriceLevel = null;
		
		public readonly Guid? PriceLevelId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference msdyn_TimeUnit = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly OptionSetValue PaymentMethodCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue msdyn_Module = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? msdyn_BreakHoursBillable = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum msdyn_Entity
            {
                Organization = 192350000,
                Customer = 192350001,
                SalesDocument = 192350002,
                Project = 192350003
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PaymentMethodCode
            {
                DefaultValue = 1
            }
            public enum msdyn_Module
            {
                Cost = 192350000,
                Purchase = 192350001,
                Sales = 192350002
            }
            public enum StatusCode
            {
                Active = 100001,
                Inactive = 100002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bulkdeletefailure")]
	public class BulkDeleteFailure : Entity
    {
        public const string EntityLogicalName = "bulkdeletefailure";
        public BulkDeleteFailure() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeletefailureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeletefailureid"] = value;
            }
        }
		
		public readonly string ErrorDescription = null;
		
		public readonly Guid? BulkDeleteFailureId = null;
		
		public readonly int? OrderedQueryIndex = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference BulkDeleteOperationId = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projecttaskstatususer")]
	public class msdyn_projecttaskstatususer : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projecttaskstatususer";
        public msdyn_projecttaskstatususer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projecttaskstatususerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projecttaskstatususerid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_expectedcompletiondate = null;
		
		public readonly OptionSetValue msdyn_projecttaskstatusindicator = null;
		
		public readonly Guid? msdyn_projecttaskstatususerId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_projecttaskId = null;
		
		public readonly double? msdyn_expectedhourstocomplete = null;
		
		public readonly string msdyn_description = null;
		
		public readonly int? msdyn_percentcomplete = null;
		
		public readonly EntityReference msdyn_BookableResource = null;
		
		public readonly bool? msdyn_iscompleted = null;

        public new static class Options
        {
            public enum msdyn_projecttaskstatusindicator
            {
                Green = 192350000,
                Yellow = 192350001,
                Red = 192350002,
                None = 192350003
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotprovider")]
	public class msdyn_iotprovider : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotprovider";
        public msdyn_iotprovider() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotproviderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotproviderid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_IoTSource = null;
		
		public readonly string msdyn_RegisterAction = null;
		
		public readonly string msdyn_SendCommandAction = null;
		
		public readonly Guid? msdyn_iotproviderId = null;
		
		public readonly string msdyn_UpdateDeviceDataAction = null;
		
		public readonly string msdyn_PullDeviceDataAction = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_IoTSource
            {
                Other = 192350000,
                AzureIoTSuite = 192350001,
                AzureIoTCentral = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementinvoiceproduct")]
	public class msdyn_agreementinvoiceproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementinvoiceproduct";
        public msdyn_agreementinvoiceproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementinvoiceproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementinvoiceproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly Guid? msdyn_agreementinvoiceproductId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_AgreementInvoiceSetup = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rtvsubstatus")]
	public class msdyn_rtvsubstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rtvsubstatus";
        public msdyn_rtvsubstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rtvsubstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rtvsubstatusid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_DefaultSubStatus = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly Guid? msdyn_rtvsubstatusId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_SystemStatus
            {
                Draft = 690970000,
                Approved = 690970001,
                Shipped = 690970002,
                Received = 690970003,
                Canceled = 690970004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_warehouse")]
	public class msdyn_warehouse : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_warehouse";
        public msdyn_warehouse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_warehouseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_warehouseid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? msdyn_warehouseId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("orderclose")]
	public class OrderClose : Entity
    {
        public const string EntityLogicalName = "orderclose";
        public OrderClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly int? Revision = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string OrderNumber = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Category = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectpricelist")]
	public class msdyn_projectpricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projectpricelist";
        public msdyn_projectpricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectpricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectpricelistid"] = value;
            }
        }
		
		public readonly Guid? msdyn_projectpricelistId = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_Project = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("postlike")]
	public class PostLike : Entity
    {
        public const string EntityLogicalName = "postlike";
        public PostLike() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postlikeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postlikeid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference PostId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? PostLikeId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgebaserecord")]
	public class KnowledgeBaseRecord : Entity
    {
        public const string EntityLogicalName = "knowledgebaserecord";
        public KnowledgeBaseRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgebaserecordid"] = value;
            }
        }
		
		public readonly string PublicUrl = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string PrivateUrl = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string UniqueId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? KnowledgeBaseRecordId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuserprincipals")]
	public class SystemUserPrincipals : Entity
    {
        public const string EntityLogicalName = "systemuserprincipals";
        public SystemUserPrincipals() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprincipalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprincipalid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserPrincipalId = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("usersearchfacet")]
	public class UserSearchFacet : Entity
    {
        public const string EntityLogicalName = "usersearchfacet";
        public UserSearchFacet() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usersearchfacetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usersearchfacetid"] = value;
            }
        }
		
		public readonly int? FacetOrder = null;
		
		public readonly string EntityName = null;
		
		public readonly string AttributeName = null;
		
		public readonly Guid? UserSearchFacetId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotpropertydefinition")]
	public class msdyn_iotpropertydefinition : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotpropertydefinition";
        public msdyn_iotpropertydefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotpropertydefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotpropertydefinitionid"] = value;
            }
        }
		
		public readonly string msdyn_AdditionalProperties = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly EntityReference msdyn_ParentProperty = null;
		
		public readonly bool? msdyn_Visible = null;
		
		public readonly Guid? msdyn_iotpropertydefinitionId = null;
		
		public readonly bool? msdyn_Editable = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Type
            {
                Object = 192350001,
                String = 192350000,
                DateAndTime = 192350002,
                Boolean = 192350003,
                WholeNumber = 192350004,
                DecimalNumber = 192350005
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dataperformance")]
	public class DataPerformance : Entity
    {
        public const string EntityLogicalName = "dataperformance";
        public DataPerformance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dataperformanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dataperformanceid"] = value;
            }
        }
		
		public readonly decimal? Weight = null;
		
		public readonly decimal? MedianTime = null;
		
		public readonly string Operation = null;
		
		public readonly string RealizedOptimizationImpact = null;
		
		public readonly decimal? OptimizationStorage = null;
		
		public readonly decimal? MaxTime = null;
		
		public readonly string ExecutionPeriod = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? DataPerformanceId = null;
		
		public readonly string LastActionResult = null;
		
		public readonly decimal? EstimatedOptimizationImpact = null;
		
		public readonly int? Count = null;
		
		public readonly string Solution = null;
		
		public readonly string Component = null;
		
		public readonly bool? AnyOptimizationApplied = null;
		
		public readonly string Entity = null;
		
		public readonly DateTime? LastOptimizationDate = null;
		
		public readonly string OptimizationStatus = null;
		
		public readonly bool? AnyOptimizationAvailable = null;
		
		public readonly decimal? MinTime = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fact")]
	public class msdyn_fact : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_fact";
        public msdyn_fact() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_factid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_factid"] = value;
            }
        }
		
		public readonly decimal? msdyn_EstNoChargeCostQuantity = null;
		
		public readonly decimal? msdyn_totalhours = null;
		
		public readonly Money msdyn_ActChargeableUnbilledSalesAmount = null;
		
		public readonly Guid? msdyn_factId = null;
		
		public readonly EntityReference msdyn_estimatelineid = null;
		
		public readonly Money msdyn_ActNoChargeCostAmount = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly Money msdyn_estchargeablebilledsalesamount_Base = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly decimal? msdyn_EstNoChargeUnbilledSalesQuantity = null;
		
		public readonly string msdyn_SalesContractLine = null;
		
		public readonly Money msdyn_earnedrevenue_Base = null;
		
		public readonly Money msdyn_EstNonChargeableUnbilledSalesAmount = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly Money msdyn_ActNoChargeBilledSalesAmount = null;
		
		public readonly Money msdyn_actnonchargeableunbilledsalesamount_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_estnonchargeableunbilledsalesamount_Base = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly decimal? msdyn_EstNoChargeBilledSalesQuantity = null;
		
		public readonly Money msdyn_actchargeablecostamount_Base = null;
		
		public readonly Money msdyn_EstChargeableBilledSalesAmount = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly Money msdyn_estnochargebilledsalesamount_Base = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly Money msdyn_estchargeablecostamount_Base = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly Money msdyn_actchargeablebilledsalesamount_Base = null;
		
		public readonly EntityReference msdyn_Estimate = null;
		
		public readonly Money msdyn_EstNonChargeableCostAmount = null;
		
		public readonly Money msdyn_ActChargeableBilledSalesAmount = null;
		
		public readonly decimal? msdyn_EstChargeableCostQuantity = null;
		
		public readonly Money msdyn_EstNoChargeCostAmount = null;
		
		public readonly Money msdyn_actnonchargeablecostamount_Base = null;
		
		public readonly Money msdyn_ActNonChargeableUnbilledSalesAmount = null;
		
		public readonly DateTime? msdyn_StartDate = null;
		
		public readonly Money msdyn_EstNoChargeUnbilledSalesAmount = null;
		
		public readonly Money msdyn_EstChargeableUnbilledSalesAmount = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly Money msdyn_actnochargebilledsalesamount_Base = null;
		
		public readonly decimal? msdyn_ActChargeableBilledSalesQuantity = null;
		
		public readonly decimal? msdyn_ActNoChargeCostQuantity = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_actnochargeunbilledsalesamount_Base = null;
		
		public readonly decimal? msdyn_ActNoChargeUnbilledSalesQuantity = null;
		
		public readonly EntityReference msdyn_SalesContractLineId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly Money msdyn_EstNoChargeBilledSalesAmount = null;
		
		public readonly decimal? msdyn_EstChargeableUnbilledSalesQuantity = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly DateTime? msdyn_EndDate = null;
		
		public readonly decimal? msdyn_ActNonChargeableCostQuantity = null;
		
		public readonly Money msdyn_actnochargecostamount_Base = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly Money msdyn_estnochargeunbilledsalesamount_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? msdyn_EstNonChargeableUnbilledSalesQuantity = null;
		
		public readonly Money msdyn_earnedrevenue = null;
		
		public readonly Money msdyn_EstChargeableCostAmount = null;
		
		public readonly Money msdyn_ActNonChargeableCostAmount = null;
		
		public readonly EntityReference msdyn_SalesContract = null;
		
		public readonly decimal? msdyn_EstNonChargeableCostQuantity = null;
		
		public readonly Money msdyn_estchargeableunbilledsalesamount_Base = null;
		
		public readonly decimal? msdyn_ActChargeableCostQuantity = null;
		
		public readonly Money msdyn_grossmargin = null;
		
		public readonly Money msdyn_estnonchargeablecostamount_Base = null;
		
		public readonly decimal? msdyn_ActNoChargeBilledSalesQuantity = null;
		
		public readonly Money msdyn_totalcost = null;
		
		public readonly decimal? msdyn_ActNonChargeableUnbilledSalesQuantity = null;
		
		public readonly Money msdyn_estnochargecostamount_Base = null;
		
		public readonly OptionSetValue msdyn_FactType = null;
		
		public readonly Money msdyn_grossmargin_Base = null;
		
		public readonly decimal? msdyn_ActChargeableUnbilledSalesQuantity = null;
		
		public readonly Money msdyn_ActChargeableCostAmount = null;
		
		public readonly Money msdyn_actchargeableunbilledsalesamount_Base = null;
		
		public readonly Money msdyn_ActNoChargeUnbilledSalesAmount = null;
		
		public readonly decimal? msdyn_EstChargeableBilledSalesQuantity = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;

        public new static class Options
        {
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_FactType
            {
                Actual = 192350000,
                Estimate = 192350001
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_taxcode")]
	public class msdyn_taxcode : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_taxcode";
        public msdyn_taxcode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_taxcodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_taxcodeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_ProductsTaxable = null;
		
		public readonly bool? msdyn_AgreementTaxable = null;
		
		public readonly double? msdyn_TaxRate = null;
		
		public readonly bool? msdyn_ServicesTaxable = null;
		
		public readonly bool? msdyn_ActasTaxGroup = null;
		
		public readonly Guid? msdyn_taxcodeId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("textanalyticsentitymapping")]
	public class TextAnalyticsEntityMapping : Entity
    {
        public const string EntityLogicalName = "textanalyticsentitymapping";
        public TextAnalyticsEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("textanalyticsentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["textanalyticsentitymappingid"] = value;
            }
        }
		
		public readonly bool? IsTextMatchMapping = null;
		
		public readonly EntityReference TopicModelConfigurationId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string EntityDisplayName = null;
		
		public readonly Guid? TextAnalyticsEntityMappingId = null;
		
		public readonly string Field = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? TextAnalyticsEntityMappingIdUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Entity = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference AdvancedSimilarityRuleId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue FieldPickList = null;
		
		public readonly OptionSetValue EntityPickList = null;
		
		public readonly int? ModelType = null;
		
		public readonly string FieldDisplayName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference KnowledgeSearchModelId = null;
		
		public readonly string RelationshipName = null;
		
		public readonly EntityReference SimilarityRuleId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FieldPickList
            {
                No = 1,
                Yes = 2
            }
            public enum EntityPickList
            {
                No = 1,
                Yes = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("wizardaccessprivilege")]
	public class WizardAccessPrivilege : Entity
    {
        public const string EntityLogicalName = "wizardaccessprivilege";
        public WizardAccessPrivilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardaccessprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardaccessprivilegeid"] = value;
            }
        }
		
		public readonly string PrivilegeName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? WizardAccessPrivilegeId = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string EntityName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference WebWizardId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_989e9b1857e24af18787d5143b67523b")]
	public class msdyn_bpf_989e9b1857e24af18787d5143b67523b : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_989e9b1857e24af18787d5143b67523b";
        public msdyn_bpf_989e9b1857e24af18787d5143b67523b() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly EntityReference bpf_incidentid = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference bpf_msdyn_workorderid = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fieldservicesetting")]
	public class msdyn_fieldservicesetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_fieldservicesetting";
        public msdyn_fieldservicesetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_fieldservicesettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_fieldservicesettingid"] = value;
            }
        }
		
		public readonly string msdyn_WorkOrderPrefix = null;
		
		public readonly EntityReference msdyn_DefaultCanceledBookingStatus = null;
		
		public readonly int? msdyn_DatabaseVersion = null;
		
		public readonly bool? msdyn_SAAutoFilterServiceTerritory = null;
		
		public readonly string msdyn_PurchaseOrderPrefix = null;
		
		public readonly int? msdyn_InventoryTransferStartingNumber = null;
		
		public readonly int? msdyn_PurchaseOrderStartingNumber = null;
		
		public readonly DateTime? msdyn_PostponeNumberCleanupUntil = null;
		
		public readonly bool? msdyn_DeactivateWorkOrderWhenCanceled = null;
		
		public readonly int? msdyn_RMAStartingNumber = null;
		
		public readonly EntityReference msdyn_DefaultScheduledBookingStatus = null;
		
		public readonly string msdyn_SchedulerFieldServiceSlotTextTemplate = null;
		
		public readonly string msdyn_SchedulerUnscheduledView = null;
		
		public readonly string msdyn_BookingAlertTemplate = null;
		
		public readonly bool? msdyn_DeactivateWorkOrderWhenPosted = null;
		
		public readonly bool? msdyn_AutoGeoCodeAddresses = null;
		
		public readonly string msdyn_InventoryTransferPrefix = null;
		
		public readonly string msdyn_RMAPrefix = null;
		
		public readonly string msdyn_CustomGPSTimestampfield = null;
		
		public readonly string msdyn_sdkapimapkey = null;
		
		public readonly string msdyn_SchedulerCoreDetailsView = null;
		
		public readonly string msdyn_CustomGPSLatitudefield = null;
		
		public readonly EntityReference msdyn_DefaultWarehouse = null;
		
		public readonly string msdyn_InventoryAdjustmentPrefix = null;
		
		public readonly int? msdyn_AgreementStartingNumber = null;
		
		public readonly string msdyn_AdvancedSettings = null;
		
		public readonly string msdyn_SchedulerResourceTooltipView = null;
		
		public readonly Guid? msdyn_fieldservicesettingId = null;
		
		public readonly string msdyn_AgreementPrefix = null;
		
		public readonly int? msdyn_EntityNumberLength = null;
		
		public readonly int? msdyn_DefaultRadiusValue = null;
		
		public readonly OptionSetValue msdyn_DefaultWorkOrderCompletedStatus = null;
		
		public readonly EntityReference msdyn_TravelChargeItemId = null;
		
		public readonly OptionSetValue msdyn_ProductCostOrder = null;
		
		public readonly OptionSetValue msdyn_UseofProductsOutofStock = null;
		
		public readonly bool? msdyn_AutoAllocateEstimatedProducts = null;
		
		public readonly bool? msdyn_EnableLegacyScheduleAssistant = null;
		
		public readonly int? msdyn_GenerateInvoiceDatesXMonthsInAdvance = null;
		
		public readonly EntityReference msdyn_WorkPayType = null;
		
		public readonly EntityReference msdyn_OvertimePayType = null;
		
		public readonly string msdyn_SchedulerFieldServiceDetailsView = null;
		
		public readonly string msdyn_SchedulerBusinessUnitTooltipView = null;
		
		public readonly string msdyn_SchedulerBusinessUnitDetailsView = null;
		
		public readonly bool? msdyn_DisableRemoteAssistBookingStatusChanges = null;
		
		public readonly int? msdyn_GenerateAgreementInvoicesXDaysInAdvance = null;
		
		public readonly bool? msdyn_PurchaseOrderApprovalRequired = null;
		
		public readonly int? msdyn_GenerateBookingDatesXMonthsInAdvance = null;
		
		public readonly bool? msdyn_DeactivateBookingWhenCanceled = null;
		
		public readonly string msdyn_CustomGPSResourcefield = null;
		
		public readonly string msdyn_UnscheduledWOTooltipsViewId = null;
		
		public readonly string msdyn_SchedulerResourceDetailsView = null;
		
		public readonly int? msdyn_InventoryAdjustmentStartingNumber = null;
		
		public readonly bool? msdyn_DefaultRadiusUnit = null;
		
		public readonly string msdyn_CustomGPSLocationentity = null;
		
		public readonly OptionSetValue msdyn_UndefinedBookingLocation = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_autogeneratewoforagreementbooking")]
		public readonly bool? msdyn_AutoGenerateWOforAgreementBookings = null;
		
		public readonly int? msdyn_ResourcesSynchronizationTimeout = null;
		
		public readonly string msdyn_RTVPrefix = null;
		
		public readonly string msdyn_SchedulerCoreTooltipView = null;
		
		public readonly EntityReference msdyn_BreakPayType = null;
		
		public readonly string msdyn_CustomGPSLongitudefield = null;
		
		public readonly EntityReference msdyn_BusinessClosurePayType = null;
		
		public readonly bool? msdyn_AutoNumberingOptIn = null;
		
		public readonly int? msdyn_GenerateAgreementWOXDaysInAdvance = null;
		
		public readonly EntityReference msdyn_TravelPayType = null;
		
		public readonly int? msdyn_DefaultBookingDuration = null;
		
		public readonly int? msdyn_RTVStartingNumber = null;
		
		public readonly int? msdyn_WorkOrderStartingNumber = null;
		
		public readonly OptionSetValue msdyn_HistoricalDataFilter = null;
		
		public readonly OptionSetValue msdyn_WorkOrderInvoiceCreation = null;
		
		public readonly string msdyn_SchedulerCoreSlotTextTemplate = null;
		
		public readonly int? msdyn_NotificationTimeout = null;
		
		public readonly int? msdyn_GPSLocationExpiresAfterXMinutes = null;
		
		public readonly bool? msdyn_EnableSuggestedDuration = null;
		
		public readonly bool? msdyn_DeactivateBookingWhenCompleted = null;
		
		public readonly bool? msdyn_EnableAddressSuggestions = null;
		
		public readonly bool? msdyn_TravelTimeRescheduling = null;
		
		public readonly string msdyn_SchedulerFieldServiceTooltipView = null;
		
		public readonly bool? msdyn_CustomGPSData = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_AgreementRecordGeneration = null;
		
		public readonly bool? msdyn_CancelCurrentSlotsWhenMoving = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_DefaultWorkOrderCompletedStatus
            {
                OpenUnscheduled = 690970000,
                OpenScheduled = 690970001,
                OpenInProgress = 690970002,
                OpenCompleted = 690970003,
                ClosedPosted = 690970004,
                ClosedCanceled = 690970005
            }
            public enum msdyn_ProductCostOrder
            {
                StandardCurrent = 690970000,
                CurrentStandard = 690970001
            }
            public enum msdyn_UseofProductsOutofStock
            {
                Confirm = 690970000,
                Restrict = 690970001
            }
            public enum msdyn_UndefinedBookingLocation
            {
                PreviousKnownLocation = 690970000,
                IgnoreLocation = 690970001
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_HistoricalDataFilter
            {
                Last3Months = 100000000,
                Last6Months = 100000001,
                Last12Months = 100000002,
                All = 100000003
            }
            public enum msdyn_WorkOrderInvoiceCreation
            {
                OnWorkOrderPosted = 690970001,
                Never = 690970000
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("territory")]
	public class Territory : Entity
    {
        public const string EntityLogicalName = "territory";
        public Territory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("territoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["territoryid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ManagerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? TerritoryId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("audit")]
	public class Audit : Entity
    {
        public const string EntityLogicalName = "audit";
        public Audit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("auditid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["auditid"] = value;
            }
        }
		
		public readonly string AttributeMask = null;
		
		public readonly OptionSetValue Operation = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly Guid? TransactionId = null;
		
		public readonly string UserAdditionalInfo = null;
		
		public readonly Guid? AuditId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue Action = null;
		
		public readonly string ChangeData = null;
		
		public readonly EntityReference CallingUserId = null;

        public new static class Options
        {
            public enum Operation
            {
                Create = 1,
                Update = 2,
                Delete = 3,
                Access = 4
            }
            public enum Action
            {
                Unknown = 0,
                Create = 1,
                Update = 2,
                Delete = 3,
                Activate = 4,
                Deactivate = 5,
                Cascade = 11,
                Merge = 12,
                Assign = 13,
                Share = 14,
                Retrieve = 15,
                Close = 16,
                Cancel = 17,
                Complete = 18,
                Resolve = 20,
                Reopen = 21,
                Fulfill = 22,
                Paid = 23,
                Qualify = 24,
                Disqualify = 25,
                Submit = 26,
                Reject = 27,
                Approve = 28,
                Invoice = 29,
                Hold = 30,
                AddMember = 31,
                RemoveMember = 32,
                AssociateEntities = 33,
                DisassociateEntities = 34,
                AddMembers = 35,
                RemoveMembers = 36,
                AddItem = 37,
                RemoveItem = 38,
                AddSubstitute = 39,
                RemoveSubstitute = 40,
                SetState = 41,
                Renew = 42,
                Revise = 43,
                Win = 44,
                Lose = 45,
                InternalProcessing = 46,
                Reschedule = 47,
                ModifyShare = 48,
                Unshare = 49,
                Book = 50,
                GenerateQuoteFromOpportunity = 51,
                AddToQueue = 52,
                AssignRoleToTeam = 53,
                RemoveRoleFromTeam = 54,
                AssignRoleToUser = 55,
                RemoveRoleFromUser = 56,
                AddPrivilegesToRole = 57,
                RemovePrivilegesFromRole = 58,
                ReplacePrivilegesInRole = 59,
                ImportMappings = 60,
                Clone = 61,
                SendDirectEmail = 62,
                EnabledForOrganization = 63,
                UserAccessViaWeb = 64,
                UserAccessViaWebServices = 65,
                DeleteEntity = 100,
                DeleteAttribute = 101,
                AuditChangeAtEntityLevel = 102,
                AuditChangeAtAttributeLevel = 103,
                AuditChangeAtOrgLevel = 104,
                EntityAuditStarted = 105,
                AttributeAuditStarted = 106,
                AuditEnabled = 107,
                EntityAuditStopped = 108,
                AttributeAuditStopped = 109,
                AuditDisabled = 110,
                AuditLogDeletion = 111,
                UserAccessAuditStarted = 112,
                UserAccessAuditStopped = 113
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contact")]
	public class Contact : Entity
    {
        public const string EntityLogicalName = "contact";
        public Contact() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactid"] = value;
            }
        }
		
		public readonly Guid? ContactId = null;
		
		public readonly string EMailAddress3 = null;
		
		public readonly string EMailAddress2 = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly OptionSetValue Address3_AddressTypeCode = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address3_Line1 = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly string ManagerPhone = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money Aging90 = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly bool? msdyn_gdproptout = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly string YomiFullName = null;
		
		public readonly string Company = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly Money Aging30 = null;
		
		public readonly string Address3_Telephone1 = null;
		
		public readonly string Address3_Line3 = null;
		
		public readonly string Address2_County = null;
		
		public readonly bool? CreditOnHold = null;
		
		public readonly bool? DoNotBulkPostalMail = null;
		
		public readonly string Address3_Telephone3 = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly OptionSetValue GenderCode = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string Address3_PrimaryContactName = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue PreferredAppointmentTimeCode = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string Address2_Country = null;
		
		public readonly int? TeamsFollowed = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference PreferredServiceId = null;
		
		public readonly string AssistantPhone = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly double? Address3_Longitude = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue Address1_FreightTermsCode = null;
		
		public readonly string Address3_Fax = null;
		
		public readonly Money CreditLimit = null;
		
		public readonly DateTime? BirthDate = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue Address3_ShippingMethodCode = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address3_UPSZone = null;
		
		public readonly OptionSetValue CustomerTypeCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address3_Composite = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Address2_City = null;
		
		public readonly string Address3_Line2 = null;
		
		public readonly bool? MarketingOnly = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly Money Aging90_Base = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly string FirstName = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly string Callback = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly OptionSetValue EducationCode = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly string EmployeeId = null;
		
		public readonly string GovernmentId = null;
		
		public readonly bool? IsAutoCreate = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address1_County = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? DoNotEMail = null;
		
		public readonly Money Aging60_Base = null;
		
		public readonly string Pager = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly EntityReference DefaultPriceLevelId = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Money CreditLimit_Base = null;
		
		public readonly Money AnnualIncome = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string MiddleName = null;
		
		public readonly string Address3_Telephone2 = null;
		
		public readonly Money Aging60 = null;
		
		public readonly OptionSetValue msdyn_orgchangestatus = null;
		
		public readonly OptionSetValue AccountRoleCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly string Suffix = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string ExternalUserIdentifier = null;
		
		public readonly int? Address3_UTCOffset = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string JobTitle = null;
		
		public readonly string NickName = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string ManagerName = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly double? Address3_Latitude = null;
		
		public readonly bool? IsBackofficeCustomer = null;
		
		public readonly string ChildrensNames = null;
		
		public readonly string Fax = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly string AssistantName = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Address3_Country = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly OptionSetValue Address3_FreightTermsCode = null;
		
		public readonly bool? Merged = null;
		
		public readonly string Address3_County = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly string FtpSiteUrl = null;
		
		public readonly EntityReference PreferredEquipmentId = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly string Address1_PrimaryContactName = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ParentCustomerId = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly Money AnnualIncome_Base = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly string SpousesName = null;
		
		public readonly string Address3_Name = null;
		
		public readonly string Salutation = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly OptionSetValue CustomerSizeCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address3_PostalCode = null;
		
		public readonly OptionSetValue PreferredAppointmentDayCode = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Home2 = null;
		
		public readonly string Address3_StateOrProvince = null;
		
		public readonly DateTime? Anniversary = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue HasChildrenCode = null;
		
		public readonly string Telephone2 = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly OptionSetValue FamilyStatusCode = null;
		
		public readonly string Department = null;
		
		public readonly EntityReference PreferredSystemUserId = null;
		
		public readonly string Address3_City = null;
		
		public readonly string Business2 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly Money Aging30_Base = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address3_PostOfficeBox = null;
		
		public readonly OptionSetValue LeadSourceCode = null;
		
		public readonly OptionSetValue Address2_FreightTermsCode = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string LastName = null;
		
		public readonly OptionSetValue TerritoryCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? NumberOfChildren = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly string Address2_PrimaryContactName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FullName = null;
		
		public readonly Guid? Address3_AddressId = null;

        public new static class Options
        {
            public enum Address3_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum GenderCode
            {
                Male = 1,
                Female = 2
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum Address3_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum CustomerTypeCode
            {
                DefaultValue = 1
            }
            public enum EducationCode
            {
                DefaultValue = 1
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum msdyn_orgchangestatus
            {
                No = 0,
                Yes = 1,
                Ignore = 2
            }
            public enum AccountRoleCode
            {
                DecisionMaker = 1,
                Employee = 2,
                Influencer = 3
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address3_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }
            public enum HasChildrenCode
            {
                DefaultValue = 1
            }
            public enum FamilyStatusCode
            {
                Single = 1,
                Married = 2,
                Divorced = 3,
                Widowed = 4
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum LeadSourceCode
            {
                DefaultValue = 1
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutionhealthruleset")]
	public class msdyn_solutionhealthruleset : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthruleset";
        public msdyn_solutionhealthruleset() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthrulesetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthrulesetid"] = value;
            }
        }
		
		public readonly string msdyn_uniquename = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_solutionhealthrulesetId = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rmareceiptproduct")]
	public class msdyn_rmareceiptproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rmareceiptproduct";
        public msdyn_rmareceiptproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rmareceiptproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rmareceiptproductid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_RMAProduct = null;
		
		public readonly EntityReference msdyn_RTV = null;
		
		public readonly Guid? msdyn_rmareceiptproductId = null;
		
		public readonly EntityReference msdyn_RTVProduct = null;
		
		public readonly EntityReference msdyn_RMA = null;
		
		public readonly EntityReference msdyn_RMAReceipt = null;
		
		public readonly double? msdyn_Quantity = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importmap")]
	public class ImportMap : Entity
    {
        public const string EntityLogicalName = "importmap";
        public ImportMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importmapid"] = value;
            }
        }
		
		public readonly OptionSetValue TargetEntity = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string MapCustomizations = null;
		
		public readonly string Description = null;
		
		public readonly string TargetUserIdentifierForSourceCRMUserLink = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsWizardCreated = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Source = null;
		
		public readonly OptionSetValue SourceType = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ImportMapIdUnique = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string SourceUserIdentifierForSourceDataSourceUserLink = null;
		
		public readonly OptionSetValue EntitiesPerFile = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ImportMapId = null;
		
		public readonly bool? IsValidForImport = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ImportMapType = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string SourceUserIdentifierForSourceCRMUserLink = null;

        public new static class Options
        {
            public enum TargetEntity
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum SourceType
            {
                MapForSalesForceComFullDataExport = 1,
                MapForSalesForceComReportExport = 2,
                MapForSalesForceComContactAndAccountReportExport = 3,
                MicrosoftOfficeOutlook2010WithBusinessContactManager = 4,
                GenericMapForContactAndAccount = 5
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum EntitiesPerFile
            {
                SingleEntityPerFile = 1,
                MultipleEntitiesPerFile = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ImportMapType
            {
                Standard = 1,
                OutOfBox = 2,
                InProcess = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("resourcegroup")]
	public class ResourceGroup : Entity
    {
        public const string EntityLogicalName = "resourcegroup";
        public ResourceGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcegroupid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue GroupTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? ResourceGroupId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;

        public new static class Options
        {
            public enum GroupTypeCode
            {
                Static = 0,
                Dynamic = 1,
                Hidden = 2
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dependencyfeature")]
	public class DependencyFeature : Entity
    {
        public const string EntityLogicalName = "dependencyfeature";
        public DependencyFeature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyfeatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyfeatureid"] = value;
            }
        }
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? DependencyFeatureId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? DependencyFeatureIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_surveyresponse")]
	public class msfp_surveyresponse : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_surveyresponse";
        public msfp_surveyresponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly string msfp_sourcesurveyidentifier = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly EntityReference msfp_surveyid = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msfp_surveyinviteid = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string msfp_embedcontextparameters = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly string msfp_respondentemailaddress = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly DateTime? msfp_Startdate = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string msfp_respondent = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly int? msfp_npsscore = null;
		
		public readonly string Description = null;
		
		public readonly string msfp_otherproperties = null;
		
		public readonly string msfp_locale = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? msfp_submitdate = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string msfp_sourceresponseidentifier = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly OptionSetValue msfp_sentiment = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string msfp_name = null;
		
		public readonly string msfp_language = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum msfp_sentiment
            {
                Positive = 647390000,
                Neutral = 647390001,
                Negative = 647390002
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessagerequest")]
	public class SdkMessageRequest : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequest";
        public SdkMessageRequest() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SdkMessageRequestId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly EntityReference SdkMessagePairId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SdkMessageRequestIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelaccessprofileruleitem")]
	public class ChannelAccessProfileRuleItem : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileruleitem";
        public ChannelAccessProfileRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleitemid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference AssociatedChannelAccessProfile = null;
		
		public readonly string ConditionXml = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ChannelAccessProfileRuleItemIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? ChannelAccessProfileRuleItemId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ChannelAccessProfileRuleId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importentitymapping")]
	public class ImportEntityMapping : Entity
    {
        public const string EntityLogicalName = "importentitymapping";
        public ImportEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importentitymappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ImportEntityMappingIdUnique = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly OptionSetValue DeDupe = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly Guid? ImportEntityMappingId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ImportMapId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum DeDupe
            {
                Ignore = 1,
                Eliminate = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_untrackedappointment")]
	public class msdyn_untrackedappointment : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_untrackedappointment";
        public msdyn_untrackedappointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_untrackedappointmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_untrackedappointmentid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_untrackedappointmentId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("serviceappointment")]
	public class ServiceAppointment : Entity
    {
        public const string EntityLogicalName = "serviceappointment";
        public ServiceAppointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Category = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly string Location = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly bool? IsAllDayEvent = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Requested = 1,
                Tentative = 2,
                Pending = 3,
                Reserved = 4,
                InProgress = 6,
                Arrived = 7,
                Completed = 8,
                Canceled = 9,
                NoShow = 10
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourcecategorypricelevel")]
	public class msdyn_resourcecategorypricelevel : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_resourcecategorypricelevel";
        public msdyn_resourcecategorypricelevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourcecategorypricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourcecategorypricelevelid"] = value;
            }
        }
		
		public readonly Money msdyn_priceinprimaryunit_Base = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly EntityReference msdyn_organizationalunit = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_transactioncategory = null;
		
		public readonly EntityReference msdyn_PrimaryUnit = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_resourcecategorypricelevelId = null;
		
		public readonly decimal? msdyn_percent = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly Money msdyn_PriceInPrimaryUnit = null;
		
		public readonly OptionSetValue msdyn_pricecalculation = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_pricecalculation
            {
                PricePerUnit = 192350000,
                AtCost = 192350001,
                MarkupPercentage = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("actioncarduserstate")]
	public class ActionCardUserState : Entity
    {
        public const string EntityLogicalName = "actioncarduserstate";
        public ActionCardUserState() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncarduserstateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncarduserstateid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ActionCardId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue State = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? ActionCardUserStateId = null;

        public new static class Options
        {
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workordertype")]
	public class msdyn_workordertype : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workordertype";
        public msdyn_workordertype() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workordertypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workordertypeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly Guid? msdyn_workordertypeId = null;
		
		public readonly bool? msdyn_IncidentRequired = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookableresourceassociation")]
	public class msdyn_bookableresourceassociation : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookableresourceassociation";
        public msdyn_bookableresourceassociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookableresourceassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookableresourceassociationid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_FromDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly DateTime? msdyn_ToDate = null;
		
		public readonly Guid? msdyn_bookableresourceassociationId = null;
		
		public readonly EntityReference msdyn_Resource1 = null;
		
		public readonly EntityReference msdyn_Resource2 = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Type
            {
                WorkLocation = 192350000
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("attachment")]
	public class Attachment : Entity
    {
        public const string EntityLogicalName = "attachment";
        public Attachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attachmentid"] = value;
            }
        }
		
		public readonly string Prefix = null;
		
		public readonly int? FileSize = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Subject = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FileName = null;
		
		public readonly Guid? AttachmentId = null;
		
		public readonly string MimeType = null;
		
		public readonly string Body = null;
		
		public readonly string StoragePointer = null;
		
		public readonly string FilePointer = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_geofencingsettings")]
	public class msdyn_geofencingsettings : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_geofencingsettings";
        public msdyn_geofencingsettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_geofencingsettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_geofencingsettingsid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_UnitOfMeasure = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_geofencingsettingsId = null;
		
		public readonly double? msdyn_minradius = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("traceassociation")]
	public class TraceAssociation : Entity
    {
        public const string EntityLogicalName = "traceassociation";
        public TraceAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceassociationid"] = value;
            }
        }
		
		public readonly Guid? TraceAssociationId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference TraceLogId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bulkoperationlog")]
	public class BulkOperationLog : Entity
    {
        public const string EntityLogicalName = "bulkoperationlog";
        public BulkOperationLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkoperationlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkoperationlogid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string AdditionalInfo = null;
		
		public readonly EntityReference BulkOperationId = null;
		
		public readonly string ErrorDescriptionFormatted = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedObjectId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ErrorNumberFormatted = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly EntityReference CampaignActivityId = null;
		
		public readonly Guid? BulkOperationLogId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseordersubstatus")]
	public class msdyn_purchaseordersubstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseordersubstatus";
        public msdyn_purchaseordersubstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseordersubstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseordersubstatusid"] = value;
            }
        }
		
		public readonly Guid? msdyn_purchaseordersubstatusId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_DefaultSubStatus = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_SystemStatus
            {
                Draft = 690970000,
                Submitted = 690970001,
                Canceled = 690970002,
                ProductsReceived = 690970003,
                Billed = 690970004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalobjectaccessreadsnapshot")]
	public class PrincipalObjectAccessReadSnapshot : Entity
    {
        public const string EntityLogicalName = "principalobjectaccessreadsnapshot";
        public PrincipalObjectAccessReadSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessreadsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessreadsnapshotid"] = value;
            }
        }
		
		public readonly int? RecordCountForOwningBU = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly int? Count = null;
		
		public readonly Guid? PrincipalObjectAccessReadSnapshotId = null;
		
		public readonly int? RecordCountForOwnerID = null;
		
		public readonly int? ChildUserPrincipalsCount = null;
		
		public readonly int? TeamPrincipalsCount = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? CountPercentOfTotalRows = null;
		
		public readonly int? RecordCountForOwnerIDPercentOfTotalRows = null;
		
		public readonly int? RecordCountForOwningBUPercentOfTotalRows = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotebookingservice")]
	public class msdyn_quotebookingservice : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotebookingservice";
        public msdyn_quotebookingservice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotebookingserviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotebookingserviceid"] = value;
            }
        }
		
		public readonly Money msdyn_EstimatedCostAmount = null;
		
		public readonly int? msdyn_lineorder = null;
		
		public readonly Money msdyn_EstimatedSalesAmount = null;
		
		public readonly bool? msdyn_iscopied = null;
		
		public readonly EntityReference msdyn_quotebookingincident = null;
		
		public readonly Money msdyn_unitcostamount_Base = null;
		
		public readonly EntityReference msdyn_quote = null;
		
		public readonly EntityReference msdyn_quotebookingsetup = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_minimumchargeamount = null;
		
		public readonly Money msdyn_unitamount = null;
		
		public readonly int? msdyn_durationtobill = null;
		
		public readonly Money msdyn_minimumchargeamount_Base = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_customerasset = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_Internalflags")]
		public readonly string msdyn_Internalflags = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_pricelist = null;
		
		public readonly Guid? msdyn_quotebookingserviceId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_estimatedcostamount_Base = null;
		
		public readonly EntityReference msdyn_unit = null;
		
		public readonly Money msdyn_currency_Base = null;
		
		public readonly int? msdyn_minimumchargeduration = null;
		
		public readonly Money msdyn_currency = null;
		
		public readonly EntityReference msdyn_Service = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly Money msdyn_unitcostamount = null;
		
		public readonly Money msdyn_estimatedsalesamount_Base = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("timezonedefinition")]
	public class TimeZoneDefinition : Entity
    {
        public const string EntityLogicalName = "timezonedefinition";
        public TimeZoneDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonedefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonedefinitionid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? Bias = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TimeZoneDefinitionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string UserInterfaceName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string DaylightName = null;
		
		public readonly string StandardName = null;
		
		public readonly int? RetiredOrder = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmodulemetadata")]
	public class AppModuleMetadata : Entity
    {
        public const string EntityLogicalName = "appmodulemetadata";
        public AppModuleMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadataid"] = value;
            }
        }
		
		public readonly bool? ComponentIsTabletEnabled = null;
		
		public readonly Guid? AppModuleMetadataId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? ComponentIsUserView = null;
		
		public readonly Guid? ParentComponentId = null;
		
		public readonly int? ComponentSubType = null;
		
		public readonly bool? ComponentIsUserChart = null;
		
		public readonly int? ComponentVersion = null;
		
		public readonly int? ComponentStateCode = null;
		
		public readonly int? State = null;
		
		public readonly Guid? AppModuleId = null;
		
		public readonly bool? ComponentIsUserForm = null;
		
		public readonly bool? ComponentIsDefault = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ComponentType = null;
		
		public readonly Guid? ComponentId = null;
		
		public readonly bool? ComponentIsQuickFindQuery = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("teamsyncattributemappingprofiles")]
	public class TeamSyncAttributeMappingProfiles : Entity
    {
        public const string EntityLogicalName = "teamsyncattributemappingprofiles";
        public TeamSyncAttributeMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamsyncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamsyncattributemappingprofileid"] = value;
            }
        }
		
		public readonly Guid? SyncAttributeMappingProfileId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? TeamSyncAttributeMappingProfileId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_opportunitylinetransaction")]
	public class msdyn_opportunitylinetransaction : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_opportunitylinetransaction";
        public msdyn_opportunitylinetransaction() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_opportunitylinetransactionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_opportunitylinetransactionid"] = value;
            }
        }
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly Guid? msdyn_opportunitylinetransactionId = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly string msdyn_OpportunityLine = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("product")]
	public class Product : Entity
    {
        public const string EntityLogicalName = "product";
        public Product() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productid"] = value;
            }
        }
		
		public readonly string msdyn_UPCCode = null;
		
		public readonly bool? IsKit = null;
		
		public readonly string VendorID = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money StandardCost_Base = null;
		
		public readonly string TraversedPath = null;
		
		public readonly OptionSetValue ProductStructure = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money Price_Base = null;
		
		public readonly DateTime? ValidFromDate = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string VendorName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsReparented = null;
		
		public readonly string HierarchyPath = null;
		
		public readonly string ProductUrl = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Money Price = null;
		
		public readonly EntityReference DefaultUoMScheduleId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Size = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? QuantityDecimal = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly bool? msdyn_ConvertToCustomerAsset = null;
		
		public readonly Money CurrentCost_Base = null;
		
		public readonly OptionSetValue msdyn_FieldServiceProductType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference msdyn_DefaultVendor = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly string VendorPartNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money CurrentCost = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ParentProductId = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference DefaultUoMId = null;
		
		public readonly decimal? StockVolume = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? IsStockItem = null;
		
		public readonly decimal? QuantityOnHand = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string msdyn_PurchaseName = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly string SupplierName = null;
		
		public readonly DateTime? ValidToDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly decimal? StockWeight = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ProductNumber = null;
		
		public readonly Money StandardCost = null;

        public new static class Options
        {
            public enum ProductStructure
            {
                Product = 1,
                ProductFamily = 2,
                ProductBundle = 3
            }
            public enum StateCode
            {
                Active = 0,
                Retired = 1,
                Draft = 2,
                UnderRevision = 3
            }
            public enum msdyn_FieldServiceProductType
            {
                Inventory = 690970000,
                NonInventory = 690970001,
                Service = 690970002
            }
            public enum ProductTypeCode
            {
                SalesInventory = 1,
                MiscellaneousCharges = 2,
                Services = 3,
                FlatFees = 4
            }
            public enum StatusCode
            {
                Active = 1,
                Retired = 2,
                Draft = 0,
                UnderRevision = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("multientitysearchentities")]
	public class MultiEntitySearchEntities : Entity
    {
        public const string EntityLogicalName = "multientitysearchentities";
        public MultiEntitySearchEntities() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchentityid"] = value;
            }
        }
		
		public readonly int? EntityOrder = null;
		
		public readonly string EntityName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference MultiEntitySearchId = null;
		
		public readonly Guid? MultiEntitySearchEntityId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_entityconfiguration")]
	public class msdyn_entityconfiguration : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_entityconfiguration";
        public msdyn_entityconfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_entityconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_entityconfigurationid"] = value;
            }
        }
		
		public readonly string msdyn_Entity = null;
		
		public readonly string msdyn_EntityPrimaryKey = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_CopyGeoDataFromURS = null;
		
		public readonly string msdyn_LatitudeFieldName = null;
		
		public readonly string msdyn_RelationshipFieldName = null;
		
		public readonly string msdyn_LongitudeFieldName = null;
		
		public readonly OptionSetValue msdyn_EnabledAs = null;
		
		public readonly Guid? msdyn_entityconfigurationId = null;
		
		public readonly double? msdyn_Radius = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_EnabledAs
            {
                Geofence = 192350000,
                Geotracked = 192350001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmodulemetadataoperationlog")]
	public class AppModuleMetadataOperationLog : Entity
    {
        public const string EntityLogicalName = "appmodulemetadataoperationlog";
        public AppModuleMetadataOperationLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulemetadataoperationlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulemetadataoperationlogid"] = value;
            }
        }
		
		public readonly Guid? AppModuleMetadataOperationLogId = null;
		
		public readonly int? RetryCount = null;
		
		public readonly Guid? AppModuleId = null;
		
		public readonly int? State = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? StartedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("semiannualfiscalcalendar")]
	public class SemiAnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "semiannualfiscalcalendar";
        public SemiAnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("firsthalf_base")]
		public readonly Money Period1_Base = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("secondhalf_base")]
		public readonly Money Period7_Base = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("secondhalf")]
		public readonly Money Period7 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("firsthalf")]
		public readonly Money Period1 = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference SalesPersonId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("campaign")]
	public class Campaign : Entity
    {
        public const string EntityLogicalName = "campaign";
        public Campaign() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Objective = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string PromotionCodeName = null;
		
		public readonly string Message = null;
		
		public readonly Money TotalActualCost_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money ExpectedRevenue_Base = null;
		
		public readonly Money BudgetedCost_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money OtherCost = null;
		
		public readonly string EmailAddress = null;
		
		public readonly int? ExpectedResponse = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ProposedStart = null;
		
		public readonly EntityReference PriceListId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string CodeName = null;
		
		public readonly DateTime? ProposedEnd = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money TotalCampaignActivityActualCost = null;
		
		public readonly Guid? CampaignId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money TotalActualCost = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly bool? IsTemplate = null;
		
		public readonly Money OtherCost_Base = null;
		
		public readonly Money TotalCampaignActivityActualCost_Base = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money BudgetedCost = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string TmpRegardingObjectId = null;
		
		public readonly OptionSetValue TypeCode = null;
		
		public readonly Money ExpectedRevenue = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Proposed = 0,
                ReadyToLaunch = 1,
                Launched = 2,
                Completed = 3,
                Canceled = 4,
                Suspended = 5,
                Inactive = 6
            }
            public enum TypeCode
            {
                Advertisement = 1,
                DirectMarketing = 2,
                Event = 3,
                CoBranding = 4,
                Other = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_playbookinstance")]
	public class msdyn_playbookinstance : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_playbookinstance";
        public msdyn_playbookinstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_playbookinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_playbookinstanceid"] = value;
            }
        }
		
		public readonly int? msdyn_activitiesclosed = null;
		
		public readonly bool? msdyn_trackprogress = null;
		
		public readonly EntityReference msdyn_categoryid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_evaluateactivityclosure = null;
		
		public readonly DateTime? msdyn_estimatedclose = null;
		
		public readonly EntityReference Regarding = null;
		
		public readonly int? msdyn_activitiesassociated = null;
		
		public readonly EntityReference msdyn_playbooktemplateid = null;
		
		public readonly Guid? msdyn_playbookinstanceId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Completed = 1
            }
            public enum statuscode
            {
                InProgress = 1,
                Successful = 2,
                NotSuccessful = 3,
                PartiallySuccessful = 4,
                NotRequired = 5,
                NotTracked = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("discount")]
	public class Discount : Entity
    {
        public const string EntityLogicalName = "discount";
        public Discount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("discountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["discountid"] = value;
            }
        }
		
		public readonly decimal? HighQuantity = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly decimal? LowQuantity = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? Percentage = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money Amount_Base = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? DiscountId = null;
		
		public readonly EntityReference DiscountTypeId = null;
		
		public readonly bool? IsAmountType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money Amount = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("metric")]
	public class Metric : Entity
    {
        public const string EntityLogicalName = "metric";
        public Metric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metricid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? MetricId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsStretchTracked = null;
		
		public readonly bool? IsAmount = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue AmountDataType = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_relationshipinsightsunifiedconfig")]
	public class msdyn_relationshipinsightsunifiedconfig : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_relationshipinsightsunifiedconfig";
        public msdyn_relationshipinsightsunifiedconfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_relationshipinsightsunifiedconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_relationshipinsightsunifiedconfigid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string new_name = null;
		
		public readonly bool? msdyn_usenewconfigexperience = null;
		
		public readonly Guid? msdyn_relationshipinsightsunifiedconfigId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcebookingheader")]
	public class BookableResourceBookingHeader : Entity
    {
        public const string EntityLogicalName = "bookableresourcebookingheader";
        public BookableResourceBookingHeader() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingheaderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingheaderid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? BookableResourceBookingHeaderId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference msdyn_projectteamid = null;
		
		public readonly int? Duration = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue msdyn_BookingType = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference msdyn_bookingstatusid = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference msdyn_projectid = null;
		
		public readonly EntityReference msdyn_resourcecategoryid = null;
		
		public readonly EntityReference msdyn_bookableresourceid = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BookingType
            {
                Solid = 1,
                Liquid = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("quote")]
	public class Quote : Entity
    {
        public const string EntityLogicalName = "quote";
        public Quote() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("quoteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["quoteid"] = value;
            }
        }
		
		public readonly EntityReference ContactId = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? ClosedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string BillTo_Line1 = null;
		
		public readonly Money msdyn_invoicesetuptotals_Base = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly Guid? QuoteId = null;
		
		public readonly int? RevisionNumber = null;
		
		public readonly OptionSetValue msdyn_Profitability = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly Money msdyn_totalnonchargeablecostrollup_Base = null;
		
		public readonly int? msdyn_CustomerBudgetRollUp_State = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly Money msdyn_TotalAmount = null;
		
		public readonly Money msdyn_customerbudgetrollup_Base = null;
		
		public readonly OptionSetValue msdyn_Competitive = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly string ShipTo_Composite = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly string BillTo_Telephone = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly decimal? msdyn_EstimatedQuoteMargin = null;
		
		public readonly Money msdyn_InvoiceSetupTotals = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly decimal? msdyn_AdjustedGrossMargin = null;
		
		public readonly EntityReference msdyn_AccountManagerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly int? msdyn_TotalNonchargeableCostRollup_State = null;
		
		public readonly string BillTo_City = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly Money msdyn_TotalChargeableCostRollup = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly Money msdyn_EstimatedCost = null;
		
		public readonly DateTime? EffectiveTo = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly DateTime? msdyn_EstimatedCompletionRollUp = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? msdyn_QuoteLineStartDate = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly string TraversedPath = null;
		
		public readonly OptionSetValue msdyn_EstimatedBudget = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly decimal? msdyn_GrossMargin = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? WillCall = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly EntityReference msdyn_ContractOrganizationalUnitId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly Money msdyn_TotalNonchargeableCostRollup = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly DateTime? msdyn_TotalChargeableCostRollup_Date = null;
		
		public readonly OptionSetValue msdyn_feasible = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string QuoteNumber = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly string EmailAddress = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly string BillTo_ContactName = null;
		
		public readonly int? msdyn_EstimatedCompletionRollUp_State = null;
		
		public readonly Money msdyn_CustomerBudgetRollUp = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly DateTime? msdyn_TotalNonchargeableCostRollup_Date = null;
		
		public readonly DateTime? ExpiresOn = null;
		
		public readonly DateTime? msdyn_CustomerBudgetRollUp_Date = null;
		
		public readonly Guid? BillTo_AddressId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly DateTime? msdyn_EstimatedCompletionRollUp_Date = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly DateTime? msdyn_QuoteLineEndDate = null;
		
		public readonly int? msdyn_TotalChargeableCostRollup_State = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money msdyn_totalchargeablecostrollup_Base = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly string BillTo_Composite = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly Money msdyn_estimatedcost_Base = null;
		
		public readonly DateTime? EffectiveFrom = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly OptionSetValue msdyn_OrderType = null;
		
		public readonly Money TotalTax = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly OptionSetValue msdyn_EstimatedSchedule = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly EntityReference msdyn_Account = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum msdyn_Profitability
            {
                ProfitabilityNotAvailable = 192350000,
                Profitable = 192350001,
                NotProfitable = 192350002
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum msdyn_Competitive
            {
                CustomerBudgetNotAvailable = 192350000,
                WithinCustomerExpectations = 192350001,
                OutsideCustomerExpectations = 192350002
            }
            public enum StatusCode
            {
                InProgress = 2,
                Open = 3,
                Won = 4,
                Lost = 5,
                Canceled = 6,
                Revised = 7,
                InProgress1 = 1
            }
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum msdyn_EstimatedBudget
            {
                BudgetEstimateNotAvailable = 192350000,
                WithinCustomerBudget = 192350001,
                ExceedsCustomerBudget = 192350002
            }
            public enum msdyn_feasible
            {
                FeasibilityNotAvailable = 192350000,
                Feasible = 192350001,
                NotFeasible = 192350002
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnRetrieve = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum msdyn_OrderType
            {
                WorkBased = 192350001,
                ItemBased = 192350000,
                ServiceMaintenanceBased = 690970002
            }
            public enum msdyn_EstimatedSchedule
            {
                ScheduleNotAvailable = 192350000,
                EstimatedToFinishEarly = 192350001,
                EstimatedToFinishLate = 192350002,
                EstimatedToFinishOnSchedule = 192350003
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1,
                Won = 2,
                Closed = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rmareceipt")]
	public class msdyn_rmareceipt : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rmareceipt";
        public msdyn_rmareceipt() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rmareceiptid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rmareceiptid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ReceivedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_Note = null;
		
		public readonly EntityReference msdyn_RMA = null;
		
		public readonly DateTime? msdyn_DateReceived = null;
		
		public readonly Guid? msdyn_rmareceiptId = null;
		
		public readonly EntityReference msdyn_ShipVia = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_systemuserschedulersetting")]
	public class msdyn_systemuserschedulersetting : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_systemuserschedulersetting";
        public msdyn_systemuserschedulersetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_systemuserschedulersettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_systemuserschedulersettingid"] = value;
            }
        }
		
		public readonly Guid? msdyn_systemuserschedulersettingId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_User = null;
		
		public readonly string msdyn_ScheduleSettings = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_analysisjob")]
	public class msdyn_analysisjob : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisjob";
        public msdyn_analysisjob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisjobid"] = value;
            }
        }
		
		public readonly string msdyn_CustomDetails = null;
		
		public readonly string msdyn_RunCorrelationId = null;
		
		public readonly int? msdyn_sevmediumcount = null;
		
		public readonly Guid? msdyn_analysisjobId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_TenantId = null;
		
		public readonly DateTime? msdyn_StartTime = null;
		
		public readonly string msdyn_Exception = null;
		
		public readonly int? msdyn_sevlowcount = null;
		
		public readonly int? msdyn_sevcriticalcount = null;
		
		public readonly DateTime? msdyn_EndTime = null;
		
		public readonly int? msdyn_sevhighcount = null;
		
		public readonly string msdyn_DisplayStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Pending = 1,
                Running = 192350000,
                Complete = 192350001,
                Exception = 192350002,
                CompletedWithExceptions = 192350003,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("opportunity")]
	public class Opportunity : Entity
    {
        public const string EntityLogicalName = "opportunity";
        public Opportunity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunityid"] = value;
            }
        }
		
		public readonly bool? PresentFinalProposal = null;
		
		public readonly DateTime? FinalDecisionDate = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly Money BudgetAmount_Base = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue BudgetStatus = null;
		
		public readonly Money int_forecast_Base = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money int_Forecast = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? DevelopProposal = null;
		
		public readonly bool? IsRevenueSystemCalculated = null;
		
		public readonly bool? ConfirmInterest = null;
		
		public readonly bool? PresentProposal = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? CompleteFinalProposal = null;
		
		public readonly int? TeamsFollowed = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? EstimatedCloseDate = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly bool? IdentifyPursuitTeam = null;
		
		public readonly bool? PursuitDecision = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue InitialCommunication = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly EntityReference msdyn_WorkOrderType = null;
		
		public readonly bool? FileDebrief = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? SendThankYouNote = null;
		
		public readonly OptionSetValue OpportunityRatingCode = null;
		
		public readonly OptionSetValue SalesStage = null;
		
		public readonly DateTime? ActualCloseDate = null;
		
		public readonly Guid? StepId = null;
		
		public readonly bool? EvaluateFit = null;
		
		public readonly bool? IdentifyCompetitors = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? CompleteInternalReview = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string StepName = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Money EstimatedValue = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? CaptureProposalFeedback = null;
		
		public readonly Money ActualValue_Base = null;
		
		public readonly DateTime? ScheduleFollowup_Qualify = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly EntityReference msdyn_ContractOrganizationalUnitId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly string QualificationComments = null;
		
		public readonly Guid? OpportunityId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly bool? DecisionMaker = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string EmailAddress = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string CustomerNeed = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly bool? ResolveFeedback = null;
		
		public readonly Money ActualValue = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly OptionSetValue TimeLine = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly DateTime? ScheduleProposalMeeting = null;
		
		public readonly OptionSetValue msdyn_forecastcategory = null;
		
		public readonly OptionSetValue PurchaseTimeframe = null;
		
		public readonly Money BudgetAmount = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue SalesStageCode = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly DateTime? ScheduleFollowup_Prospect = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money EstimatedValue_Base = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly EntityReference msdyn_AccountManagerId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly string CustomerPainPoints = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly OptionSetValue msdyn_OrderType = null;
		
		public readonly Money TotalTax = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string QuoteComments = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly OptionSetValue PurchaseProcess = null;
		
		public readonly bool? IdentifyCustomerContacts = null;
		
		public readonly string ProposedSolution = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly OptionSetValue Need = null;
		
		public readonly int? CloseProbability = null;
		
		public readonly string CurrentSituation = null;
		
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum BudgetStatus
            {
                NoCommittedBudget = 0,
                MayBuy = 1,
                CanBuy = 2,
                WillBuy = 3
            }
            public enum StatusCode
            {
                InProgress = 1,
                OnHold = 2,
                Won = 3,
                Canceled = 4,
                OutSold = 5
            }
            public enum InitialCommunication
            {
                Contacted = 0,
                NotContacted = 1
            }
            public enum OpportunityRatingCode
            {
                Hot = 1,
                Warm = 2,
                Cold = 3
            }
            public enum SalesStage
            {
                Qualify = 0,
                Develop = 1,
                Propose = 2,
                Close = 3
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnRetrieve = 1
            }
            public enum TimeLine
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                NotKnown = 4
            }
            public enum msdyn_forecastcategory
            {
                PipelineLowConfidence = 100000001,
                BestCaseModerateConfidence = 100000002,
                CommittedHighConfidence = 100000003,
                OmittedExcludeFromForecast = 100000004
            }
            public enum PurchaseTimeframe
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                Unknown = 4
            }
            public enum SalesStageCode
            {
                DefaultValue = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum msdyn_OrderType
            {
                WorkBased = 192350001,
                ItemBased = 192350000,
                ServiceMaintenanceBased = 690970002
            }
            public enum PurchaseProcess
            {
                Individual = 0,
                Committee = 1,
                Unknown = 2
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum Need
            {
                MustHave = 0,
                ShouldHave = 1,
                GoodToHave = 2,
                NoNeed = 3
            }
            public enum StateCode
            {
                Open = 0,
                Won = 1,
                Lost = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("actioncard")]
	public class ActionCard : Entity
    {
        public const string EntityLogicalName = "actioncard";
        public ActionCard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CardTypeId = null;
		
		public readonly string Data = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ActionCardId = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly bool? Visibility = null;
		
		public readonly int? CardType = null;
		
		public readonly string msdyn_regardingobjectlogicalname = null;
		
		public readonly EntityReference RecordId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue State = null;
		
		public readonly EntityReference ParentRegardingObjectId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? Priority = null;
		
		public readonly DateTime? ExpiryDate = null;
		
		public readonly string msdyn_actioncardregardingid = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? RecordIdObjectTypeCode2 = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly string ReferenceTokens = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Source = null;
		
		public readonly string msdyn_regardingobjectid = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }
            public enum Source
            {
                CRM = 1,
                Exchange = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlemententityallocationtypemapping")]
	public class EntitlementEntityAllocationTypeMapping : UserOrTeamEntity
    {
        public const string EntityLogicalName = "entitlemententityallocationtypemapping";
        public EntitlementEntityAllocationTypeMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlemententityallocationtypemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlemententityallocationtypemappingid"] = value;
            }
        }
		
		public readonly Guid? EntitlementEntityAllocationTypeMappingId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string name = null;
		
		public readonly OptionSetValue entitytype = null;
		
		public readonly OptionSetValue allocationtype = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum entitytype
            {
                WorkOrder = 192350000,
                Case = 0
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum allocationtype
            {
                DiscountAndPriceList = 192350000,
                NumberOfCases = 0,
                NumberOfHours = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingproduct")]
	public class msdyn_agreementbookingproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingproduct";
        public msdyn_agreementbookingproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_currency_Base = null;
		
		public readonly double? msdyn_QtyToBill = null;
		
		public readonly EntityReference msdyn_AgreementBookingSetup = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_AgreementBookingIncident = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly bool? msdyn_IsCopied = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly Money msdyn_Currency = null;
		
		public readonly Guid? msdyn_agreementbookingproductId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_project")]
	public class msdyn_project : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_project";
        public msdyn_project() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectid"] = value;
            }
        }
		
		public readonly Money msdyn_totalactualcost_Base = null;
		
		public readonly Money msdyn_salesvariance_Base = null;
		
		public readonly Money msdyn_costestimateatcomplete_Base = null;
		
		public readonly EntityReference msdyn_projectteamid = null;
		
		public readonly EntityReference msdyn_salesorderid = null;
		
		public readonly bool? msdyn_istemplate = null;
		
		public readonly int? msdyn_wbsduration = null;
		
		public readonly double? msdyn_ScheduleVariance = null;
		
		public readonly OptionSetValue msdyn_scheduleperformance = null;
		
		public readonly Guid? processid = null;
		
		public readonly Money msdyn_actuallaborcost = null;
		
		public readonly double? msdyn_EffortestimateatcompleteEAC = null;
		
		public readonly int? msdyn_teamsize = null;
		
		public readonly decimal? msdyn_plannedhours = null;
		
		public readonly DateTime? msdyn_actualend = null;
		
		public readonly EntityReference msdyn_projectmanager = null;
		
		public readonly DateTime? msdyn_teamsize_Date = null;
		
		public readonly string msdyn_linkeddocumenturl = null;
		
		public readonly Money msdyn_actualsales_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_RemainingSales = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_subject = null;
		
		public readonly string msdyn_calendarid = null;
		
		public readonly Money msdyn_actualexpensecost = null;
		
		public readonly EntityReference msdyn_ProjectTemplate = null;
		
		public readonly DateTime? msdyn_scheduledend = null;
		
		public readonly OptionSetValue msdyn_overallprojectstatus = null;
		
		public readonly EntityReference msdyn_workhourtemplate = null;
		
		public readonly OptionSetValue msdyn_BulkGenerationStatus = null;
		
		public readonly Money msdyn_remainingsales_Base = null;
		
		public readonly Money msdyn_plannedsales_Base = null;
		
		public readonly Money msdyn_plannedlaborcost_Base = null;
		
		public readonly Money msdyn_PlannedSales = null;
		
		public readonly Money msdyn_RemainingCost = null;
		
		public readonly Money msdyn_CostVariance = null;
		
		public readonly bool? msdyn_disablecreateofteammemberformanager = null;
		
		public readonly decimal? msdyn_exchangerate = null;
		
		public readonly Money msdyn_plannedexpensecost = null;
		
		public readonly string traversedpath = null;
		
		public readonly DateTime? msdyn_statusupdatedon = null;
		
		public readonly Money msdyn_costvariance_Base = null;
		
		public readonly Money msdyn_remainingcost_Base = null;
		
		public readonly double? msdyn_RemainingHours = null;
		
		public readonly decimal? msdyn_actualhours = null;
		
		public readonly Guid? msdyn_projectId = null;
		
		public readonly Money msdyn_CostEstimateAtComplete = null;
		
		public readonly decimal? msdyn_SalesConsumption = null;
		
		public readonly int? msdyn_actualdurationminutes = null;
		
		public readonly Money msdyn_actuallaborcost_Base = null;
		
		public readonly Money msdyn_plannedlaborcost = null;
		
		public readonly EntityReference msdyn_ContractOrganizationalUnitId = null;
		
		public readonly bool? msdyn_IsLinkedToMSProjectClient = null;
		
		public readonly string msdyn_description = null;
		
		public readonly Guid? stageid = null;
		
		public readonly EntityReference msdyn_customer = null;
		
		public readonly DateTime? msdyn_scheduledstart = null;
		
		public readonly Money msdyn_totalplannedcost_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_TotalPlannedCost = null;
		
		public readonly bool? msdyn_projectresourcerequirementsvisibletore = null;
		
		public readonly Money msdyn_SalesEstimateAtCompleteEAC = null;
		
		public readonly Money msdyn_actualexpensecost_Base = null;
		
		public readonly string msdyn_comments = null;
		
		public readonly OptionSetValue msdyn_CostPerformence = null;
		
		public readonly Money msdyn_salesestimateatcompleteeac_Base = null;
		
		public readonly string msdyn_StageName = null;
		
		public readonly int? msdyn_teamsize_State = null;
		
		public readonly Money msdyn_plannedexpensecost_Base = null;
		
		public readonly int? msdyn_scheduleddurationminutes = null;
		
		public readonly Money msdyn_TotalActualCost = null;
		
		public readonly decimal? msdyn_CostConsumption = null;
		
		public readonly decimal? msdyn_Progress = null;
		
		public readonly Money msdyn_SalesVariance = null;
		
		public readonly DateTime? msdyn_actualstart = null;
		
		public readonly Money msdyn_ActualSales = null;

        public new static class Options
        {
            public enum msdyn_scheduleperformance
            {
                OnTime = 192350000,
                Ahead = 192350001,
                Behind = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_overallprojectstatus
            {
                Green = 1,
                Yellow = 2,
                Red = 3
            }
            public enum msdyn_BulkGenerationStatus
            {
                Processing = 192350000,
                Failed = 192350001
            }
            public enum msdyn_CostPerformence
            {
                OnBudget = 192350000,
                OverBudget = 192350001,
                UnderBudget = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                InactiveSetsProjectToReadOnly = 2,
                ClosedSetsProjectToReadOnlyAndCancelsFutureBookings = 192350000
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessagerequestfield")]
	public class SdkMessageRequestField : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequestfield";
        public SdkMessageRequestField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestfieldid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference SdkMessageRequestId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string Name = null;
		
		public readonly string ParameterBindingInformation = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string ClrParser = null;
		
		public readonly bool? Optional = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SdkMessageRequestFieldIdUnique = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? FieldMask = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Parser = null;
		
		public readonly Guid? SdkMessageRequestFieldId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string PublicName = null;
		
		public readonly int? Position = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("multientitysearch")]
	public class MultiEntitySearch : Entity
    {
        public const string EntityLogicalName = "multientitysearch";
        public MultiEntitySearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchid"] = value;
            }
        }
		
		public readonly Guid? MultiEntitySearchId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelproperty")]
	public class ChannelProperty : Entity
    {
        public const string EntityLogicalName = "channelproperty";
        public ChannelProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertyid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string Applicationsource = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ChannelPropertyId = null;
		
		public readonly OptionSetValue DataType = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? ChannelPropertyIdUnique = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum DataType
            {
                FloatingPointNumber = 0,
                SingleLineOfText = 1,
                WholeNumber = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sharepointdata")]
	public class SharePointData : Entity
    {
        public const string EntityLogicalName = "sharepointdata";
        public SharePointData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdataid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SharePointDataId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string RegardingObjectId = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly string Data = null;
		
		public readonly EntityReference Location = null;
		
		public readonly int? PageNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsValid = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string NextPageToken = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string PreviousPageToken = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("businessunitnewsarticle")]
	public class BusinessUnitNewsArticle : Entity
    {
        public const string EntityLogicalName = "businessunitnewsarticle";
        public BusinessUnitNewsArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitnewsarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitnewsarticleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ActiveUntil = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? ShowOnHomepage = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string NewsArticle = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string ArticleTitle = null;
		
		public readonly OptionSetValue ArticleTypeCode = null;
		
		public readonly string ArticleUrl = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? BusinessUnitNewsArticleId = null;

        public new static class Options
        {
            public enum ArticleTypeCode
            {
                AllUsers = 1,
                SalesUsers = 2,
                ServiceUsers = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_fieldcomputation")]
	public class msdyn_fieldcomputation : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_fieldcomputation";
        public msdyn_fieldcomputation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_fieldcomputationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_fieldcomputationid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_ComputedField = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ProductId = null;
		
		public readonly EntityReference msdyn_PropertyId = null;
		
		public readonly Guid? msdyn_fieldcomputationId = null;

        public new static class Options
        {
            public enum msdyn_ComputedField
            {
                Quantity = 192350001
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("new_master")]
	public class new_master : OrganizationEntity
    {
        public const string EntityLogicalName = "new_master";
        public new_master() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("new_masterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["new_masterid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string new_number = null;
		
		public readonly Guid? new_masterId = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderinvoicingsetupdate")]
	public class msdyn_orderinvoicingsetupdate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderinvoicingsetupdate";
        public msdyn_orderinvoicingsetupdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderinvoicingsetupdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderinvoicingsetupdateid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly DateTime? msdyn_InvoiceDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_PreviousInvoiceDate = null;
		
		public readonly EntityReference msdyn_InvoiceSetup = null;
		
		public readonly EntityReference msdyn_Order = null;
		
		public readonly int? msdyn_Revision = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly OptionSetValue msdyn_InvoiceStatus = null;
		
		public readonly Guid? msdyn_orderinvoicingsetupdateId = null;
		
		public readonly EntityReference msdyn_OrderInvoicingDate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_InvoiceStatus
            {
                Scheduled = 690970000,
                Processed = 690970001,
                Canceled = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("columnmapping")]
	public class ColumnMapping : Entity
    {
        public const string EntityLogicalName = "columnmapping";
        public ColumnMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("columnmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["columnmappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ColumnMappingId = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly string TargetAttributeName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? ColumnMappingIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ImportMapId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string SourceAttributeName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_actual")]
	public class msdyn_actual : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_actual";
        public msdyn_actual() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_actualid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_actualid"] = value;
            }
        }
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly OptionSetValue msdyn_JournalType = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly string msdyn_SalesContractLine = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly string msdyn_externaldescription = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ServiceAccount = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;
		
		public readonly OptionSetValue msdyn_AdjustmentStatus = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly Guid? msdyn_actualId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly OptionSetValue msdyn_ProductType = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly EntityReference msdyn_WorkOrderType = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly OptionSetValue msdyn_BillingStatus = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly string msdyn_ExternalReferenceID = null;
		
		public readonly EntityReference msdyn_SalesContractLineId = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly OptionSetValue msdyn_WorkLocation = null;
		
		public readonly EntityReference msdyn_SalesContract = null;
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly bool? msdyn_IsJournalized = null;
		
		public readonly EntityReference msdyn_contractorganizationalunitid = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly DateTime? msdyn_ExternalReferenceDate = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_JournalType
            {
                WorkingHours = 690970000,
                Break = 690970001,
                Travel = 690970002,
                Overtime = 690970003,
                BusinessClosure = 690970004
            }
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum msdyn_AdjustmentStatus
            {
                InProcess = 192350000,
                Adjusted = 192350001,
                Unadjustable = 192350002
            }
            public enum msdyn_ProductType
            {
                Inventory = 690970000,
                NonInventory = 690970001,
                Service = 690970002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_BillingStatus
            {
                ReadyToInvoice = 192350004,
                WorkOrderClosedPosted = 690970000,
                UnbilledSalesCreated = 192350000,
                CustomerInvoiceCreated = 192350001,
                CustomerInvoicePosted = 192350002,
                Canceled = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum msdyn_WorkLocation
            {
                Onsite = 690970000,
                Facility = 690970001,
                LocationAgnostic = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("documentindex")]
	public class DocumentIndex : Entity
    {
        public const string EntityLogicalName = "documentindex";
        public DocumentIndex() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documentindexid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documentindexid"] = value;
            }
        }
		
		public readonly string KeyWords = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string SearchText = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? DocumentIndexId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue DocumentTypeCode = null;
		
		public readonly EntityReference DocumentId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsPublished = null;
		
		public readonly string Location = null;
		
		public readonly string Number = null;
		
		public readonly bool? IsLatestVersion = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum DocumentTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("import")]
	public class Import : Entity
    {
        public const string EntityLogicalName = "import";
        public Import() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? Sequence = null;
		
		public readonly Guid? ImportId = null;
		
		public readonly string EMailAddress = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsImport = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ModeCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? SendNotification = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ModeCode
            {
                Create = 0,
                Update = 1
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementstatus")]
	public class msdyn_requirementstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementstatus";
        public msdyn_requirementstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementstatusid"] = value;
            }
        }
		
		public readonly Guid? msdyn_requirementstatusId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Status = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Active = 690970000,
                Completed = 690970001,
                Canceled = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotebookingincident")]
	public class msdyn_quotebookingincident : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotebookingincident";
        public msdyn_quotebookingincident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotebookingincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotebookingincidentid"] = value;
            }
        }
		
		public readonly bool? msdyn_incidentitemscopied = null;
		
		public readonly EntityReference msdyn_customerasset = null;
		
		public readonly int? msdyn_estimatedduration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Quote = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_incidenttype = null;
		
		public readonly Guid? msdyn_quotebookingincidentId = null;
		
		public readonly string msdyn_internalflags = null;
		
		public readonly EntityReference msdyn_quotebookingsetup = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("orginsightsmetric")]
	public class OrgInsightsMetric : Entity
    {
        public const string EntityLogicalName = "orginsightsmetric";
        public OrgInsightsMetric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("orginsightsmetricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["orginsightsmetricid"] = value;
            }
        }
		
		public readonly string InternalName = null;
		
		public readonly OptionSetValue MetricType = null;
		
		public readonly string Name = null;
		
		public readonly Guid? OrgInsightsMetricId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("queue")]
	public class Queue : Entity
    {
        public const string EntityLogicalName = "queue";
        public Queue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference DefaultMailbox = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string EmailPassword = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue QueueTypeCode = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? AllowEmailCredentials = null;
		
		public readonly string EMailAddress = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly bool? IsFaxQueue = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly int? NumberOfItems = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue QueueViewType = null;
		
		public readonly int? NumberOfMembers = null;
		
		public readonly string Description = null;
		
		public readonly Guid? QueueId = null;
		
		public readonly bool? IgnoreUnsolicitedEmail = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue IncomingEmailFilteringMethod = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string EmailUsername = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference PrimaryUserId = null;

        public new static class Options
        {
            public enum QueueTypeCode
            {
                DefaultValue = 1
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum QueueViewType
            {
                Public = 0,
                Private = 1
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3
            }
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelinetransaction")]
	public class msdyn_quotelinetransaction : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelinetransaction";
        public msdyn_quotelinetransaction() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelinetransactionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelinetransactionid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly EntityReference msdyn_Origin = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly EntityReference msdyn_quotelineid = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly Money msdyn_amount_after_tax_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly Guid? msdyn_quotelinetransactionId = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly Money msdyn_tax_Base = null;
		
		public readonly Money msdyn_amount_after_tax = null;
		
		public readonly Money msdyn_tax = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_QuoteId = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly bool? msdyn_isdataimport = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("aciviewmapper")]
	public class ACIViewMapper : Entity
    {
        public const string EntityLogicalName = "aciviewmapper";
        public ACIViewMapper() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("aciviewmapperid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["aciviewmapperid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? ACIViewMapperId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string WebApplicationEndPoint = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ViewName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("salesorderdetail")]
	public class SalesOrderDetail : Entity
    {
        public const string EntityLogicalName = "salesorderdetail";
        public SalesOrderDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesorderdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesorderdetailid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? msdyn_IncludeTime = null;
		
		public readonly OptionSetValue SalesOrderStateCode = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly bool? WillCall = null;
		
		public readonly string ProductName = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly string ProductDescription = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly Money msdyn_costpriceperunit_Base = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly decimal? QuantityBackordered = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsCopied = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ParentBundleIdRef = null;
		
		public readonly bool? msdyn_IncludeFee = null;
		
		public readonly Money BaseAmount_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string SalesOrderDetailName = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly Money msdyn_BudgetAmount = null;
		
		public readonly bool? msdyn_IncludeExpense = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? msdyn_BillingStartDate = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly decimal? QuantityCancelled = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Money msdyn_costamount_Base = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly Money msdyn_CostPricePerUnit = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Money msdyn_budgetamount_Base = null;
		
		public readonly Money Tax = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly EntityReference msdyn_agreement = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? msdyn_IncludeMaterial = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly bool? SalesOrderIsPriceLocked = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_CostAmount = null;
		
		public readonly OptionSetValue msdyn_BillingMethod = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference QuoteDetailId = null;
		
		public readonly OptionSetValue msdyn_LineType = null;
		
		public readonly Guid? SalesOrderDetailId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly OptionSetValue msdyn_BillingStatus = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly decimal? QuantityShipped = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly EntityReference msdyn_invoicefrequency = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly Guid? ProductAssociationId = null;

        public new static class Options
        {
            public enum SalesOrderStateCode
            {

            }
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnCreate = 1,
                SkipPriceCalcOnUpdate = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum msdyn_BillingMethod
            {
                TimeAndMaterial = 192350000,
                FixedPrice = 192350001
            }
            public enum msdyn_LineType
            {
                ProjectServiceLine = 690970000,
                FieldServiceLine = 690970001
            }
            public enum msdyn_BillingStatus
            {
                ReadyToInvoice = 192350004,
                WorkOrderClosedPosted = 690970000,
                UnbilledSalesCreated = 192350000,
                CustomerInvoiceCreated = 192350001,
                CustomerInvoicePosted = 192350002,
                Canceled = 192350003
            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("runtimedependency")]
	public class RuntimeDependency : Entity
    {
        public const string EntityLogicalName = "runtimedependency";
        public RuntimeDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyid"] = value;
            }
        }
		
		public readonly bool? IsPublished = null;
		
		public readonly Guid? DependencyId = null;
		
		public readonly int? DependentComponentType = null;
		
		public readonly string RequiredComponentNodeId = null;
		
		public readonly Guid? DependentComponentNodeId = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly int? RequiredComponentType = null;
		
		public readonly DateTime? RequiredComponentModifiedTime = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_invoicefrequency")]
	public class msdyn_invoicefrequency : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_invoicefrequency";
        public msdyn_invoicefrequency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_invoicefrequencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_invoicefrequencyid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_daysofrun = null;
		
		public readonly Guid? msdyn_invoicefrequencyId = null;
		
		public readonly OptionSetValue msdyn_period = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue msdyn_runspermonth = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_daysofrun
            {
                DayOfPeriod = 192350000,
                WeekdayOfPeriod = 192350001
            }
            public enum msdyn_period
            {
                Weekly = 192350000,
                Monthly = 192350001,
                Biweekly = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_runspermonth
            {
                _1 = 1,
                _2 = 2,
                _3 = 3,
                _4 = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("cardtype")]
	public class CardType : Entity
    {
        public const string EntityLogicalName = "cardtype";
        public CardType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("cardtypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["cardtypeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string CardName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Actions = null;
		
		public readonly bool? IsEnabled = null;
		
		public readonly string SoftTitle = null;
		
		public readonly bool? HasSnoozeDismiss = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? CardTypeId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("cardtype")]
		public readonly int? CardType1 = null;
		
		public readonly bool? BoolCardOption = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? LastSyncTime = null;
		
		public readonly string GroupType = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue ClientAvailability = null;
		
		public readonly string CardTypeIcon = null;
		
		public readonly DateTime? ScheduleTime = null;
		
		public readonly bool? IsPreviewCard = null;
		
		public readonly string StringCardOption = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsLiveOnly = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? IntCardOption = null;
		
		public readonly bool? IsBaseCard = null;
		
		public readonly int? Priority = null;
		
		public readonly string PublisherName = null;
		
		public readonly string SummaryText = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ClientAvailability
            {
                WebClientOnly = 1,
                MocaOnly = 2,
                MocaAndWeb = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicecommandparameters")]
	public class msdyn_iotdevicecommandparameters : Entity
    {
        public const string EntityLogicalName = "msdyn_iotdevicecommandparameters";
        public msdyn_iotdevicecommandparameters() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicecommandparametersid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicecommandparametersid"] = value;
            }
        }
		
		public readonly Guid? msdyn_iotdevicecommanddefinitionid = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_iotpropertydefinitionid = null;
		
		public readonly Guid? msdyn_iotdevicecommandparametersId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("globalsearchconfiguration")]
	public class GlobalSearchConfiguration : Entity
    {
        public const string EntityLogicalName = "globalsearchconfiguration";
        public GlobalSearchConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("globalsearchconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["globalsearchconfigurationid"] = value;
            }
        }
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string SearchProviderResultsPage = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsLocalized = null;
		
		public readonly string SearchProviderName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? GlobalSearchConfigurationidUnique = null;
		
		public readonly bool? IsSearchBoxVisible = null;
		
		public readonly Guid? GlobalSearchConfigurationId = null;
		
		public readonly bool? IsEnabled = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalobjectaccess")]
	public class PrincipalObjectAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectaccess";
        public PrincipalObjectAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessid"] = value;
            }
        }
		
		public readonly DateTime? ChangedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly string PrincipalTypeCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? InheritedAccessRightsMask = null;
		
		public readonly int? AccessRightsMask = null;
		
		public readonly Guid? PrincipalObjectAccessId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? PrincipalId = null;

        public new static class Options
        {
            public enum PrincipalTypeCode
            {

            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customeropportunityrole")]
	public class CustomerOpportunityRole : Entity
    {
        public const string EntityLogicalName = "customeropportunityrole";
        public CustomerOpportunityRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customeropportunityroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customeropportunityroleid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OpportunityRoleId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OpportunityStateCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? CustomerOpportunityRoleId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? OpportunityStatusCode = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("businessunitmap")]
	public class BusinessUnitMap : Entity
    {
        public const string EntityLogicalName = "businessunitmap";
        public BusinessUnitMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitmapid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? BusinessUnitMapId = null;
		
		public readonly Guid? BusinessId = null;
		
		public readonly Guid? SubBusinessId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subject")]
	public class Subject : Entity
    {
        public const string EntityLogicalName = "subject";
        public Subject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subjectid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly int? FeatureMask = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? SubjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ParentSubject = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_userworkhistory")]
	public class msdyn_userworkhistory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_userworkhistory";
        public msdyn_userworkhistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_userworkhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_userworkhistoryid"] = value;
            }
        }
		
		public readonly string msdyn_skillexperience = null;
		
		public readonly double? msdyn_budgetperformance = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly double? msdyn_ontimeperformance = null;
		
		public readonly Guid? msdyn_userworkhistoryId = null;
		
		public readonly int? msdyn_projectcount = null;
		
		public readonly int? msdyn_ontimeprojectcount = null;
		
		public readonly int? msdyn_recordtype = null;
		
		public readonly EntityReference msdyn_Bookableresource = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rma")]
	public class msdyn_rma : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rma";
        public msdyn_rma() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rmaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rmaid"] = value;
            }
        }
		
		public readonly string msdyn_PackagingTrackingNo = null;
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly DateTime? msdyn_ETA = null;
		
		public readonly string msdyn_AutoNumbering = null;
		
		public readonly DateTime? msdyn_DateRequested = null;
		
		public readonly string msdyn_ReferenceNo = null;
		
		public readonly EntityReference msdyn_ServiceAccount = null;
		
		public readonly OptionSetValue msdyn_ProcessingAction = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_BillingAccount = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly EntityReference msdyn_SubStatus = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ShipVia = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string msdyn_ShippingTrackingNo = null;
		
		public readonly Guid? msdyn_rmaId = null;
		
		public readonly EntityReference msdyn_ApprovedBy = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly EntityReference msdyn_RequestedByContact = null;
		
		public readonly Money msdyn_TotalAmount = null;

        public new static class Options
        {
            public enum msdyn_ProcessingAction
            {
                CreateRTV = 690970000,
                ReturnToWarehouse = 690970001,
                ChangeAssetOwnership = 690970002
            }
            public enum msdyn_SystemStatus
            {
                Pending = 690970000,
                Canceled = 690970001,
                ProductsReceived = 690970002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_477c16f59170487b8b4dc895c5dcd09b")]
	public class msdyn_bpf_477c16f59170487b8b4dc895c5dcd09b : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_477c16f59170487b8b4dc895c5dcd09b";
        public msdyn_bpf_477c16f59170487b8b4dc895c5dcd09b() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly EntityReference bpf_incidentid = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference bpf_msdyn_iotalertid = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference bpf_msdyn_workorderid = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rtvproduct")]
	public class msdyn_rtvproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rtvproduct";
        public msdyn_rtvproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rtvproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rtvproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly Guid? msdyn_rtvproductId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_unitcreditamount_Base = null;
		
		public readonly EntityReference msdyn_RMAProduct = null;
		
		public readonly Money msdyn_totalcreditamount_Base = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_RTV = null;
		
		public readonly Money msdyn_TotalCreditAmount = null;
		
		public readonly Money msdyn_UnitCreditAmount = null;
		
		public readonly EntityReference msdyn_RMA = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_WorkOrderProduct = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly EntityReference msdyn_Warehouse = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotepricelist")]
	public class msdyn_quotepricelist : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotepricelist";
        public msdyn_quotepricelist() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotepricelistid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotepricelistid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Quote = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_quotepricelistId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("organizationui")]
	public class OrganizationUI : Entity
    {
        public const string EntityLogicalName = "organizationui";
        public OrganizationUI() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }
		
		public readonly Guid? FormIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string LargeEntityIcon = null;
		
		public readonly string FieldXml = null;
		
		public readonly string FormXml = null;
		
		public readonly Guid? FormId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Version = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string PreviewColumnsetXml = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly string GridIcon = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string OutlookShortcutIcon = null;
		
		public readonly string PreviewXml = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("topic")]
	public class Topic : Entity
    {
        public const string EntityLogicalName = "topic";
        public Topic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicid"] = value;
            }
        }
		
		public readonly int? Score = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? TopicId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string KeyPhrase = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_configuration")]
	public class msdyn_Configuration : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_configuration";
        public msdyn_Configuration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_configurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_configurationid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_Name = null;
		
		public readonly OptionSetValue msdyn_Type = null;
		
		public readonly string msdyn_Value = null;
		
		public readonly Guid? msdyn_ConfigurationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Type
            {
                FilterLayout = 192350000,
                ResourceCellTemplate = 192350001,
                RetrieveResourcesQuery = 192350002,
                ScheduleAssistantFilterLayout = 192350003,
                ScheduleAssistantRetrieveConstraintsQuery = 192350004,
                CloneEntityQuery = 192350005
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_timegroupdetail")]
	public class msdyn_timegroupdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_timegroupdetail";
        public msdyn_timegroupdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_timegroupdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_timegroupdetailid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly Guid? msdyn_timegroupdetailId = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_TimeGroupId = null;
		
		public readonly Guid? processid = null;
		
		public readonly DateTime? msdyn_StartTime = null;
		
		public readonly DateTime? msdyn_EndTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("plugintypestatistic")]
	public class PluginTypeStatistic : Entity
    {
        public const string EntityLogicalName = "plugintypestatistic";
        public PluginTypeStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypestatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypestatisticid"] = value;
            }
        }
		
		public readonly int? FailurePercent = null;
		
		public readonly int? TerminateMemoryContributionPercent = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? AverageExecuteTimeInMilliseconds = null;
		
		public readonly int? CrashPercent = null;
		
		public readonly int? CrashCount = null;
		
		public readonly Guid? PluginTypeStatisticId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TerminateHandlesContributionPercent = null;
		
		public readonly int? ExecuteCount = null;
		
		public readonly int? FailureCount = null;
		
		public readonly int? TerminateCpuContributionPercent = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TerminateOtherContributionPercent = null;
		
		public readonly int? CrashContributionPercent = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("filtertemplate")]
	public class FilterTemplate : Entity
    {
        public const string EntityLogicalName = "filtertemplate";
        public FilterTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("filtertemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["filtertemplateid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly Guid? FilterTemplateId = null;
		
		public readonly int? QueryType = null;
		
		public readonly string ReturnedTypeCode = null;
		
		public readonly string FetchXml = null;
		
		public readonly string Name = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementinvoicedate")]
	public class msdyn_agreementinvoicedate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementinvoicedate";
        public msdyn_agreementinvoicedate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementinvoicedateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementinvoicedateid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly DateTime? msdyn_InvoiceDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_InvoiceSetup = null;
		
		public readonly int? msdyn_Revision = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly OptionSetValue msdyn_InvoiceStatus = null;
		
		public readonly Guid? msdyn_agreementinvoicedateId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_InvoiceStatus
            {
                Scheduled = 690970000,
                Processed = 690970001,
                Canceled = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("languagelocale")]
	public class LanguageLocale : Entity
    {
        public const string EntityLogicalName = "languagelocale";
        public LanguageLocale() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("languagelocaleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["languagelocaleid"] = value;
            }
        }
		
		public readonly string Language = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly string Code = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? LocaleId = null;
		
		public readonly Guid? LanguageLocaleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Region = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("uomschedule")]
	public class UoMSchedule : Entity
    {
        public const string EntityLogicalName = "uomschedule";
        public UoMSchedule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("uomscheduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["uomscheduleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string BaseUoMName = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? UoMScheduleId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseorderreceipt")]
	public class msdyn_purchaseorderreceipt : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseorderreceipt";
        public msdyn_purchaseorderreceipt() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderreceiptid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseorderreceiptid"] = value;
            }
        }
		
		public readonly Guid? msdyn_purchaseorderreceiptId = null;
		
		public readonly EntityReference msdyn_ReceivedBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly string msdyn_Note = null;
		
		public readonly string traversedpath = null;
		
		public readonly Guid? processid = null;
		
		public readonly DateTime? msdyn_DateReceived = null;
		
		public readonly EntityReference msdyn_PurchaseOrder = null;
		
		public readonly EntityReference msdyn_ShipVia = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("stringmap")]
	public class StringMap : Entity
    {
        public const string EntityLogicalName = "stringmap";
        public StringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("stringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["stringmapid"] = value;
            }
        }
		
		public readonly int? AttributeValue = null;
		
		public readonly int? DisplayOrder = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string AttributeName = null;
		
		public readonly string Value = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly int? LangId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly Guid? StringMapId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projecttransactioncategory")]
	public class msdyn_projecttransactioncategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_projecttransactioncategory";
        public msdyn_projecttransactioncategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projecttransactioncategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projecttransactioncategoryid"] = value;
            }
        }
		
		public readonly Guid? msdyn_projecttransactioncategoryId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly EntityReference msdyn_Project = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("quotedetail")]
	public class QuoteDetail : Entity
    {
        public const string EntityLogicalName = "quotedetail";
        public QuoteDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("quotedetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["quotedetailid"] = value;
            }
        }
		
		public readonly EntityReference ParentBundleIdRef = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference msdyn_SalesTaxCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? msdyn_EstimatedMargin = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly bool? WillCall = null;
		
		public readonly string ProductName = null;
		
		public readonly string msdyn_linedescription = null;
		
		public readonly string ProductDescription = null;
		
		public readonly OptionSetValue QuoteStateCode = null;
		
		public readonly DateTime? msdyn_StartDate = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly Money msdyn_costpriceperunit_Base = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly EntityReference msdyn_ServiceAccount = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly Money msdyn_BudgetAmount = null;
		
		public readonly bool? msdyn_IncludeFee = null;
		
		public readonly bool? msdyn_IncludeExpense = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? msdyn_BillingStartDate = null;
		
		public readonly Money msdyn_estimatedrevenue_Base = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly bool? msdyn_IncludeTime = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly Money msdyn_costamount_Base = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly Money msdyn_CostPricePerUnit = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Money msdyn_budgetamount_Base = null;
		
		public readonly Money Tax = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly OptionSetValue SkipPriceCalculation = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? msdyn_IncludeMaterial = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly DateTime? msdyn_EndDate = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly Money msdyn_EstimatedCost = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_CostAmount = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money msdyn_EstimatedRevenue = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string msdyn_OpportunityLine = null;
		
		public readonly OptionSetValue msdyn_BillingMethod = null;
		
		public readonly OptionSetValue msdyn_LineType = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Guid? QuoteDetailId = null;
		
		public readonly Money ExtendedAmount = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string QuoteDetailName = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly bool? msdyn_ImportDetailsFromAgreement = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money msdyn_estimatedcost_Base = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly EntityReference msdyn_invoicefrequency = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly Guid? ProductAssociationId = null;

        public new static class Options
        {
            public enum QuoteStateCode
            {

            }
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37,
                TransactionCurrencyIsNotSetForTheProductPriceListItem = 38
            }
            public enum SkipPriceCalculation
            {
                DoPriceCalcAlways = 0,
                SkipPriceCalcOnCreate = 1,
                SkipPriceCalcOnUpdate = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum msdyn_BillingMethod
            {
                TimeAndMaterial = 192350000,
                FixedPrice = 192350001
            }
            public enum msdyn_LineType
            {
                ProjectServiceLine = 690970000,
                FieldServiceLine = 690970001
            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_estimate")]
	public class msdyn_estimate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_estimate";
        public msdyn_estimate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_estimateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_estimateid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_estimateheadertype = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly Guid? msdyn_estimateId = null;
		
		public readonly EntityReference msdyn_Project = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_estimateheadertype
            {
                ResourceBasedEstimate = 192350000,
                ActivityBasedEstimate = 192350001,
                AssignmentBasedEstimate = 192350002,
                CustomEstimate = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("tracelog")]
	public class TraceLog : Entity
    {
        public const string EntityLogicalName = "tracelog";
        public TraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("tracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["tracelogid"] = value;
            }
        }
		
		public readonly Guid? TraceLogId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? TraceStatus = null;
		
		public readonly bool? IsUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference ParentTraceLogId = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly string ErrorTypeDisplay = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string TraceDetailXml = null;
		
		public readonly EntityReference TraceRegardingId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraceActionXml = null;
		
		public readonly string TraceParameterXml = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Text = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly int? TraceParameterHash = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly string MachineName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue Level = null;
		
		public readonly int? CollationLevel = null;
		
		public readonly int? TraceCode = null;
		
		public readonly string ErrorDetails = null;

        public new static class Options
        {
            public enum Level
            {
                Information = 1,
                Warning = 2,
                Error = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("owner")]
	public class Owner : Entity
    {
        public const string EntityLogicalName = "owner";
        public Owner() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownerid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? OwnerId = null;
		
		public readonly string OwnerIdType = null;
		
		public readonly string YomiName = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("untrackedemail")]
	public class UntrackedEmail : Entity
    {
        public const string EntityLogicalName = "untrackedemail";
        public UntrackedEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_forecastinstance")]
	public class msdyn_forecastinstance : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_forecastinstance";
        public msdyn_forecastinstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_forecastinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_forecastinstanceid"] = value;
            }
        }
		
		public readonly decimal? msdyn_percentageachieved = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_forecastname = null;
		
		public readonly Money msdyn_manualbestcaseamount = null;
		
		public readonly Money msdyn_actualamount_Base = null;
		
		public readonly int? msdyn_ismanualbestcase = null;
		
		public readonly Money msdyn_pipelineamount = null;
		
		public readonly Money msdyn_manualbestcaseamount_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? msdyn_ismanualpipeline = null;
		
		public readonly int? msdyn_recurrenceindex = null;
		
		public readonly int? msdyn_level = null;
		
		public readonly int? msdyn_forecastinstancetype = null;
		
		public readonly Money msdyn_manualpipelineamount_Base = null;
		
		public readonly Money msdyn_committedamount = null;
		
		public readonly Guid? msdyn_forecastinstanceId = null;
		
		public readonly Money msdyn_manualpipelineamount = null;
		
		public readonly Money msdyn_manualcommittedamount = null;
		
		public readonly EntityReference msdyn_forecastparentid = null;
		
		public readonly Money msdyn_pipelineamount_Base = null;
		
		public readonly EntityReference msdyn_forecastrecurrenceid = null;
		
		public readonly bool? msdyn_isquotasourcemanual = null;
		
		public readonly Money msdyn_targetamount_Base = null;
		
		public readonly int? msdyn_ismanualcommitted = null;
		
		public readonly Money msdyn_committedamount_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_forecastdefinitionid = null;
		
		public readonly Money msdyn_actualamount = null;
		
		public readonly EntityReference msdyn_matchinggoalid = null;
		
		public readonly Money msdyn_bestcaseamount_Base = null;
		
		public readonly Money msdyn_targetamount = null;
		
		public readonly Money msdyn_bestcaseamount = null;
		
		public readonly Money msdyn_manualcommittedamount_Base = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dependency")]
	public class Dependency : Entity
    {
        public const string EntityLogicalName = "dependency";
        public Dependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyid"] = value;
            }
        }
		
		public readonly Guid? DependentComponentParentId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue DependentComponentType = null;
		
		public readonly Guid? DependencyId = null;
		
		public readonly EntityReference RequiredComponentNodeId = null;
		
		public readonly double? RequiredComponentIntroducedVersion = null;
		
		public readonly Guid? DependentComponentObjectId = null;
		
		public readonly Guid? DependentComponentBaseSolutionId = null;
		
		public readonly EntityReference DependentComponentNodeId = null;
		
		public readonly OptionSetValue DependencyType = null;
		
		public readonly Guid? RequiredComponentParentId = null;
		
		public readonly OptionSetValue RequiredComponentType = null;
		
		public readonly Guid? RequiredComponentObjectId = null;
		
		public readonly Guid? RequiredComponentBaseSolutionId = null;

        public new static class Options
        {
            public enum DependentComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }
            public enum DependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }
            public enum RequiredComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Privilege = 16,
                PrivilegeObjectTypeCode = 17,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                ComplexControl = 64,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68,
                DataSourceMapping = 166,
                SDKMessage = 201,
                SDKMessageFilter = 202,
                SdkMessagePair = 203,
                SdkMessageRequest = 204,
                SdkMessageRequestField = 205,
                SdkMessageResponse = 206,
                SdkMessageResponseField = 207,
                WebWizard = 210,
                Index = 18,
                ImportMap = 208,
                CanvasApp = 300,
                Connector = 371,
                Connector1 = 372,
                AIProjectType = 400,
                AIProject = 401,
                AIConfiguration = 402
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("teamprofiles")]
	public class TeamProfiles : Entity
    {
        public const string EntityLogicalName = "teamprofiles";
        public TeamProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamprofileid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TeamProfileId = null;
		
		public readonly Guid? FieldSecurityProfileId = null;
		
		public readonly Guid? TeamId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ownermapping")]
	public class OwnerMapping : Entity
    {
        public const string EntityLogicalName = "ownermapping";
        public OwnerMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownermappingid"] = value;
            }
        }
		
		public readonly string TargetUserValueForSourceCRMUserLink = null;
		
		public readonly string SourceUserValueForSourceCRMUserLink = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string SourceSystemUserName = null;
		
		public readonly Guid? OwnerMappingIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference TargetSystemUserId = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string TargetSystemUserDomainName = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? OwnerMappingId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_databaseversion")]
	public class msdyn_databaseversion : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_databaseversion";
        public msdyn_databaseversion() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_databaseversionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_databaseversionid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_solutionname = null;
		
		public readonly int? msdyn_dbversion = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdyn_databaseversionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workhourtemplate")]
	public class msdyn_workhourtemplate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workhourtemplate";
        public msdyn_workhourtemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workhourtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workhourtemplateid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_calendarid = null;
		
		public readonly Guid? msdyn_workhourtemplateId = null;
		
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_bookableresourceid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("interprocesslock")]
	public class InterProcessLock : Entity
    {
        public const string EntityLogicalName = "interprocesslock";
        public InterProcessLock() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interprocesslockid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interprocesslockid"] = value;
            }
        }
		
		public readonly Guid? Token = null;
		
		public readonly Guid? InterProcessLockId = null;
		
		public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreement")]
	public class msdyn_agreement : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreement";
        public msdyn_agreement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_SalesTaxCode = null;
		
		public readonly DateTime? msdyn_DateCanceled = null;
		
		public readonly DateTime? msdyn_StartDate = null;
		
		public readonly string msdyn_AutoNumbering = null;
		
		public readonly EntityReference msdyn_ServiceTerritory = null;
		
		public readonly EntityReference msdyn_ServiceAccount = null;
		
		public readonly EntityReference msdyn_BillingAccount = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;
		
		public readonly DateTime? msdyn_EndDate = null;
		
		public readonly DateTime? msdyn_AgreementRecordGeneration = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_SubStatus = null;
		
		public readonly string msdyn_AgreementDetails = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_agreementId = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Guid? stageid = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly EntityReference msdyn_OriginatingAgreement = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly int? msdyn_ChildIndex = null;

        public new static class Options
        {
            public enum msdyn_SystemStatus
            {
                Estimate = 690970000,
                Active = 690970001,
                Expired = 690970002,
                Canceled = 690970003
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_componentlayer")]
	public class msdyn_componentlayer : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_componentlayer";
        public msdyn_componentlayer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_componentlayerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_componentlayerid"] = value;
            }
        }
		
		public readonly string msdyn_componentid = null;
		
		public readonly string msdyn_solutioncomponentname = null;
		
		public readonly string msdyn_componentjson = null;
		
		public readonly string msdyn_publishername = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_overwritetime")]
		public readonly DateTime? msdyn_endtime = null;
		
		public readonly int? msdyn_order = null;
		
		public readonly string msdyn_solutionname = null;
		
		public readonly Guid? msdyn_componentlayerId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_changes = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("complexcontrol")]
	public class ComplexControl : Entity
    {
        public const string EntityLogicalName = "complexcontrol";
        public ComplexControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("complexcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["complexcontrolid"] = value;
            }
        }
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string ComplexControlXml = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Version = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? ComplexControlIdUnique = null;
		
		public readonly Guid? ComplexControlId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum Type
            {
                ProcessControl = 0,
                LinkControl = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseorderreceiptproduct")]
	public class msdyn_purchaseorderreceiptproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseorderreceiptproduct";
        public msdyn_purchaseorderreceiptproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderreceiptproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseorderreceiptproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_PurchaseOrderReceipt = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly EntityReference msdyn_AssociateToWarehouse = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_PurchaseOrderBill = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_PurchaseOrderProduct = null;
		
		public readonly EntityReference msdyn_AssociateToWorkOrder = null;
		
		public readonly Money msdyn_UnitCost = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_AssociateToBooking = null;
		
		public readonly Guid? msdyn_purchaseorderreceiptproductId = null;
		
		public readonly Money msdyn_unitcost_Base = null;
		
		public readonly EntityReference msdyn_PurchaseOrder = null;
		
		public readonly Money msdyn_TotalCost = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_analysisresult")]
	public class msdyn_analysisresult : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_analysisresult";
        public msdyn_analysisresult() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_analysisresultid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_analysisresultid"] = value;
            }
        }
		
		public readonly string msdyn_MessageId = null;
		
		public readonly OptionSetValue msdyn_AnalysisComponentType = null;
		
		public readonly Guid? msdyn_analysisresultId = null;
		
		public readonly OptionSetValue msdyn_Level = null;
		
		public readonly EntityReference msdyn_AnalysisJobId = null;
		
		public readonly string msdyn_FileUri = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_Severity = null;
		
		public readonly OptionSetValue msdyn_ComponentType = null;
		
		public readonly bool? msdyn_HasResolution = null;
		
		public readonly string msdyn_RuleReferenceUri = null;
		
		public readonly int? msdyn_Line = null;
		
		public readonly string msdyn_MessageArguments = null;
		
		public readonly OptionSetValue msdyn_Category = null;
		
		public readonly OptionSetValue msdyn_ReturnStatus = null;
		
		public readonly string msdyn_Type = null;
		
		public readonly string msdyn_Member = null;
		
		public readonly string msdyn_Module = null;
		
		public readonly string msdyn_Message = null;
		
		public readonly string msdyn_RuleId = null;
		
		public readonly string msdyn_EntityName = null;
		
		public readonly EntityReference msdyn_AnalysisComponentId = null;
		
		public readonly string msdyn_Snippet = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_AnalysisComponentType
            {
                OrganizationHealth = 192350000,
                ComponentHealth = 192350001
            }
            public enum msdyn_Level
            {
                Error = 192350000,
                Warning = 192350001
            }
            public enum msdyn_Severity
            {
                Low = 192350000,
                Medium = 192350001,
                High = 192350002,
                Critical = 192350003
            }
            public enum msdyn_ComponentType
            {
                WebResources = 192350000,
                PlugIn = 192350001,
                Configuration = 192350002
            }
            public enum msdyn_Category
            {
                Design = 192350004,
                Maintainability = 192350006,
                OnlineMigration = 192350005,
                Performance = 192350000,
                Security = 192350003,
                Supportability = 192350007,
                UpgradeReadiness = 192350001,
                Usage = 192350002
            }
            public enum msdyn_ReturnStatus
            {
                Resolved = 192350003,
                Pass = 192350000,
                Fail = 192350001,
                ConfigError = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("newprocess")]
	public class NewProcess : Entity
    {
        public const string EntityLogicalName = "newprocess";
        public NewProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemapplicationmetadata")]
	public class SystemApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "systemapplicationmetadata";
        public SystemApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemapplicationmetadataid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? FormFactor = null;
		
		public readonly Guid? SystemApplicationMetadataId = null;
		
		public readonly string DisplayName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Lcid = null;
		
		public readonly int? MetadataType = null;
		
		public readonly int? MetadataSubtype = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Version = null;
		
		public readonly string SourceId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string AssociatedEntityLogicalName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Dependency = null;
		
		public readonly int? State = null;
		
		public readonly string Data = null;
		
		public readonly bool? IsDefault = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("publisheraddress")]
	public class PublisherAddress : Entity
    {
        public const string EntityLogicalName = "publisheraddress";
        public PublisherAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisheraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisheraddressid"] = value;
            }
        }
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string City = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly double? Latitude = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string County = null;
		
		public readonly string Country = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly Guid? PublisherAddressId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string PrimaryContactName = null;
		
		public readonly double? Longitude = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string Telephone3 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string PostalCode = null;
		
		public readonly string Line1 = null;
		
		public readonly string Line2 = null;
		
		public readonly string Line3 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ShippingMethodCode
            {
                Default = 1
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("officedocument")]
	public class OfficeDocument : Entity
    {
        public const string EntityLogicalName = "officedocument";
        public OfficeDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officedocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officedocumentid"] = value;
            }
        }
		
		public readonly string SHA256 = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ClientData = null;
		
		public readonly int? FileSize = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? FileLockState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? OfficeDocumentId = null;
		
		public readonly string Content = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_wallsavedquery")]
	public class msdyn_wallsavedquery : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_wallsavedquery";
        public msdyn_wallsavedquery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_wallsavedqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_wallsavedqueryid"] = value;
            }
        }
		
		public readonly Guid? msdyn_wallsavedqueryId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_entityname = null;
		
		public readonly EntityReference msdyn_postconfigurationid = null;
		
		public readonly bool? msdyn_IsVirtual = null;
		
		public readonly int? msdyn_otc = null;
		
		public readonly bool? msdyn_IsVisible = null;
		
		public readonly string msdyn_SavedQueryId = null;
		
		public readonly string msdyn_entitydisplayname = null;
		
		public readonly int? msdyn_isvisiblebit = null;
		
		public readonly string msdyn_savedqueryname = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_expensecategory")]
	public class msdyn_expensecategory : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_expensecategory";
        public msdyn_expensecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_expensecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_expensecategoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ExpenseCategoryuId = null;
		
		public readonly OptionSetValue msdyn_ExpenseType = null;
		
		public readonly OptionSetValue msdyn_ReceiptRequired = null;
		
		public readonly Guid? msdyn_expensecategoryId = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_ExpenseType
            {
                CarRental = 192350001,
                Meal = 192350002,
                Airline = 192350003,
                Entertainment = 192350004,
                Gift = 192350005,
                Conference = 192350006,
                Miscellaneous = 192350007,
                Mileage = 192350008,
                PerDiem = 192350009,
                Hotel = 192350000
            }
            public enum msdyn_ReceiptRequired
            {
                Optional = 192350000,
                Mandatory = 192350001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdeviceregistrationhistory")]
	public class msdyn_iotdeviceregistrationhistory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdeviceregistrationhistory";
        public msdyn_iotdeviceregistrationhistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdeviceregistrationhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdeviceregistrationhistoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_iotdeviceregistrationhistoryId = null;
		
		public readonly OptionSetValue msdyn_Action = null;
		
		public readonly EntityReference msdyn_Device = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Action
            {
                Register = 192350000,
                Unregister = 192350001,
                Activate = 192350002,
                Deactivate = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mailboxstatistics")]
	public class MailboxStatistics : Entity
    {
        public const string EntityLogicalName = "mailboxstatistics";
        public MailboxStatistics() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxstatisticsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxstatisticsid"] = value;
            }
        }
		
		public readonly Guid? MailboxStatisticsId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CrmItemsBacklog = null;
		
		public readonly int? ItemsProcessed = null;
		
		public readonly DateTime? MailboxProcessScheduledOn = null;
		
		public readonly DateTime? MailboxProcessStartedOn = null;
		
		public readonly string IndividualStepDurations = null;
		
		public readonly int? ScheduledTimeIntervalInMinutes = null;
		
		public readonly Guid? AsyncEventId = null;
		
		public readonly int? ItemsFailed = null;
		
		public readonly string MachineName = null;
		
		public readonly bool? ProcessResult = null;
		
		public readonly OptionSetValue OperationTypeId = null;
		
		public readonly EntityReference MailboxId = null;
		
		public readonly DateTime? MailboxProcessCompletedOn = null;
		
		public readonly int? ProcessTimeIntervalInMinutes = null;

        public new static class Options
        {
            public enum OperationTypeId
            {
                IncomingEmail = 0,
                OutgoingEmail = 1,
                ACT = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("lookupmapping")]
	public class LookUpMapping : Entity
    {
        public const string EntityLogicalName = "lookupmapping";
        public LookUpMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("lookupmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["lookupmappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue LookUpSourceCode = null;
		
		public readonly EntityReference ColumnMappingId = null;
		
		public readonly Guid? LookUpMappingId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string LookUpEntityName = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string LookUpAttributeName = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? LookUpMappingIdUnique = null;
		
		public readonly EntityReference TransformationParameterMappingId = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 0
            }
            public enum LookUpSourceCode
            {
                Source = 0,
                System = 1
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contactleads")]
	public class ContactLeads : Entity
    {
        public const string EntityLogicalName = "contactleads";
        public ContactLeads() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactleadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactleadid"] = value;
            }
        }
		
		public readonly Guid? LeadId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? ContactLeadId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userform")]
	public class UserForm : Entity
    {
        public const string EntityLogicalName = "userform";
        public UserForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userformid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userformid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsTabletEnabled = null;
		
		public readonly string FormXml = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string FormJson = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? UserFormId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum Type
            {
                Dashboard = 0,
                PowerBIDashboard = 103
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("solutionhistorydata")]
	public class SolutionHistoryData : Entity
    {
        public const string EntityLogicalName = "solutionhistorydata";
        public SolutionHistoryData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutionhistorydataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutionhistorydataid"] = value;
            }
        }
		
		public readonly Guid? ActivityId = null;
		
		public readonly OptionSetValue Operation = null;
		
		public readonly string SolutionName = null;
		
		public readonly string ExceptionMessage = null;
		
		public readonly bool? IsMicrosoftPublisher = null;
		
		public readonly bool? IsPatch = null;
		
		public readonly string ExceptionStack = null;
		
		public readonly Guid? SolutionHistoryDataId = null;
		
		public readonly string PackageVersion = null;
		
		public readonly int? Result = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly string SolutionVersion = null;
		
		public readonly OptionSetValue SubOperation = null;
		
		public readonly Guid? CorrelationId = null;
		
		public readonly string PackageName = null;
		
		public readonly string PublisherName = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly bool? IsOverwriteCustomizations = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum Operation
            {
                Import = 0,
                Uninstall = 1,
                Export = 2
            }
            public enum SubOperation
            {
                None = 0,
                New = 1,
                Upgrade = 2,
                Update = 3,
                Delete = 4
            }
            public enum Status
            {
                Start = 0,
                End = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttypeproduct")]
	public class msdyn_incidenttypeproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttypeproduct";
        public msdyn_incidenttypeproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypeproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypeproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_InternalDescription = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly Guid? msdyn_incidenttypeproductId = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly double? msdyn_Quantity = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutionhistory")]
	public class msdyn_solutionhistory : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhistory";
        public msdyn_solutionhistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhistoryid"] = value;
            }
        }
		
		public readonly string msdyn_activityid = null;
		
		public readonly bool? msdyn_result = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_publisherid = null;
		
		public readonly string msdyn_publishername = null;
		
		public readonly string msdyn_exceptionmessage = null;
		
		public readonly string msdyn_packageversion = null;
		
		public readonly bool? msdyn_ismanaged = null;
		
		public readonly bool? msdyn_isoverwritecustomizations = null;
		
		public readonly string msdyn_solutionid = null;
		
		public readonly string msdyn_correlationid = null;
		
		public readonly bool? msdyn_ispatch = null;
		
		public readonly OptionSetValue msdyn_status = null;
		
		public readonly OptionSetValue msdyn_suboperation = null;
		
		public readonly Guid? msdyn_solutionhistoryId = null;
		
		public readonly string msdyn_exceptionstack = null;
		
		public readonly string msdyn_packagename = null;
		
		public readonly string msdyn_solutionversion = null;
		
		public readonly string msdyn_errorcode = null;
		
		public readonly int? msdyn_totaltime = null;
		
		public readonly OptionSetValue msdyn_operation = null;
		
		public readonly DateTime? msdyn_starttime = null;
		
		public readonly DateTime? msdyn_endtime = null;

        public new static class Options
        {
            public enum msdyn_status
            {
                Started = 0,
                Completed = 1
            }
            public enum msdyn_suboperation
            {
                None = 0,
                New = 1,
                Upgrade = 2,
                Update = 3,
                Delete = 4
            }
            public enum msdyn_operation
            {
                Import = 0,
                Uninstall = 1,
                Export = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("workflowdependency")]
	public class WorkflowDependency : Entity
    {
        public const string EntityLogicalName = "workflowdependency";
        public WorkflowDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowdependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowdependencyid"] = value;
            }
        }
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? WorkflowDependencyId = null;
		
		public readonly string CustomEntityName = null;
		
		public readonly string RelatedAttributeName = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly string DependentEntityName = null;
		
		public readonly string EntityAttributes = null;
		
		public readonly string RelatedEntityName = null;
		
		public readonly string DependentAttributeName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ParameterName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ParameterType = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum Type
            {
                SdkAssociation = 1,
                LocalParameter = 2,
                PrimaryEntity = 3,
                PrimaryEntityBeforeSDKOperation = 4,
                PrimaryEntityAfterSDKOperation = 5,
                RelatedEntity = 6,
                CustomEntityDefinitionThatWorkflowDependsOn = 7,
                AttributeDefinitionThatWorkflowDependsOn = 8,
                ArgumentEntityThatWorkflowDependsOn = 9
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("mailboxtrackingcategory")]
	public class MailboxTrackingCategory : Entity
    {
        public const string EntityLogicalName = "mailboxtrackingcategory";
        public MailboxTrackingCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxtrackingcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxtrackingcategoryid"] = value;
            }
        }
		
		public readonly Guid? MailboxTrackingCategoryId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ExchangeCategoryId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? CategoryOnboardingStatus = null;
		
		public readonly EntityReference MailboxId = null;
		
		public readonly int? ExchangeCategoryColor = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string ExchangeCategoryName = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("connectionroleassociation")]
	public class ConnectionRoleAssociation : Entity
    {
        public const string EntityLogicalName = "connectionroleassociation";
        public ConnectionRoleAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleassociationid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? AssociatedConnectionRoleId = null;
		
		public readonly Guid? ConnectionRoleAssociationId = null;
		
		public readonly Guid? ConnectionRoleId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseorderbill")]
	public class msdyn_purchaseorderbill : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseorderbill";
        public msdyn_purchaseorderbill() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderbillid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseorderbillid"] = value;
            }
        }
		
		public readonly Money msdyn_subtotal_Base = null;
		
		public readonly Money msdyn_TotalAmount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_ShippingAmount = null;
		
		public readonly Money msdyn_TaxAmount = null;
		
		public readonly Money msdyn_shippingamount_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly string msdyn_Note = null;
		
		public readonly Money msdyn_taxamount_Base = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_TaxCode = null;
		
		public readonly Guid? processid = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? msdyn_purchaseorderbillId = null;
		
		public readonly EntityReference msdyn_PaymentTerm = null;
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly DateTime? msdyn_BillDate = null;
		
		public readonly Money msdyn_Subtotal = null;
		
		public readonly EntityReference msdyn_PurchaseOrder = null;
		
		public readonly string msdyn_VendorInvoiceNumber = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionsyncentryoutlook")]
	public class SubscriptionSyncEntryOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoutlook";
        public SubscriptionSyncEntryOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? SyncState = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("syncattributemappingprofile")]
	public class SyncAttributeMappingProfile : Entity
    {
        public const string EntityLogicalName = "syncattributemappingprofile";
        public SyncAttributeMappingProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingprofileid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? SyncAttributeMappingProfileIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SyncAttributeMappingProfileId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_contractlinescheduleofvalue")]
	public class msdyn_contractlinescheduleofvalue : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_contractlinescheduleofvalue";
        public msdyn_contractlinescheduleofvalue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_contractlinescheduleofvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_contractlinescheduleofvalueid"] = value;
            }
        }
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? msdyn_Invoicedate = null;
		
		public readonly Money msdyn_price = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_externaldescription = null;
		
		public readonly EntityReference msdyn_contract = null;
		
		public readonly Money msdyn_amount = null;
		
		public readonly Money msdyn_tax = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly Money msdyn_tax_Base = null;
		
		public readonly Money msdyn_amount_after_tax_Base = null;
		
		public readonly string msdyn_description = null;
		
		public readonly Money msdyn_amount_after_tax = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string msdyn_ContractLineDescription = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly Guid? msdyn_contractlinescheduleofvalueId = null;
		
		public readonly EntityReference msdyn_projecttask = null;
		
		public readonly OptionSetValue msdyn_Invoicestatus = null;
		
		public readonly EntityReference msdyn_ContractLineId = null;
		
		public readonly EntityReference msdyn_project = null;
		
		public readonly DateTime? msdyn_startdatetime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_Invoicestatus
            {
                NotReadyForInvoicing = 192350000,
                ReadyForInvoicing = 192350001,
                CustomerInvoiceCreated = 192350002,
                CustomerInvoicePosted = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_approval")]
	public class msdyn_approval : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_approval";
        public msdyn_approval() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly EntityCollection From = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly EntityCollection CC = null;
		
		public readonly EntityCollection BCC = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly OptionSetValue msdyn_approvalstatus = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityCollection To = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference msdyn_Characteristic = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum msdyn_approvalstatus
            {
                Saved = 192350000,
                PendingApproval = 192350001,
                Rejected = 192350002,
                Approved = 192350003,
                Recalled = 192350004
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dynamicpropertyassociation")]
	public class DynamicPropertyAssociation : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyassociation";
        public DynamicPropertyAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyassociationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue AssociationStatus = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue InheritanceState = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? DynamicPropertyAssociationId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference DynamicPropertyId = null;

        public new static class Options
        {
            public enum AssociationStatus
            {
                Active = 0,
                Deleted = 1,
                Draft = 2,
                DraftAdded = 3,
                DraftDeleted = 4
            }
            public enum InheritanceState
            {
                Inherited = 0,
                Overridden = 1,
                Owned = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sla")]
	public class SLA : Entity
    {
        public const string EntityLogicalName = "sla";
        public SLA() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string ChangedAttributeList = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? SLAId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue SLAType = null;
		[System.ComponentModel.Description("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? AllowPauseResume = null;
		
		public readonly Guid? SLAIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference BusinessHoursId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue ApplicableFromPickList = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly int? PrimaryEntityOTC = null;
		
		public readonly string ApplicableFrom = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ObjectTypeCode = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum SLAType
            {
                Standard = 0,
                Enhanced = 1
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ApplicableFromPickList
            {
                No = 1,
                Yes = 2
            }
            public enum ObjectTypeCode
            {
                WorkOrderIncident = 10240,
                WorkOrderDetailsGenerationQueueDeprecated = 10239,
                WorkOrderProduct = 10241,
                WorkOrderService = 10243,
                ResourceRestrictionDeprecated = 10242,
                Warehouse = 10236,
                Filter = 10036,
                WorkTemplate = 10073,
                WorkOrderCharacteristicDeprecated = 10238,
                WorkOrder = 10237,
                SettingsSiteMap = 10270,
                ServicesSiteMap = 10269,
                SurveyEmailTemplate = 10037,
                SurveyQuestionResponse = 10039,
                SurveyQuestion = 10038,
                WorkOrderSubstatus = 10245,
                WorkOrderServiceTask = 10244,
                WorkOrderType = 10246,
                SalesSiteMap = 10268,
                MarketingSiteMap = 10267,
                WallView = 10035,
                TimeOffRequest = 10234,
                TimeOffCalendar = 10141,
                TransactionCategory = 10142,
                TransactionCategoryHierarchyElement = 10144,
                TransactionCategoryClassification = 10143,
                MicrosoftTeamsCollaborationEntity = 10044,
                TaxCodeDetail = 10233,
                TimeEntry = 10140,
                TimeGroupDetail = 10071,
                FulfillmentPreference = 10070,
                UpgradeRun = 10008,
                UntrackedAppointment = 10029,
                UpgradeStep = 10009,
                UserWorkHistory = 10148,
                UpgradeVersion = 10010,
                TransactionConnection = 10146,
                TransactionCategoryPrice = 10145,
                TransactionOrigin = 10072,
                UniqueNumber = 10235,
                TransactionType = 10147,
                Survey = 10040,
                PartnerApplication = 1095,
                OwnerMapping = 4420,
                PersonalDocumentTemplate = 9941,
                PhoneToCaseProcess = 952,
                PhoneCall = 4210,
                OrganizationUI = 1021,
                OrganizationStatistic = 4708,
                OrganizationInsightsMetric = 9699,
                Owner = 7,
                OrganizationInsightsNotification = 9690,
                Post = 8000,
                Position = 50,
                Comment = 8005,
                Like = 8006,
                Follow = 8003,
                PlugInAssembly = 4605,
                ListValueMapping = 4418,
                PlugInTraceLog = 4619,
                PlugInTypeStatistic = 4603,
                PlugInType = 4602,
                Organization = 1019,
                Child = 10274,
                NavigationSetting = 9900,
                Master = 10273,
                NewProcess = 950,
                OrderSummary = 10272,
                SurveyResponse = 10042,
                SurveyInvite = 10041,
                UnsubscribedRecipient = 10043,
                MultiSelectOptionValue = 9912,
                MultiEntitySearch = 9910,
                OpportunityCompetitors = 25,
                OpportunityClose = 4208,
                OpportunityLine = 1083,
                OrderClose = 4209,
                OpportunitySalesProcess = 953,
                OfficeDocument = 4490,
                Notification = 4110,
                OfficeGraphDocument = 9950,
                Opportunity = 3,
                OfflineCommandDefinition = 9870,
                QuoteBookingProduct = 10215,
                QuoteBookingIncident = 10214,
                QuoteBookingService = 10216,
                QuoteBookingSetup = 10218,
                QuoteBookingServiceTask = 10217,
                PurchaseOrderProduct = 10210,
                PurchaseOrderBill = 10209,
                PurchaseOrderReceipt = 10211,
                PurchaseOrderSubStatus = 10213,
                PurchaseOrderReceiptProduct = 10212,
                QuoteLineDetail = 10129,
                QuoteLineMilestone = 10128,
                QuoteLineTransactionCategory = 10130,
                QuoteProjectPriceList = 10132,
                QuoteLineTransactionClassification = 10131,
                QuoteInvoicingSetup = 10220,
                QuoteInvoicingProduct = 10219,
                QuoteLineAnalyticsBreakdown = 10125,
                QuoteLineResourceCategory = 10127,
                QuoteLineInvoiceSchedule = 10126,
                PurchaseOrder = 10208,
                Priority = 10056,
                PostRuleConfiguration = 10034,
                ProcessNotes = 10113,
                Project = 10114,
                ProductInventory = 10207,
                PlaybookTemplate = 10016,
                Playbook = 10015,
                ProfileAlbum = 10032,
                PostConfiguration = 10033,
                PostalCode = 10206,
                ProjectTaskStatusUser = 10121,
                ProjectTaskDependency = 10120,
                ProjectTeamMember = 10122,
                ProjectTransactionCategoryDeprecated = 10124,
                ProjectTeamMemberSignUpDeprecatedInV30 = 10123,
                ProjectParameter = 10116,
                ProjectApproval = 10115,
                ProjectParameterPriceList = 10117,
                ProjectTask = 10119,
                ProjectPriceList = 10118,
                MsdynRelationshipinsightsunifiedconfig = 10022,
                ScheduleBoardSetting = 10067,
                Salesinsightssettings = 10028,
                SchedulingParameter = 10068,
                ShipVia = 10231,
                ServiceTaskType = 10230,
                RoleUtilization = 10139,
                RoleCompetencyRequirement = 10138,
                RTV = 10227,
                RTVSubstatus = 10229,
                RTVProduct = 10228,
                SolutionHistory = 10003,
                SolutionHealthRuleSet = 10162,
                SolutionHistoryDataSource = 10004,
                TaxCode = 10232,
                SystemUserSchedulerSetting = 10069,
                SolutionComponentDataSource = 10002,
                Siconfig = 10023,
                SolutionComponentSummary = 10001,
                SolutionHealthRuleArgument = 10161,
                SolutionHealthRule = 10160,
                RMASubStatus = 10226,
                RequirementStatus = 10063,
                RequirementResourcePreference = 10062,
                ResourceAssignment = 10133,
                RolePriceMarkup = 10135,
                ResourceAssignmentDetailDeprecatedInV20 = 10134,
                RequirementGroup = 10058,
                RequirementCharacteristic = 10057,
                RequirementOrganizationUnit = 10059,
                RequirementResourceCategory = 10061,
                RequirementRelationship = 10060,
                RMA = 10222,
                ResourceTerritory = 10066,
                RMAProduct = 10223,
                RMAReceiptProduct = 10225,
                RMAReceipt = 10224,
                ResourcePayType = 10221,
                RolePrice = 10136,
                ResourceRequest = 10137,
                ResourceRequirementDetail = 10065,
                ResourceRequirement = 10064,
                SyncAttributeMapping = 1401,
                SuggestionCardTemplate = 1190,
                SyncAttributeMappingProfile = 1400,
                SystemApplicationMetadata = 7000,
                SyncError = 9869,
                SubscriptionSyncEntryOffline = 47,
                SubscriptionStatisticOutlook = 46,
                SubscriptionSyncEntryOutlook = 48,
                TrackingInformationForDeletedEntities = 35,
                SubscriptionSynchronizationInformation = 33,
                Team = 9,
                Task = 4212,
                TeamProfiles = 1203,
                TeamTemplate = 92,
                TeamSyncAttributeMappingProfiles = 1403,
                User = 8,
                SystemForm = 1030,
                SystemUserBusinessUnitEntityMap = 42,
                SystemUserPrincipal = 14,
                SystemUserManagerMap = 51,
                SubscriptionStatisticOffline = 45,
                SLAKPIInstance = 9752,
                SLAItem = 9751,
                SocialActivity = 4216,
                SocialProfile = 99,
                SocialInsightsConfiguration = 1300,
                SimilarityRule = 9951,
                SharePointSite = 9502,
                Site = 4009,
                SLA = 9750,
                SiteMap = 4709,
                Subject = 129,
                StringMap = 1043,
                Subscription = 29,
                SubscriptionManuallyTrackedObject = 37,
                SubscriptionClients = 1072,
                SolutionComponent = 7103,
                Solution = 7100,
                SolutionComponentDefinition = 7104,
                StatusMap = 1075,
                SolutionHistoryData = 9890,
                EmailTemplate = 2010,
                UserDashboard = 1031,
                UserFiscalCalendar = 1086,
                UserMapping = 2016,
                UserChart = 1112,
                SavedView = 4230,
                UnitGroup = 1056,
                Unit = 1055,
                UserApplicationMetadata = 7001,
                UserEntityUISettings = 2500,
                UserEntityInstanceData = 2501,
                Process = 4703,
                WizardPage = 4802,
                ProcessDependency = 4704,
                WorkflowWaitSubscription = 4702,
                ProcessLog = 4706,
                UserSettings = 150,
                UserSearchFacet = 52,
                WebResource = 9333,
                WebWizardAccessPrivilege = 4803,
                WebWizard = 4800,
                UntrackedEmail = 4220,
                TimeZoneRule = 4811,
                TimeZoneLocalizedName = 4812,
                TextAnalyticsTopic = 9948,
                TopicModel = 9944,
                TopicHistory = 9946,
                TextAnalyticsEntityMapping = 9945,
                Territory = 2013,
                Theme = 2015,
                TimeZoneDefinition = 4810,
                TimeStampDateMapping = 9932,
                TransformationMapping = 4426,
                Currency = 9105,
                TransformationParameterMapping = 4427,
                UnresolvedAddress = 2012,
                TranslationProcess = 951,
                TopicModelExecutionHistory = 9943,
                TopicModelConfiguration = 9942,
                TraceAssociation = 8051,
                TraceRegarding = 8052,
                Trace = 8050,
                DocumentSuggestions = 1189,
                RatingValue = 1142,
                RecurrenceRule = 4250,
                RelationshipRole = 4500,
                RecurringAppointment = 4251,
                Quote = 1084,
                QueueMemberCount = 2024,
                QuoteClose = 4211,
                RatingModel = 1144,
                QuoteLine = 1085,
                ReportVisibility = 9103,
                ReportLink = 9104,
                Resource = 4002,
                ResourceExpansion = 4010,
                SchedulingGroup = 4005,
                ReplicationBacklog = 1140,
                RelationshipRoleMap = 4501,
                Report = 9100,
                ReportRelatedEntity = 9101,
                ReportRelatedCategory = 9102,
                QueueItemCount = 2023,
                PrivilegeObjectTypeCode = 31,
                Privilege = 1023,
                ProcessSession = 4710,
                ProcessTrigger = 4712,
                ProcessStage = 4724,
                PostRole = 8001,
                PostRegarding = 8002,
                PriceList = 1022,
                PrincipalSyncAttributeMap = 1404,
                FieldSharing = 44,
                PublisherAddress = 7102,
                Publisher = 7101,
                QuarterlyFiscalCalendar = 2002,
                QueueItem = 2029,
                Queue = 2020,
                ProductAssociation = 1025,
                Product = 1024,
                PriceListItem = 1026,
                ProductRelationship = 1028,
                ProductSalesLiterature = 21,
                ResourceSpecification = 4006,
                SdkMessageProcessingStepImage = 4615,
                SdkMessageProcessingStep = 4608,
                SdkMessageProcessingStepSecureConfiguration = 4616,
                SdkMessageRequestField = 4614,
                SdkMessageRequest = 4609,
                SystemChart = 1111,
                View = 1039,
                SdkMessage = 4606,
                SdkMessagePair = 4613,
                SdkMessageFilter = 4607,
                ServiceEndpoint = 4618,
                ServiceContractContact = 20,
                SharePointData = 9509,
                DocumentLocation = 9508,
                SharepointDocument = 9507,
                SdkMessageResponseField = 4611,
                SdkMessageResponse = 4610,
                SemiannualFiscalCalendar = 2001,
                ServiceActivity = 4214,
                Service = 4001,
                SavedOrganizationInsightsConfiguration = 1309,
                RibbonTabToCommandMapping = 1113,
                RibbonRule = 1117,
                SecurityRole = 1036,
                RollupField = 9604,
                RoleTemplate = 1037,
                RibbonCommand = 1116,
                RibbonClientMetadata = 4579,
                RibbonContextGroup = 1115,
                RibbonDifference = 1130,
                ApplicationRibbons = 1120,
                SalesAttachment = 1070,
                SalesLiterature = 1038,
                Order = 1088,
                SalesProcessInstance = 32,
                OrderLine = 1089,
                RollupProperties = 9510,
                RollupJob = 9511,
                RoutingRuleSet = 8181,
                RuntimeDependency = 7200,
                RuleItem = 8199,
                PropertyInstance = 1333,
                PropertyAssociation = 1235,
                PropertyOptionSetItem = 1049,
                EmailHash = 4023,
                Email = 4202,
                DuplicateRecord = 4415,
                DocumentTemplate = 9940,
                DuplicateDetectionRule = 4414,
                Property = 1048,
                DuplicateRuleCondition = 4416,
                EntitlementEntityAllocationTypeMapping = 9704,
                EntitlementContact = 7272,
                EntitlementProduct = 6363,
                EntitlementTemplateChannel = 9703,
                EntitlementTemplate = 9702,
                EmailServerProfile = 9605,
                EmailSearch = 4299,
                EmailSignature = 9997,
                EntitlementChannel = 9701,
                Entitlement = 9700,
                IndexedArticle = 126,
                CustomControlDefaultConfig = 9755,
                CustomControl = 9753,
                CustomControlResource = 9754,
                OpportunityRelationship = 4503,
                Address = 1071,
                ContractLine = 1011,
                Contract = 1010,
                ContractTemplate = 2011,
                RecordCreationAndUpdateRuleItem = 9301,
                RecordCreationAndUpdateRule = 9300,
                Discount = 1013,
                DependencyNode = 7106,
                DiscountList = 1080,
                DisplayStringMap = 4101,
                DisplayString = 4102,
                DataPerformanceDashboard = 4450,
                CustomerRelationship = 4502,
                DelveActionHub = 9961,
                DependencyFeature = 7108,
                Dependency = 7105,
                EntitlementTemplateProduct = 4545,
                ImportJob = 9107,
                ImportSourceFile = 4412,
                ImportLog = 4423,
                Case = 112,
                DataMap = 4411,
                ImageDescriptor = 1007,
                HolidayWrapper = 9996,
                DataImport = 4410,
                ImportEntityMapping = 4428,
                ImportData = 4413,
                InvalidDependency = 7107,
                InterProcessLock = 4011,
                Invoice = 1090,
                ISVConfig = 4705,
                InvoiceLine = 1091,
                CaseResolution = 4206,
                IncidentKnowledgeBaseRecord = 9931,
                IntegrationStatus = 3000,
                InternalAddress = 1003,
                InteractionForEmail = 9986,
                HierarchySecurityConfiguration = 9919,
                ExpiredProcess = 955,
                ExpanderEvent = 4711,
                ExternalParty = 3008,
                Fax = 4204,
                ExternalPartyItem = 9987,
                VirtualEntityDataSource = 85,
                VirtualEntityDataProvider = 78,
                EntityMap = 4600,
                ExchangeSyncIdMapping = 4120,
                FacilityEquipment = 4000,
                GlobalSearchConfiguration = 54,
                FixedMonthlyFiscalCalendar = 2004,
                Goal = 9600,
                HierarchyRule = 8840,
                RollupQuery = 9602,
                FieldPermission = 1201,
                Feedback = 9958,
                FieldSecurityProfile = 1200,
                FilterTemplate = 30,
                FileAttachment = 55,
                Auditing = 4567,
                AttributeMap = 4601,
                AuthorizationServer = 1094,
                BookableResource = 1150,
                AzureServiceConnection = 9936,
                AppModuleRoles = 9009,
                AppModuleMetadataAsyncOperation = 8702,
                Appointment = 4201,
                Attachment = 1002,
                SystemJob = 4700,
                BookableResourceGroup = 1151,
                BookableResourceCharacteristic = 1148,
                BookingStatus = 1152,
                BulkDeleteOperation = 4424,
                BulkDeleteFailure = 4425,
                BookableResourceBookingToExchangeIdMapping = 4421,
                BookableResourceBooking = 1145,
                BookableResourceBookingHeader = 1146,
                BookableResourceCategoryAssn = 1149,
                BookableResourceCategory = 1147,
                AppModuleMetadataDependency = 8701,
                Attachment1 = 1001,
                ActionCardUserState = 9968,
                ActivityParty = 135,
                AdminSettingsEntity = 10018,
                Activity = 4200,
                AccountLeads = 16,
                Account = 1,
                ACIViewMapper = 8040,
                ActionCardUserSettings = 9973,
                ActionCard = 9962,
                ApplicationFile = 4707,
                AppConfigMaster = 9011,
                ModelDrivenApp = 9006,
                AppModuleMetadata = 8700,
                AppModuleComponent = 9007,
                Note = 5,
                AdvancedSimilarityRule = 9949,
                AnnualFiscalCalendar = 2000,
                AppConfigurationInstance = 9013,
                AppConfiguration = 9012,
                QuickCampaign = 4406,
                Competitor = 123,
                Commitment = 4215,
                CompetitorAddress = 1004,
                CompetitorSalesLiterature = 26,
                CompetitorProduct = 1006,
                Characteristic = 1141,
                ChannelPropertyGroup = 1234,
                ChildIncidentCount = 113,
                ColumnMapping = 4417,
                ClientUpdate = 36,
                ContactInvoices = 17,
                Contact = 2,
                ContactLeads = 22,
                ContactQuotes = 18,
                ContactOrders = 19,
                Connection = 3234,
                ProcessConfiguration = 9650,
                ConnectionRole = 3231,
                ResourceGroup = 4007,
                ConnectionRoleObjectTypeCode = 3233,
                ChannelProperty = 1236,
                Calendar = 4003,
                Announcement = 132,
                CalendarRule = 4004,
                Campaign = 4400,
                CallbackRegistration = 301,
                BusinessDataLocalizedLabel = 4232,
                BulkOperationLog = 4405,
                BusinessProcessFlowInstance = 4725,
                BusinessUnitMap = 6,
                BusinessUnit = 10,
                Category = 9959,
                ActionCardType = 9983,
                ChannelAccessProfile = 3005,
                ChannelAccessProfileRuleItem = 9401,
                ChannelAccessProfileRule = 9400,
                CampaignActivityItem = 4404,
                CampaignActivity = 4402,
                CampaignItem = 4403,
                CanvasApp = 300,
                CampaignResponse = 4401,
                Icebreakersconfig = 10031,
                GeofencingSettings = 10266,
                IncidentType = 10187,
                IncidentTypeCharacteristic = 10188,
                IncidentTypeRequirementGroup = 10193,
                Forecast = 10020,
                ForecastDefinition = 10019,
                ForecastRecurrence = 10021,
                GeofenceEvent = 10265,
                Geofence = 10264,
                InventoryAdjustment = 10194,
                IntegrationJobDetail = 10096,
                InventoryAdjustmentProduct = 10195,
                InventoryTransfer = 10197,
                InventoryJournal = 10196,
                IncidentTypeService = 10190,
                IncidentTypeProduct = 10189,
                IncidentTypeServiceTask = 10191,
                IntegrationJob = 10095,
                IncidentTypesSetup = 10192,
                Flowcardtype = 10027,
                EntityConfiguration = 10263,
                EntitlementApplication = 10182,
                EntityRankingRule = 10026,
                EstimateLine = 10088,
                Estimate = 10087,
                ActualDataExportDeprecated = 10083,
                DatabaseVersion = 10007,
                Delegation = 10084,
                PricingDimensionFieldName = 10086,
                PricingDimension = 10085,
                FieldServiceSetting = 10184,
                FieldServicePriceListItem = 10183,
                FieldServiceSLAConfiguration = 10185,
                FindWorkEventDeprecatedInV30 = 10094,
                FieldServiceSystemJob = 10186,
                ExpenseCategory = 10090,
                Expense = 10089,
                ExpenseReceipt = 10091,
                FieldComputation = 10093,
                Fact = 10092,
                InvoiceFrequency = 10097,
                OrderInvoicingSetupDate = 10201,
                OrderInvoicingSetup = 10200,
                ProjectContractLineResourceCategory = 10108,
                ProjectContractLineTransactionCategory = 10110,
                ProjectContractLineDetail = 10109,
                OpportunityLineTransactionClassificationDeprecated = 10106,
                OpportunityLineTransactionCategoryDeprecated = 10105,
                OpportunityProjectPriceList = 10107,
                OrderInvoicingProduct = 10199,
                OrderInvoicingDate = 10198,
                PaymentTerm = 10205,
                PaymentMethod = 10204,
                PlaybookActivity = 10012,
                PlaybookCategory = 10014,
                PlaybookActivityAttribute = 10013,
                ProjectContractProjectPriceList = 10112,
                ProjectContractLineTransactionClassification = 10111,
                OrganizationalUnit = 10055,
                PaymentDetail = 10203,
                Payment = 10202,
                OpportunityLineDetailDeprecated = 10104,
                IoTDeviceCommandDefinition = 10252,
                IoTDeviceCommand = 10251,
                IoTDeviceDataHistory = 10253,
                IoTDeviceRegistrationHistory = 10255,
                IoTDeviceProperty = 10254,
                InvoiceLineDetail = 10099,
                InvoiceFrequencyDetail = 10098,
                IoTAlert = 10248,
                IoTDeviceCategory = 10250,
                IoTDevice = 10249,
                ResultCache = 10102,
                JournalLine = 10101,
                NotesAnalysisConfig = 10030,
                OpportunityLineResourceCategoryDeprecated = 10103,
                ODataV4DataSource = 10000,
                IoTProvider = 10257,
                IoTPropertyDefinition = 10256,
                IoTProviderInstance = 10258,
                Journal = 10100,
                IoTSettings = 10259,
                MetadataDifference = 4231,
                MailMergeTemplate = 9106,
                GoalMetric = 9603,
                MobileOfflineProfileItem = 9867,
                MobileOfflineProfile = 9866,
                Mailbox = 9606,
                LookupMapping = 4419,
                MailboxStatistics = 9607,
                MailboxAutoTrackingFolder = 9608,
                MailboxTrackingCategory = 9609,
                Actual = 10045,
                ActionCardRoleSetting = 10025,
                Agreement = 10163,
                AgreementBookingIncident = 10165,
                AgreementBookingDate = 10164,
                MonthlyFiscalCalendar = 2003,
                MobileOfflineProfileItemAssociation = 9868,
                ThreeDimensionalModel = 10155,
                Actioncardregarding = 10024,
                AccountProjectPriceList = 10074,
                LocalConfigStore = 9201,
                KnowledgeArticleViews = 9955,
                KnowledgeArticleCategory = 9960,
                KnowledgeBaseRecord = 9930,
                Language = 9957,
                KnowledgeSearchModel = 9947,
                ArticleComment = 1082,
                Article = 127,
                ArticleTemplate = 1016,
                KnowledgeArticleIncident = 9954,
                KnowledgeArticle = 9953,
                Letter = 4207,
                LeadToOpportunitySalesProcess = 954,
                License = 2027,
                MarketingListMember = 4301,
                MarketingList = 4300,
                Lead = 4,
                LanguageProvisioningState = 9875,
                LeadAddress = 1017,
                LeadProduct = 27,
                LeadCompetitors = 24,
                AgreementBookingProduct = 10166,
                InvoiceProcess = 10078,
                WorkOrderBusinessProcess = 10179,
                BusinessClosure = 10052,
                CompetencyRequirementDeprecated = 10079,
                PlaybookCallableContext = 10011,
                CFSIoTAlertProcessFlow = 10262,
                PurchaseOrderBusinessProcess = 10176,
                ProjectStages = 10077,
                AgreementBusinessProcess = 10178,
                CaseToWorkOrderBusinessProcess = 10177,
                ProjectContractLineInvoiceSchedule = 10081,
                ContactPriceList = 10080,
                ProjectContractLineMilestone = 10082,
                CustomerAssetCategory = 10181,
                CustomerAsset = 10180,
                ComponentLayer = 10005,
                ClientExtension = 10053,
                ComponentLayerDataSource = 10006,
                Connector = 371,
                Configuration = 10054,
                BookingTimestamp = 10175,
                AgreementSubstatus = 10173,
                AgreementInvoiceSetup = 10172,
                AnalysisComponent = 10156,
                AnalysisResult = 10158,
                AnalysisJob = 10157,
                AgreementBookingServiceTask = 10168,
                AgreementBookingService = 10167,
                AgreementBookingSetup = 10169,
                AgreementInvoiceProduct = 10171,
                AgreementInvoiceDate = 10170,
                BookingChange = 10049,
                BookingAlertStatus = 10048,
                BookingJournal = 10174,
                BookingSetupMetadata = 10051,
                BookingRule = 10050,
                ProjectServiceApproval = 10075,
                AnalysisResultDetail = 10159,
                BatchJob = 10076,
                BookingAlert = 10047,
                BookableResourceAssociation = 10046
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemuserroles")]
	public class SystemUserRoles : Entity
    {
        public const string EntityLogicalName = "systemuserroles";
        public SystemUserRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserroleid"] = value;
            }
        }
		
		public readonly Guid? SystemUserRoleId = null;
		
		public readonly Guid? RoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("knowledgearticlescategories")]
	public class KnowledgeArticlesCategories : Entity
    {
        public const string EntityLogicalName = "knowledgearticlescategories";
        public KnowledgeArticlesCategories() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticlecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticlecategoryid"] = value;
            }
        }
		
		public readonly Guid? CategoryId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? KnowledgeArticleCategoryId = null;
		
		public readonly Guid? KnowledgeArticleId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dynamicpropertyoptionsetitem")]
	public class DynamicPropertyOptionSetItem : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyoptionsetitem";
        public DynamicPropertyOptionSetItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyoptionsetvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyoptionsetvalueid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string DynamicPropertyOptionDescription = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? DynamicPropertyOptionValue = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string DynamicPropertyOptionName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? DynamicPropertyOptionSetValueSequenceNumber = null;
		
		public readonly EntityReference DynamicPropertyId = null;
		
		public readonly Guid? DynamicPropertyOptionSetValueId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? DMTImportState = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicecommand")]
	public class msdyn_iotdevicecommand : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdevicecommand";
        public msdyn_iotdevicecommand() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicecommandid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicecommandid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly Guid? msdyn_iotdevicecommandId = null;
		
		public readonly EntityReference msdyn_Command = null;
		
		public readonly EntityReference msdyn_Device = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_CommandStatusReason = null;
		
		public readonly OptionSetValue msdyn_CommandStatus = null;
		
		public readonly bool? msdyn_SendToAllConnectedDevices = null;
		
		public readonly EntityReference msdyn_ParentAlert = null;
		
		public readonly string msdyn_Message = null;
		
		public readonly string msdyn_DeviceID = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_CommandStatus
            {
                InProgress = 192350000,
                Sent = 192350001,
                Error = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutioncomponentdatasource")]
	public class msdyn_solutioncomponentdatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutioncomponentdatasource";
        public msdyn_solutioncomponentdatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutioncomponentdatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutioncomponentdatasourceid"] = value;
            }
        }
		
		public readonly Guid? msdyn_solutioncomponentdatasourceId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_inventoryadjustmentproduct")]
	public class msdyn_inventoryadjustmentproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_inventoryadjustmentproduct";
        public msdyn_inventoryadjustmentproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_inventoryadjustmentproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_inventoryadjustmentproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_inventoryadjustmentproductId = null;
		
		public readonly EntityReference msdyn_InventoryTransfer = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_InventoryAdjustment = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderproduct")]
	public class msdyn_workorderproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorderproduct";
        public msdyn_workorderproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderproductid"] = value;
            }
        }
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_PurchaseOrderReceiptProduct = null;
		
		public readonly Money msdyn_estimateunitcost_Base = null;
		
		public readonly EntityReference msdyn_WorkOrderIncident = null;
		
		public readonly Money msdyn_EstimateUnitCost = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly Money msdyn_DiscountAmount = null;
		
		public readonly Money msdyn_UnitCost = null;
		
		public readonly bool? msdyn_Allocated = null;
		
		public readonly Guid? msdyn_workorderproductId = null;
		
		public readonly Money msdyn_estimatesubtotal_Base = null;
		
		public readonly Money msdyn_commissioncosts_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? msdyn_DisableEntitlement = null;
		
		public readonly string msdyn_InternalDescription = null;
		
		public readonly Money msdyn_TotalAmount = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly Money msdyn_estimatediscountamount_Base = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly Money msdyn_EstimateTotalAmount = null;
		
		public readonly double? msdyn_QtyToBill = null;
		
		public readonly Money msdyn_additionalcost_Base = null;
		
		public readonly Money msdyn_CommissionCosts = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly OptionSetValue msdyn_LineStatus = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly double? msdyn_EstimateDiscountPercent = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Entitlement = null;
		
		public readonly Money msdyn_EstimateTotalCost = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Money msdyn_AdditionalCost = null;
		
		public readonly Money msdyn_EstimateUnitAmount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_estimateunitamount_Base = null;
		
		public readonly Money msdyn_unitcost_Base = null;
		
		public readonly Money msdyn_discountamount_Base = null;
		
		public readonly double? msdyn_EstimateQuantity = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly Money msdyn_EstimateDiscountAmount = null;
		
		public readonly Money msdyn_EstimateSubtotal = null;
		
		public readonly Money msdyn_TotalCost = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly Money msdyn_Subtotal = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly double? msdyn_DiscountPercent = null;
		
		public readonly Money msdyn_estimatetotalamount_Base = null;
		
		public readonly Money msdyn_estimatetotalcost_Base = null;
		
		public readonly Money msdyn_subtotal_Base = null;
		
		public readonly EntityReference msdyn_AgreementBookingProduct = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_LineStatus
            {
                Estimated = 690970000,
                Used = 690970001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_productinventory")]
	public class msdyn_productinventory : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_productinventory";
        public msdyn_productinventory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_productinventoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_productinventoryid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly string msdyn_Bin = null;
		
		public readonly double? msdyn_ReorderPoint = null;
		
		public readonly double? msdyn_QtyOnHand = null;
		
		public readonly double? msdyn_QtyOnOrder = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly double? msdyn_QtyAvailable = null;
		
		public readonly Guid? msdyn_productinventoryId = null;
		
		public readonly string msdyn_Row = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly double? msdyn_QtyAllocated = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderservice")]
	public class msdyn_workorderservice : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorderservice";
        public msdyn_workorderservice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderserviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderserviceid"] = value;
            }
        }
		
		public readonly Money msdyn_totalamount_Base = null;
		
		public readonly Money msdyn_estimateunitcost_Base = null;
		
		public readonly EntityReference msdyn_WorkOrderIncident = null;
		
		public readonly Money msdyn_EstimateUnitCost = null;
		
		public readonly Guid? msdyn_workorderserviceId = null;
		
		public readonly Money msdyn_DiscountAmount = null;
		
		public readonly Money msdyn_UnitCost = null;
		
		public readonly Money msdyn_estimatecalculatedunitamount_Base = null;
		
		public readonly Money msdyn_estimatesubtotal_Base = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly Money msdyn_commissioncosts_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? msdyn_DisableEntitlement = null;
		
		public readonly Money msdyn_MinimumChargeAmount = null;
		
		public readonly Money msdyn_TotalAmount = null;
		
		public readonly EntityReference msdyn_AgreementBookingService = null;
		
		public readonly Money msdyn_EstimateCalculatedUnitAmount = null;
		
		public readonly Money msdyn_UnitAmount = null;
		
		public readonly int? msdyn_DurationToBill = null;
		
		public readonly Money msdyn_estimatediscountamount_Base = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly Money msdyn_EstimateTotalAmount = null;
		
		public readonly Money msdyn_additionalcost_Base = null;
		
		public readonly Money msdyn_CommissionCosts = null;
		
		public readonly bool? msdyn_Taxable = null;
		
		public readonly Money msdyn_minimumchargeamount_Base = null;
		
		public readonly OptionSetValue msdyn_LineStatus = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly Money msdyn_calculatedunitamount_Base = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly double? msdyn_EstimateDiscountPercent = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Entitlement = null;
		
		public readonly Money msdyn_EstimateTotalCost = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Money msdyn_AdditionalCost = null;
		
		public readonly Money msdyn_EstimateUnitAmount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? msdyn_EstimateDuration = null;
		
		public readonly Money msdyn_estimateunitamount_Base = null;
		
		public readonly Money msdyn_unitcost_Base = null;
		
		public readonly Money msdyn_discountamount_Base = null;
		
		public readonly Money msdyn_CalculatedUnitAmount = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly Money msdyn_EstimateDiscountAmount = null;
		
		public readonly Money msdyn_EstimateSubtotal = null;
		
		public readonly int? msdyn_MinimumChargeDuration = null;
		
		public readonly Money msdyn_TotalCost = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly Money msdyn_Subtotal = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly EntityReference msdyn_Service = null;
		
		public readonly double? msdyn_DiscountPercent = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly Money msdyn_estimatetotalamount_Base = null;
		
		public readonly Money msdyn_estimatetotalcost_Base = null;
		
		public readonly Money msdyn_subtotal_Base = null;
		
		public readonly string msdyn_InternalDescription = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_LineStatus
            {
                Estimated = 690970000,
                Used = 690970001
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotsettings")]
	public class msdyn_iotsettings : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotsettings";
        public msdyn_iotsettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotsettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotsettingsid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_defaultiotsource = null;
		
		public readonly Guid? msdyn_iotsettingsId = null;
		
		public readonly bool? msdyn_ScheduledDeviceDataPull = null;
		
		public readonly int? msdyn_devicedatapullfrequency = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_IoTAlertAggregationRule = null;
		
		public readonly string msdyn_CommandNameProperty = null;
		
		public readonly bool? msdyn_ShowWelcome = null;
		
		public readonly string msdyn_CommandParametersProperty = null;
		
		public readonly DateTime? msdyn_NextDeviceDataPullTime = null;
		
		public readonly EntityReference msdyn_DefaultIoTProviderInstance = null;

        public new static class Options
        {
            public enum msdyn_defaultiotsource
            {
                Other = 192350000,
                AzureIoTSuite = 192350001,
                AzureIoTCentral = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("systemusersyncmappingprofiles")]
	public class SystemUserSyncMappingProfiles : Entity
    {
        public const string EntityLogicalName = "systemusersyncmappingprofiles";
        public SystemUserSyncMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusersyncmappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusersyncmappingprofileid"] = value;
            }
        }
		
		public readonly Guid? SyncAttributeMappingProfileId = null;
		
		public readonly Guid? SystemUserSyncMappingProfileId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customcontrol")]
	public class CustomControl : Entity
    {
        public const string EntityLogicalName = "customcontrol";
        public CustomControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolid"] = value;
            }
        }
		
		public readonly string AuthoringManifest = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Manifest = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string ClientJson = null;
		
		public readonly string CompatibleDataTypes = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? CustomControlIdUnique = null;
		
		public readonly Guid? CustomControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_clientextension")]
	public class msdyn_clientextension : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_clientextension";
        public msdyn_clientextension() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_clientextensionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_clientextensionid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_extensiontype = null;
		
		public readonly EntityReference msdyn_scheduleboardsettingid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_webresource = null;
		
		public readonly int? msdyn_rank = null;
		
		public readonly Guid? msdyn_clientextensionId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_extensiontype
            {
                Script = 192350000,
                Stylesheet = 192350001,
                Localization = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("principalsyncattributemap")]
	public class PrincipalSyncAttributeMap : Entity
    {
        public const string EntityLogicalName = "principalsyncattributemap";
        public PrincipalSyncAttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalsyncattributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalsyncattributemapid"] = value;
            }
        }
		
		public readonly OptionSetValue DefaultSyncDirection = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsComputed = null;
		
		public readonly string EntityTypeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ParentPrincipalSyncAttributeMappingId = null;
		
		public readonly string AttributeCRMName = null;
		
		public readonly string AttributeExchangeDisplayName = null;
		
		public readonly OptionSetValue SyncDirection = null;
		
		public readonly string MappingName = null;
		
		public readonly Guid? PrincipalSyncAttributeMapId = null;
		
		public readonly int? AllowedSyncDirection = null;
		
		public readonly string ComputedProperties = null;
		
		public readonly string AttributeCRMDisplayName = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly string AttributeExchangeName = null;

        public new static class Options
        {
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("queuemembership")]
	public class QueueMembership : Entity
    {
        public const string EntityLogicalName = "queuemembership";
        public QueueMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembershipid"] = value;
            }
        }
		
		public readonly Guid? QueueId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? QueueMembershipId = null;
		
		public readonly Guid? SystemUserId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("letter")]
	public class Letter : Entity
    {
        public const string EntityLogicalName = "letter";
        public Letter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection from = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityCollection to = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityCollection bcc = null;
		
		public readonly EntityCollection cc = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string Address = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Draft = 2,
                Received = 3,
                Sent = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("postfollow")]
	public class PostFollow : Entity
    {
        public const string EntityLogicalName = "postfollow";
        public PostFollow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postfollowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postfollowid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? PostToYammer = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? YammerPostState = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? PostFollowId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? YammerRetryCount = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("authorizationserver")]
	public class AuthorizationServer : Entity
    {
        public const string EntityLogicalName = "authorizationserver";
        public AuthorizationServer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("authorizationserverid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["authorizationserverid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? TenantId = null;
		
		public readonly Guid? AuthorizationServerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue AuthorizationServerType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Realm = null;
		
		public readonly string Metadata = null;
		
		public readonly DateTime? MetadataRefreshedOn = null;
		
		public readonly string MetadataUrl = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string PrincipalId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AuthorizationServerType
            {
                AccessControlService = 0,
                EvolvedSTS = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appmoduleroles")]
	public class AppModuleRoles : Entity
    {
        public const string EntityLogicalName = "appmoduleroles";
        public AppModuleRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleroleid"] = value;
            }
        }
		
		public readonly Guid? AppModuleRoleId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference RoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference AppModuleId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? AppModuleRoleIdUnique = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("role")]
	public class Role : Entity
    {
        public const string EntityLogicalName = "role";
        public Role() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleid"] = value;
            }
        }
		
		public readonly EntityReference RoleTemplateId = null;
		
		public readonly EntityReference ParentRoleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly Guid? RoleId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue IsInherited = null;
		
		public readonly Guid? RoleIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentRootRoleId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum IsInherited
            {
                DefaultTeamPrivilegesOnly = 0,
                DirectUserBasicAccessLevelAndTeamPrivileges = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("picklistmapping")]
	public class PickListMapping : Entity
    {
        public const string EntityLogicalName = "picklistmapping";
        public PickListMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("picklistmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["picklistmappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string SourceValue = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ColumnMappingId = null;
		
		public readonly Guid? PickListMappingIdUnique = null;
		
		public readonly Guid? PickListMappingId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TargetValue = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3,
                Unmapped = 4
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contactinvoices")]
	public class ContactInvoices : Entity
    {
        public const string EntityLogicalName = "contactinvoices";
        public ContactInvoices() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactinvoiceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactinvoiceid"] = value;
            }
        }
		
		public readonly Guid? ContactInvoiceId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? InvoiceId = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contract")]
	public class Contract : Entity
    {
        public const string EntityLogicalName = "contract";
        public Contract() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contractid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contractid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OriginatingContract = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ContractTemplateId = null;
		
		public readonly DateTime? CancelOn = null;
		
		public readonly Money NetPrice_Base = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly bool? UseDiscountAsPercentage = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ContractId = null;
		
		public readonly Money NetPrice = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference ServiceAddress = null;
		
		public readonly string ContractLanguage = null;
		
		public readonly string ContractNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference BillingCustomerId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ExpiresOn = null;
		[System.ComponentModel.Description("{\"a\":2}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference BillingContactId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money TotalDiscount_Base = null;
		
		public readonly EntityReference BillingAccountId = null;
		
		public readonly string ContractTemplateAbbreviation = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly DateTime? BillingStartOn = null;
		
		public readonly EntityReference BillToAddress = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly Money TotalDiscount = null;
		
		public readonly string EmailAddress = null;
		
		public readonly DateTime? BillingEndOn = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly Money TotalPrice_Base = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		
		public readonly OptionSetValue BillingFrequencyCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue AllotmentTypeCode = null;
		
		public readonly Money TotalPrice = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Invoiced = 1,
                Active = 2,
                OnHold = 3,
                Canceled = 4,
                Expired = 5
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }
            public enum BillingFrequencyCode
            {
                Monthly = 1,
                Bimonthly = 2,
                Quarterly = 3,
                Semiannually = 4,
                Annually = 5
            }
            public enum StatusCode
            {
                Draft = 1,
                Invoiced = 2,
                Active = 3,
                OnHold = 4,
                Canceled = 5,
                Expired = 6
            }
            public enum AllotmentTypeCode
            {
                NumberOfCases = 1,
                Time = 2,
                CoverageDates = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelinetransactioncategory")]
	public class msdyn_quotelinetransactioncategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelinetransactioncategory";
        public msdyn_quotelinetransactioncategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelinetransactioncategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelinetransactioncategoryid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_QuoteLineTransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_QuoteLineId = null;
		
		public readonly Guid? msdyn_quotelinetransactioncategoryId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutionhealthrule")]
	public class msdyn_solutionhealthrule : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhealthrule";
        public msdyn_solutionhealthrule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhealthruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhealthruleid"] = value;
            }
        }
		
		public readonly string msdyn_uniquename = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_OwningSolutionId = null;
		
		public readonly EntityReference msdyn_solutionhealthrulesetId = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_ResolutionAction = null;
		
		public readonly Guid? msdyn_solutionhealthruleId = null;
		
		public readonly EntityReference msdyn_Workflow = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("contractdetail")]
	public class ContractDetail : Entity
    {
        public const string EntityLogicalName = "contractdetail";
        public ContractDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contractdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contractdetailid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Money Rate_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TotalAllotments = null;
		
		public readonly decimal? DiscountPercentage = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money Discount_Base = null;
		
		public readonly EntityReference ContractId = null;
		
		public readonly Money Price_Base = null;
		
		public readonly int? LineItemOrder = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference ServiceAddress = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ExpiresOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? AllotmentsOverage = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue ContractStateCode = null;
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly Guid? ContractDetailId = null;
		
		public readonly int? AllotmentsUsed = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly int? AllotmentsRemaining = null;
		
		public readonly Money Price = null;
		
		public readonly Money Discount = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? InitialQuantity = null;
		
		public readonly OptionSetValue ServiceContractUnitsCode = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Net = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Net_Base = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money Rate = null;
		
		public readonly string ProductSerialNumber = null;

        public new static class Options
        {
            public enum StateCode
            {
                Existing = 0,
                Renewed = 1,
                Canceled = 2,
                Expired = 3
            }
            public enum ContractStateCode
            {

            }
            public enum ServiceContractUnitsCode
            {
                DefaultValue = 1
            }
            public enum StatusCode
            {
                New = 1,
                Renewed = 2,
                Canceled = 3,
                Expired = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("ribboncustomization")]
	public class RibbonCustomization : Entity
    {
        public const string EntityLogicalName = "ribboncustomization";
        public RibbonCustomization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncustomizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncustomizationid"] = value;
            }
        }
		
		public readonly Guid? RibbonCustomizationId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? RibbonCustomizationUniqueId = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Entity = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_rmasubstatus")]
	public class msdyn_rmasubstatus : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_rmasubstatus";
        public msdyn_rmasubstatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_rmasubstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_rmasubstatusid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_rmasubstatusId = null;
		
		public readonly bool? msdyn_DefaultSubStatus = null;
		
		public readonly OptionSetValue msdyn_SystemStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_SystemStatus
            {
                Pending = 690970000,
                Canceled = 690970001,
                ProductsReceived = 690970002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_icebreakersconfig")]
	public class msdyn_icebreakersconfig : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_icebreakersconfig";
        public msdyn_icebreakersconfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_icebreakersconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_icebreakersconfigid"] = value;
            }
        }
		
		public readonly bool? msdyn_issportscategoryenabled = null;
		
		public readonly bool? msdyn_isadminsettingenabled = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_aretermsaccepted = null;
		
		public readonly bool? msdyn_isentertainmentcategoryenabled = null;
		
		public readonly bool? msdyn_ishealthcategoryenabled = null;
		
		public readonly bool? msdyn_isfamilycategoryenabled = null;
		
		public readonly Guid? msdyn_icebreakersconfigId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresource")]
	public class BookableResource : Entity
    {
        public const string EntityLogicalName = "bookableresource";
        public BookableResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourceid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference msdyn_Warehouse = null;
		
		public readonly int? TimeZone = null;
		
		public readonly string TraversedPath = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue msdyn_StartLocation = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference msdyn_organizationalunit = null;
		
		public readonly string msdyn_PrimaryEMail = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? msdyn_DeriveCapacity = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue msdyn_GenericType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money msdyn_HourlyRate = null;
		
		public readonly bool? msdyn_DisplayOnScheduleAssistant = null;
		
		public readonly OptionSetValue ResourceType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? msdyn_EnabledForFieldServiceMobile = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly int? msdyn_BookingsToDrip = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? BookableResourceId = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly bool? msdyn_EnableDripScheduling = null;
		
		public readonly Money msdyn_hourlyrate_Base = null;
		
		public readonly int? msdyn_targetutilization = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly bool? msdyn_TimeOffApprovalRequired = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? msdyn_isgenericresourceprojectscoped = null;
		
		public readonly OptionSetValue msdyn_EndLocation = null;
		
		public readonly bool? msdyn_DisplayOnScheduleBoard = null;

        public new static class Options
        {
            public enum msdyn_StartLocation
            {
                LocationAgnostic = 690970002,
                ResourceAddress = 690970000,
                OrganizationalUnitAddress = 690970001
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_GenericType
            {
                ServiceCenter = 690970000
            }
            public enum ResourceType
            {
                Generic = 1,
                Contact = 2,
                User = 3,
                Equipment = 4,
                Account = 5,
                Crew = 6,
                Facility = 7,
                Pool = 8
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_EndLocation
            {
                LocationAgnostic = 690970002,
                ResourceAddress = 690970000,
                OrganizationalUnitAddress = 690970001
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderresourcerestriction")]
	public class msdyn_workorderresourcerestriction : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorderresourcerestriction";
        public msdyn_workorderresourcerestriction() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderresourcerestrictionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderresourcerestrictionid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_ExpirationDate = null;
		
		public readonly EntityReference msdyn_Account = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Resource = null;
		
		public readonly bool? msdyn_Cascade = null;
		
		public readonly Guid? msdyn_workorderresourcerestrictionId = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("task")]
	public class Task : Entity
    {
        public const string EntityLogicalName = "task";
        public Task() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly Guid? CrmTaskAssignedUniqueId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly int? PercentComplete = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                NotStarted = 2,
                InProgress = 3,
                WaitingOnSomeoneElse = 4,
                Completed = 5,
                Canceled = 6,
                Deferred = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_workorderservicetask")]
	public class msdyn_workorderservicetask : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_workorderservicetask";
        public msdyn_workorderservicetask() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_workorderservicetaskid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_workorderservicetaskid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly EntityReference msdyn_Booking = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly EntityReference msdyn_WorkOrderIncident = null;
		
		public readonly int? msdyn_ActualDuration = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_TaskType = null;
		
		public readonly double? msdyn_PercentComplete = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly EntityReference msdyn_AgreementBookingServiceTask = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly Guid? msdyn_workorderservicetaskId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementrelationship")]
	public class msdyn_requirementrelationship : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementrelationship";
        public msdyn_requirementrelationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementrelationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementrelationshipid"] = value;
            }
        }
		
		public readonly string msdyn_requirementgroupcontrolviewid = null;
		
		public readonly EntityReference msdyn_requirementgroupid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_requirementrelationshipId = null;
		
		public readonly OptionSetValue msdyn_operator = null;
		
		public readonly int? msdyn_minconditioncount = null;
		
		public readonly EntityReference msdyn_parentrequirementrelationshipid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_operator
            {

            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("topicmodel")]
	public class TopicModel : Entity
    {
        public const string EntityLogicalName = "topicmodel";
        public TopicModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelid"] = value;
            }
        }
		
		public readonly string AzureSchedulerTestJobName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? TopicModelId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? TopicsLastCreatedOn = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string AzureSchedulerJobName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference ConfigurationUsed = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? MaxNumberofTopics = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string BuildRecurrence = null;
		
		public readonly int? TotalTopicsFound = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string AzureSchedulerOnDemandJobName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? MaxTopics = null;
		
		public readonly string SourceEntity = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly int? AvgNumberofTopics = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? StartTime = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SourceEntity
            {
                Case = 112
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessageprocessingstepsecureconfig")]
	public class SdkMessageProcessingStepSecureConfig : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepsecureconfig";
        public SdkMessageProcessingStepSecureConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepsecureconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepsecureconfigid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SecureConfig = null;
		
		public readonly Guid? SdkMessageProcessingStepSecureConfigIdUnique = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? SdkMessageProcessingStepSecureConfigId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_priority")]
	public class msdyn_priority : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_priority";
        public msdyn_priority() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_priorityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_priorityid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_LevelofImportance = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_PriorityColor = null;
		
		public readonly Guid? msdyn_priorityId = null;

        public new static class Options
        {
            public enum msdyn_LevelofImportance
            {
                _1 = 1,
                _2 = 2,
                _3 = 3,
                _4 = 4,
                _5 = 5,
                _6 = 6,
                _7 = 7,
                _8 = 8,
                _9 = 9,
                _10 = 10
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookingstatus")]
	public class BookingStatus : Entity
    {
        public const string EntityLogicalName = "bookingstatus";
        public BookingStatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookingstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookingstatusid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly string msdyn_ImageUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue msdyn_FieldServiceStatus = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string msdyn_StatusColor = null;
		
		public readonly Guid? BookingStatusId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue msdyn_committype = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_FieldServiceStatus
            {
                Scheduled = 690970000,
                Traveling = 690970001,
                InProgress = 690970003,
                OnBreak = 690970002,
                Completed = 690970004,
                Canceled = 690970005
            }
            public enum Status
            {
                Proposed = 1,
                Committed = 2,
                Canceled = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_committype
            {
                Canceled = 192350004,
                None = 192350000,
                HardBook = 192350001,
                SoftBook = 192350002,
                Proposed = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_uniquenumber")]
	public class msdyn_uniquenumber : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_uniquenumber";
        public msdyn_uniquenumber() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_uniquenumberid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_uniquenumberid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_uniquenumberId = null;
		
		public readonly double? msdyn_number = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_emailtemplate")]
	public class msfp_emailtemplate : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_emailtemplate";
        public msfp_emailtemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msfp_emailtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msfp_emailtemplateid"] = value;
            }
        }
		
		public readonly bool? msfp_Canedit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msfp_name = null;
		
		public readonly string msfp_emailtemplatebody = null;
		
		public readonly Guid? msfp_emailtemplateId = null;
		
		public readonly string msfp_emailtemplatesubject = null;
		
		public readonly bool? msfp_Candelete = null;
		
		public readonly bool? msfp_Canrename = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_3dmodel")]
	public class msdyn_3dmodel : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_3dmodel";
        public msdyn_3dmodel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_3dmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_3dmodelid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_StorageType = null;
		
		public readonly byte[] EntityImage = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_FileType = null;
		
		public readonly Guid? msdyn_3dmodelId = null;
		
		public readonly string msdyn_FileURL = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_StorageType
            {
                NoteAttachment = 100000000,
                URL = 100000001
            }
            public enum msdyn_FileType
            {
                Gltf = 100000000,
                Glb = 100000001,
                Obj = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("processstage")]
	public class ProcessStage : Entity
    {
        public const string EntityLogicalName = "processstage";
        public ProcessStage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processstageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processstageid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string StageName = null;
		
		public readonly Guid? ProcessStageId = null;
		
		public readonly OptionSetValue StageCategory = null;
		
		public readonly string ClientData = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum StageCategory
            {
                Qualify = 0,
                Develop = 1,
                Propose = 2,
                Close = 3,
                Identify = 4,
                Research = 5,
                Resolve = 6,
                Approval = 7
            }
            public enum PrimaryEntityTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementinvoicesetup")]
	public class msdyn_agreementinvoicesetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementinvoicesetup";
        public msdyn_agreementinvoicesetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementinvoicesetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementinvoicesetupid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? stageid = null;
		
		public readonly string msdyn_RecurrenceSettings = null;
		
		public readonly int? msdyn_Revision = null;
		
		public readonly string traversedpath = null;
		
		public readonly DateTime? msdyn_PostponeGenerationUntil = null;
		
		public readonly Guid? msdyn_agreementinvoicesetupId = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly Guid? processid = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("calendar")]
	public class Calendar : Entity
    {
        public const string EntityLogicalName = "calendar";
        public Calendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference HolidayScheduleCalendarId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsShared = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? PrimaryUserId = null;
		
		public readonly OptionSetValue Type = null;

        public new static class Options
        {
            public enum Type
            {
                Default = 0,
                CustomerService = 1,
                HolidaySchedule = 2,
                InnerCalendarType = -1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionstatisticsoutlook")]
	public class SubscriptionStatisticsOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoutlook";
        public SubscriptionStatisticsOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? FullSyncRequired = null;
		
		public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_timeoffrequest")]
	public class msdyn_timeoffrequest : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_timeoffrequest";
        public msdyn_timeoffrequest() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_timeoffrequestid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_timeoffrequestid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Resource = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_timeoffrequestId = null;
		
		public readonly EntityReference msdyn_Approvedby = null;
		
		public readonly int? msdyn_Duration = null;
		
		public readonly DateTime? msdyn_StartTime = null;
		
		public readonly DateTime? msdyn_EndTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("routingruleitem")]
	public class RoutingRuleItem : Entity
    {
        public const string EntityLogicalName = "routingruleitem";
        public RoutingRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleitemid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference AssignObjectId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? RoutingRuleItemIdUnique = null;
		
		public readonly DateTime? AssignObjectIdModifiedOn = null;
		
		public readonly string ConditionXml = null;
		
		public readonly EntityReference RoutingRuleId = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? RoutingRuleItemId = null;
		
		public readonly EntityReference RoutedQueueId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelineinvoiceschedule")]
	public class msdyn_quotelineinvoiceschedule : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_quotelineinvoiceschedule";
        public msdyn_quotelineinvoiceschedule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelineinvoicescheduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelineinvoicescheduleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_transactioncutoffdate = null;
		
		public readonly EntityReference msdyn_QuoteLineScheduleOfValue = null;
		
		public readonly string msdyn_QuoteLine = null;
		
		public readonly EntityReference msdyn_quotelineid = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? msdyn_quotelineinvoicescheduleId = null;
		
		public readonly DateTime? msdyn_InvoiceRunDate = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_solutionhistorydatasource")]
	public class msdyn_solutionhistorydatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_solutionhistorydatasource";
        public msdyn_solutionhistorydatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_solutionhistorydatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_solutionhistorydatasourceid"] = value;
            }
        }
		
		public readonly Guid? msdyn_solutionhistorydatasourceId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_timeoffcalendar")]
	public class msdyn_timeoffcalendar : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_timeoffcalendar";
        public msdyn_timeoffcalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_timeoffcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_timeoffcalendarid"] = value;
            }
        }
		
		public readonly string msdyn_calendar = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_timeoffcalendarId = null;
		
		public readonly EntityReference msdyn_timeEntry = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_incidenttypecharacteristic")]
	public class msdyn_incidenttypecharacteristic : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_incidenttypecharacteristic";
        public msdyn_incidenttypecharacteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_incidenttypecharacteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_incidenttypecharacteristicid"] = value;
            }
        }
		
		public readonly Guid? msdyn_incidenttypecharacteristicId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_RatingValue = null;
		
		public readonly EntityReference msdyn_Characteristic = null;
		
		public readonly EntityReference msdyn_IncidentType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("navigationsetting")]
	public class NavigationSetting : Entity
    {
        public const string EntityLogicalName = "navigationsetting";
        public NavigationSetting() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("navigationsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["navigationsettingid"] = value;
            }
        }
		
		public readonly Guid? IconResourceId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference AppConfigId = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? AdvancedSettingOrder = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? QuickSettingOrder = null;
		
		public readonly Guid? NavigationSettingId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string GroupName = null;
		
		public readonly Guid? NavigationSettingIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly Guid? ParentNavigationSettingId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string PageUrl = null;
		
		public readonly OptionSetValue SettingType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ResourceId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? Privileges = null;
		
		public readonly Guid? AppConfigIdUnique = null;
		
		public readonly bool? ProgressState = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum SettingType
            {
                AdvancedSetup = 0,
                BasicSetup = 1,
                AdvancedSetupSummary = 2,
                BasicSetupSummary = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("customcontroldefaultconfig")]
	public class CustomControlDefaultConfig : Entity
    {
        public const string EntityLogicalName = "customcontroldefaultconfig";
        public CustomControlDefaultConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontroldefaultconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontroldefaultconfigid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ControlDescriptionJson = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string EventsXml = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ControlDescriptionXML = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? CustomControlDefaultConfigId = null;
		
		public readonly Guid? CustomControlDefaultConfigIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_upgraderun")]
	public class msdyn_upgraderun : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_upgraderun";
        public msdyn_upgraderun() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_upgraderunid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_upgraderunid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_finished")]
		public readonly DateTime? msdyn_FinishedDate = null;
		
		public readonly string msdyn_Solution = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly string msdyn_StartingVersion = null;
		
		public readonly Guid? msdyn_upgraderunId = null;
		
		public readonly string msdyn_Package = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_Summary = null;
		
		public readonly string msdyn_TargetVersion = null;
		
		public readonly string msdyn_Error = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Started = 100000000,
                Success = 100000001,
                Failure = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("savedorginsightsconfiguration")]
	public class SavedOrgInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "savedorginsightsconfiguration";
        public SavedOrgInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedorginsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedorginsightsconfigurationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly string JsonData = null;
		
		public readonly DateTime? JsonDataEndTime = null;
		
		public readonly OptionSetValue Lookback = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? JsonDataStartTime = null;
		
		public readonly OptionSetValue MetricType = null;
		
		public readonly Guid? SavedOrgInsightsConfigurationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Parameters = null;
		
		public readonly OptionSetValue PlotOption = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsDrilldown = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum Lookback
            {
                _2H = 1,
                _48H = 2,
                _7D = 3,
                _30D = 4
            }
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }
            public enum PlotOption
            {
                Line = 1,
                Column = 2,
                Area = 3,
                Pie = 4,
                Bar = 5,
                Donut = 6,
                Infocard = 7,
                List = 8,
                DoubleDonut = 9,
                LinearGauge = 10,
                Bubble = 11
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("userapplicationmetadata")]
	public class UserApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "userapplicationmetadata";
        public UserApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userapplicationmetadataid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? FormFactor = null;
		
		public readonly string DisplayName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Lcid = null;
		
		public readonly int? MetadataType = null;
		
		public readonly int? MetadataSubtype = null;
		
		public readonly Guid? UserApplicationMetadataId = null;
		
		public readonly string Data = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string SourceId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string AssociatedEntityLogicalName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Dependency = null;
		
		public readonly int? State = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsDefault = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("dynamicproperty")]
	public class DynamicProperty : Entity
    {
        public const string EntityLogicalName = "dynamicproperty";
        public DynamicProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyid"] = value;
            }
        }
		
		public readonly string DefaultValueString = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? DefaultValueInteger = null;
		
		public readonly int? Precision = null;
		
		public readonly string Description = null;
		
		public readonly int? MaxValueInteger = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly Guid? RootDynamicPropertyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly decimal? DefaultValueDecimal = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsReadOnly = null;
		
		public readonly bool? IsRequired = null;
		
		public readonly OptionSetValue DataType = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference DefaultValueOptionSet = null;
		
		public readonly decimal? MinValueDecimal = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? MinValueInteger = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly double? MinValueDouble = null;
		
		public readonly int? MaxLengthString = null;
		
		public readonly decimal? MaxValueDecimal = null;
		
		public readonly bool? IsHidden = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly double? MaxValueDouble = null;
		
		public readonly Guid? OverwrittenDynamicPropertyId = null;
		
		public readonly EntityReference BaseDynamicPropertyId = null;
		
		public readonly double? DefaultValueDouble = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? DynamicPropertyId = null;

        public new static class Options
        {
            public enum DataType
            {
                OptionSet = 0,
                Decimal = 1,
                FloatingPointNumber = 2,
                SingleLineOfText = 3,
                WholeNumber = 4
            }
            public enum statecode
            {
                Active = 0,
                Draft = 1,
                Retired = 2
            }
            public enum statuscode
            {
                Active = 1,
                Draft = 0,
                Retired = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_payment")]
	public class msdyn_payment : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_payment";
        public msdyn_payment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_paymentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_paymentid"] = value;
            }
        }
		
		public readonly DateTime? msdyn_Date = null;
		
		public readonly EntityReference msdyn_Account = null;
		
		public readonly string msdyn_CheckNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_PaymentMethod = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly OptionSetValue msdyn_PaymentType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_UnappliedAmount = null;
		
		public readonly EntityReference msdyn_WorkOrder = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly Money msdyn_unappliedamount_Base = null;
		
		public readonly Guid? msdyn_paymentId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_PaymentType
            {
                Cash = 690970000,
                Check = 690970001,
                CreditCard = 690970002,
                Other = 690970003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("competitorproduct")]
	public class CompetitorProduct : Entity
    {
        public const string EntityLogicalName = "competitorproduct";
        public CompetitorProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorproductid"] = value;
            }
        }
		
		public readonly Guid? CompetitorId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? CompetitorProductId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitlementchannel")]
	public class EntitlementChannel : Entity
    {
        public const string EntityLogicalName = "entitlementchannel";
        public EntitlementChannel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementchannelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementchannelid"] = value;
            }
        }
		
		public readonly decimal? RemainingTerms = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? EntitlementChannelId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference EntitlementId = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Channel = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum Channel
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("hierarchyrule")]
	public class HierarchyRule : Entity
    {
        public const string EntityLogicalName = "hierarchyrule";
        public HierarchyRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchyruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchyruleid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string PrimaryEntityLogicalName = null;
		
		public readonly Guid? PrimaryEntityFormID = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string RelatedEntityLogicalName = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? RelatedEntityFormId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? ShowDisabled = null;
		
		public readonly Guid? HierarchyRuleID = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SortBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? HierarchyRuleIDUnique = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementorganizationunit")]
	public class msdyn_requirementorganizationunit : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementorganizationunit";
        public msdyn_requirementorganizationunit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementorganizationunitid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementorganizationunitid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_OrganizationalUnit = null;
		
		public readonly Guid? msdyn_requirementorganizationunitId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderlineresourcecategory")]
	public class msdyn_orderlineresourcecategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderlineresourcecategory";
        public msdyn_orderlineresourcecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderlineresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderlineresourcecategoryid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference msdyn_ContractLineId = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly Guid? msdyn_orderlineresourcecategoryId = null;
		
		public readonly EntityReference msdyn_ContractLineTransactionClassification = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("webresource")]
	public class WebResource : Entity
    {
        public const string EntityLogicalName = "webresource";
        public WebResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webresourceid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ContentJson = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsHidden = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly bool? IsAvailableForMobileOffline = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string DependencyXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string DisplayName = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string SilverlightVersion = null;
		
		public readonly string Content = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsEnabledForMobileClient = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly string Description = null;
		
		public readonly Guid? WebResourceIdUnique = null;
		
		public readonly OptionSetValue WebResourceType = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum WebResourceType
            {
                WebpageHTML = 1,
                StyleSheetCSS = 2,
                ScriptJScript = 3,
                DataXML = 4,
                PNGFormat = 5,
                JPGFormat = 6,
                GIFFormat = 7,
                SilverlightXAP = 8,
                StyleSheetXSL = 9,
                ICOFormat = 10,
                VectorFormatSVG = 11,
                StringRESX = 12
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("emailserverprofile")]
	public class EmailServerProfile : Entity
    {
        public const string EntityLogicalName = "emailserverprofile";
        public EmailServerProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailserverprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailserverprofileid"] = value;
            }
        }
		
		public readonly OptionSetValue LastAuthorizationStatus = null;
		
		public readonly bool? UseAutoDiscover = null;
		
		public readonly bool? IncomingUseSSL = null;
		
		public readonly int? IncomingPortNumber = null;
		
		public readonly OptionSetValue ServerType = null;
		
		public readonly string IncomingPassword = null;
		
		public readonly int? OutgoingPortNumber = null;
		
		public readonly string OutgoingUsername = null;
		
		public readonly string DefaultServerLocation = null;
		
		public readonly OptionSetValue LastTestExecutionStatus = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue OutgoingCredentialRetrieval = null;
		
		public readonly string OwnerEmailAddress = null;
		
		public readonly bool? OutgoingAutoGrantDelegateAccess = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string LastTestResponse = null;
		
		public readonly OptionSetValue LastTestValidationStatus = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? EmailServerProfileId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? OutgoingUseSSL = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue IncomingCredentialRetrieval = null;
		
		public readonly string ExchangeOnlineTenantId = null;
		
		public readonly int? LastTestTotalExecutionTime = null;
		
		public readonly int? TimeoutMailboxConnectionAfterAmount = null;
		
		public readonly OptionSetValue IncomingAuthenticationProtocol = null;
		
		public readonly DateTime? LastTestStartTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string IncomingUserName = null;
		
		public readonly string LastCrmMessage = null;
		
		public readonly EntityReference IncomingPartnerApplication = null;
		
		public readonly int? MinPollingIntervalInMinutes = null;
		
		public readonly EntityReference OutgoingPartnerApplication = null;
		
		public readonly int? MaxConcurrentConnections = null;
		
		public readonly bool? IncomingUseImpersonation = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue ExchangeVersion = null;
		
		public readonly string EmailServerTypeName = null;
		
		public readonly string OutgoingPassword = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? ProcessEmailsReceivedAfter = null;
		
		public readonly string EncodingCodePage = null;
		
		public readonly string Description = null;
		
		public readonly string OutgoingServerLocation = null;
		
		public readonly bool? IsIncomingPasswordSet = null;
		
		public readonly OptionSetValue OutgoingAuthenticationProtocol = null;
		
		public readonly bool? UseSameSettingsForOutgoingConnections = null;
		
		public readonly bool? MoveUndeliveredEmails = null;
		
		public readonly bool? OutgoingUseImpersonation = null;
		
		public readonly bool? TimeoutMailboxConnection = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? SendEmailAlert = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsOutgoingPasswordSet = null;
		
		public readonly bool? UseDefaultTenantId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string IncomingServerLocation = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string LastTestRequest = null;

        public new static class Options
        {
            public enum LastAuthorizationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum ServerType
            {
                ExchangeServer = 0,
                OtherPOP3SMTP = 1,
                ExchangeServerHybrid = 2,
                ExchangeOnlineHybrid = 3,
                IMAPSMTP = 4
            }
            public enum LastTestExecutionStatus
            {
                Failure = 0,
                Success = 1,
                Warning = 2
            }
            public enum OutgoingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4
            }
            public enum LastTestValidationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum IncomingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4
            }
            public enum IncomingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3
            }
            public enum ExchangeVersion
            {
                Exchange2007 = 0,
                Exchange2007SP1 = 1,
                Exchange2010 = 2,
                Exchange2010SP1 = 3,
                Exchange2010SP2 = 4,
                Exchange2013 = 5
            }
            public enum OutgoingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderlinetransaction")]
	public class msdyn_orderlinetransaction : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderlinetransaction";
        public msdyn_orderlinetransaction() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderlinetransactionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderlinetransactionid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly decimal? msdyn_Quantity = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly Money msdyn_BasisPrice = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly DateTime? msdyn_AccountingDate = null;
		
		public readonly OptionSetValue msdyn_CustomerType = null;
		
		public readonly Money msdyn_tax = null;
		
		public readonly string msdyn_SalesContractLine = null;
		
		public readonly DateTime? msdyn_DocumentDate = null;
		
		public readonly EntityReference msdyn_UnitSchedule = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_ContactCustomer = null;
		
		public readonly DateTime? msdyn_ExchangeRateDate = null;
		
		public readonly Money msdyn_BasisAmount = null;
		
		public readonly EntityReference msdyn_Origin = null;
		
		public readonly EntityReference msdyn_AccountCustomer = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly decimal? msdyn_BasisQuantity = null;
		
		public readonly Money msdyn_basisamount_Base = null;
		
		public readonly OptionSetValue msdyn_AmountMethod = null;
		
		public readonly Money msdyn_amount_after_tax_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_AccountVendor = null;
		
		public readonly Money msdyn_tax_Base = null;
		
		public readonly EntityReference msdyn_SalesContractLineId = null;
		
		public readonly Money msdyn_amount_after_tax = null;
		
		public readonly EntityReference msdyn_ContactVendor = null;
		
		public readonly Guid? msdyn_orderlinetransactionId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_PriceList = null;
		
		public readonly decimal? msdyn_Percent = null;
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly EntityReference msdyn_SalesContract = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Task = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_VendorType = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly Money msdyn_basisprice_Base = null;

        public new static class Options
        {
            public enum msdyn_CustomerType
            {
                Account = 192350001,
                Contact = 192350002
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }
            public enum msdyn_AmountMethod
            {
                TaxCalculation = 690970000,
                MultiplyQuantityByPrice = 192350000,
                FixedPrice = 192350001,
                MultiplyBasisQuantityByPrice = 192350002,
                MultiplyBasisAmountByPercent = 192350003
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_VendorType
            {
                Account = 192350001,
                Contact = 192350002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotalert")]
	public class msdyn_iotalert : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotalert";
        public msdyn_iotalert() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotalertid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotalertid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly string msdyn_DeviceID = null;
		
		public readonly string msdyn_AlertToken = null;
		
		public readonly Guid? stageid = null;
		
		public readonly DateTime? msdyn_LastCommandSentTime = null;
		
		public readonly EntityReference msdyn_LastCommandSent = null;
		
		public readonly DateTime? msdyn_AlertTime = null;
		
		public readonly string traversedpath = null;
		
		public readonly string msdyn_AlertURL = null;
		
		public readonly string msdyn_ParentAlertToken = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_Device = null;
		
		public readonly EntityReference msdyn_ParentAlert = null;
		
		public readonly OptionSetValue msdyn_alerttype = null;
		
		public readonly EntityReference msdyn_Workorder = null;
		
		public readonly EntityReference msdyn_case = null;
		
		public readonly string msdyn_AlertData = null;
		
		public readonly Guid? msdyn_iotalertId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1,
                InProgress = 2,
                Closed = 3
            }
            public enum msdyn_alerttype
            {
                Anomaly = 192350000,
                Info = 192350001,
                PreventiveMaintenance = 192350002,
                Test = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2,
                InProgressCaseCreated = 3,
                InProgressWorkOrderCreated = 4,
                InProgressCommandSent = 5,
                Closed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("savedqueryvisualization")]
	public class SavedQueryVisualization : Entity
    {
        public const string EntityLogicalName = "savedqueryvisualization";
        public SavedQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryvisualizationid"] = value;
            }
        }
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly string DataDescription = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string PresentationDescription = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SavedQueryVisualizationIdUnique = null;
		
		public readonly OptionSetValue ChartType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SavedQueryVisualizationId = null;
		
		public readonly EntityReference WebResourceId = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }
            public enum Type
            {
                ForDataCentricAsWellAsInteractionCentric = 0,
                JustForInteractionCentric = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("commitment")]
	public class Commitment : Entity
    {
        public const string EntityLogicalName = "commitment";
        public Commitment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("commitmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["commitmentid"] = value;
            }
        }
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly Guid? ResourceSpecId = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly int? ParticipationTypeMask = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? CommitmentId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string Subject = null;
		
		public readonly double? Effort = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? PartyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string ActivityTypeCode = null;

        public new static class Options
        {
            public enum StateCode
            {

            }
            public enum StatusCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("organizationstatistic")]
	public class OrganizationStatistic : Entity
    {
        public const string EntityLogicalName = "organizationstatistic";
        public OrganizationStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationstatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationstatisticid"] = value;
            }
        }
		
		public readonly string ServerName = null;
		
		public readonly int? Hour = null;
		
		public readonly Guid? OrganizationStatisticId = null;
		
		public readonly int? StatisticValue = null;
		
		public readonly int? StatisticType = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("usersettings")]
	public class UserSettings : Entity
    {
        public const string EntityLogicalName = "usersettings";
        public UserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }
		
		public readonly string WorkdayStartTime = null;
		
		public readonly int? UILanguageId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? LastAlertsViewedTime = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsResourceBookingExchangeSyncEnabled = null;
		
		public readonly bool? IsDefaultCountryCodeCheckEnabled = null;
		
		public readonly string DefaultCountryCode = null;
		
		public readonly string HomepageLayout = null;
		
		public readonly int? TimeZoneDaylightMinute = null;
		
		public readonly bool? IsAutoDataCaptureEnabled = null;
		
		public readonly int? TimeZoneStandardBias = null;
		
		public readonly bool? IsDuplicateDetectionEnabledWhenGoingOnline = null;
		
		public readonly int? LongDateFormatCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OfflineSyncInterval = null;
		
		public readonly string DateSeparator = null;
		
		public readonly int? DefaultCalendarView = null;
		
		public readonly string EmailPassword = null;
		
		public readonly bool? IsAppsForCrmAlertDismissed = null;
		
		public readonly bool? UseCrmFormForContact = null;
		
		public readonly bool? IsEmailConversationViewEnabled = null;
		
		public readonly bool? SyncContactCompany = null;
		
		public readonly OptionSetValue EntityFormMode = null;
		
		public readonly int? TimeZoneDaylightDay = null;
		
		public readonly int? ResourceBookingExchangeSyncVersion = null;
		
		public readonly string UserProfile = null;
		
		public readonly int? FullNameConventionCode = null;
		
		public readonly int? CalendarType = null;
		
		public readonly int? TimeZoneStandardSecond = null;
		
		public readonly string PersonalizationSettings = null;
		
		public readonly string PMDesignator = null;
		
		public readonly string DecimalSymbol = null;
		
		public readonly int? HelpLanguageId = null;
		
		public readonly string TimeSeparator = null;
		
		public readonly int? PricingDecimalPrecision = null;
		
		public readonly bool? AllowEmailCredentials = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly int? TimeZoneStandardDay = null;
		
		public readonly int? PagingLimit = null;
		
		public readonly bool? IsSendAsAllowed = null;
		
		public readonly Guid? DefaultDashboardId = null;
		
		public readonly int? NegativeFormatCode = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly bool? ShowWeekNumber = null;
		
		public readonly Guid? SelectedGlobalFilterId = null;
		
		public readonly OptionSetValue DataValidationModeForExportToExcel = null;
		
		public readonly bool? IsGuidedHelpEnabled = null;
		
		public readonly int? TimeZoneDaylightMonth = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly string NumberSeparator = null;
		
		public readonly int? TimeZoneStandardMinute = null;
		
		public readonly string NumberGroupFormat = null;
		
		public readonly int? TimeZoneDaylightYear = null;
		
		public readonly int? TimeZoneDaylightBias = null;
		
		public readonly int? TimeZoneStandardYear = null;
		
		public readonly string HomepageArea = null;
		
		public readonly int? DateFormatCode = null;
		
		public readonly OptionSetValue VisualizationPaneLayout = null;
		
		public readonly int? NegativeCurrencyFormatCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string WorkdayStopTime = null;
		
		public readonly int? AutoCreateContactOnPromote = null;
		
		public readonly int? AdvancedFindStartupMode = null;
		
		public readonly int? TimeFormatCode = null;
		
		public readonly bool? SplitViewState = null;
		
		public readonly int? LocaleId = null;
		
		public readonly int? OutlookSyncInterval = null;
		
		public readonly int? TimeZoneDaylightDayOfWeek = null;
		
		public readonly string AMDesignator = null;
		
		public readonly bool? GetStartedPaneContentEnabled = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? CurrencyFormatCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue DefaultSearchExperience = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TrackingTokenId = null;
		
		public readonly string TimeFormatString = null;
		
		public readonly int? TimeZoneStandardDayOfWeek = null;
		
		public readonly int? NextTrackingNumber = null;
		
		public readonly int? CurrencyDecimalPrecision = null;
		
		public readonly bool? IgnoreUnsolicitedEmail = null;
		
		public readonly OptionSetValue ReportScriptErrors = null;
		
		public readonly int? TimeZoneBias = null;
		
		public readonly int? AddressBookSyncInterval = null;
		
		public readonly OptionSetValue IncomingEmailFilteringMethod = null;
		
		public readonly bool? UseCrmFormForEmail = null;
		
		public readonly int? TimeZoneStandardHour = null;
		
		public readonly bool? UseCrmFormForAppointment = null;
		
		public readonly bool? UseImageStrips = null;
		
		public readonly int? TimeZoneDaylightHour = null;
		
		public readonly bool? UseCrmFormForTask = null;
		
		public readonly string DateFormatString = null;
		
		public readonly string EmailUsername = null;
		
		public readonly int? TimeZoneDaylightSecond = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly int? TimeZoneStandardMonth = null;
		
		public readonly string HomepageSubarea = null;

        public new static class Options
        {
            public enum EntityFormMode
            {
                OrganizationDefault = 0,
                ReadOptimized = 1,
                Edit = 2
            }
            public enum DataValidationModeForExportToExcel
            {
                Full = 0,
                None = 1
            }
            public enum VisualizationPaneLayout
            {
                TopBottom = 0,
                SideBySide = 1
            }
            public enum DefaultSearchExperience
            {
                UseLastSearch = 2,
                RelevanceSearch = 0,
                CategorizedSearch = 1,
                CustomSearch = 3
            }
            public enum ReportScriptErrors
            {
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdeviceproperty")]
	public class msdyn_iotdeviceproperty : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdeviceproperty";
        public msdyn_iotdeviceproperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicepropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicepropertyid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_DeviceCategory = null;
		
		public readonly Guid? msdyn_iotdevicepropertyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Property = null;
		
		public readonly bool? msdyn_IsTag = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("roleprivileges")]
	public class RolePrivileges : Entity
    {
        public const string EntityLogicalName = "roleprivileges";
        public RolePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleprivilegeid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? RoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? PrivilegeDepthMask = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? RolePrivilegeId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly Guid? RolePrivilegeIdUnique = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_postruleconfig")]
	public class msdyn_PostRuleConfig : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_postruleconfig";
        public msdyn_PostRuleConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postruleconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postruleconfigid"] = value;
            }
        }
		
		public readonly string msdyn_RuleSource = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_FormatId = null;
		
		public readonly Guid? msdyn_PostRuleConfigId = null;
		
		public readonly EntityReference msdyn_PostConfigId = null;
		
		public readonly bool? msdyn_PostToYammer = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_StepId = null;
		
		public readonly string msdyn_RuleId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("duplicaterecord")]
	public class DuplicateRecord : Entity
    {
        public const string EntityLogicalName = "duplicaterecord";
        public DuplicateRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateid"] = value;
            }
        }
		
		public readonly EntityReference DuplicateRecordId = null;
		
		public readonly Guid? DuplicateId = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference DuplicateRuleId = null;
		
		public readonly EntityReference BaseRecordId = null;
		
		public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicecategory")]
	public class msdyn_iotdevicecategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdevicecategory";
        public msdyn_iotdevicecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicecategoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_iotdevicecategoryId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("kbarticle")]
	public class KbArticle : Entity
    {
        public const string EntityLogicalName = "kbarticle";
        public KbArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference KbArticleTemplateId = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly string Comments = null;
		
		public readonly string KeyWords = null;
		
		public readonly string Number = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ArticleXml = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? KbArticleId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly string Content = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessagepair")]
	public class SdkMessagePair : Entity
    {
        public const string EntityLogicalName = "sdkmessagepair";
        public SdkMessagePair() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagepairid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagepairid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string DeprecatedVersion = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Namespace = null;
		
		public readonly string Endpoint = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly Guid? SdkMessagePairId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SdkMessagePairIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string SdkMessageBindingInformation = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("timezonelocalizedname")]
	public class TimeZoneLocalizedName : Entity
    {
        public const string EntityLogicalName = "timezonelocalizedname";
        public TimeZoneLocalizedName() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonelocalizednameid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonelocalizednameid"] = value;
            }
        }
		
		public readonly Guid? TimeZoneLocalizedNameId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference TimeZoneDefinitionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string UserInterfaceName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? CultureId = null;
		
		public readonly string DaylightName = null;
		
		public readonly string StandardName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_agreementbookingincident")]
	public class msdyn_agreementbookingincident : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_agreementbookingincident";
        public msdyn_agreementbookingincident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_agreementbookingincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_agreementbookingincidentid"] = value;
            }
        }
		
		public readonly bool? msdyn_IncidentItemsCopied = null;
		
		public readonly EntityReference msdyn_CustomerAsset = null;
		
		public readonly int? msdyn_EstimatedDuration = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_AgreementBookingSetup = null;
		
		public readonly EntityReference msdyn_Agreement = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly EntityReference msdyn_IncidentType = null;
		
		public readonly Guid? msdyn_agreementbookingincidentId = null;
		
		public readonly string msdyn_InternalFlags = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotelineanalyticsbreakdown")]
	public class msdyn_quotelineanalyticsbreakdown : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotelineanalyticsbreakdown";
        public msdyn_quotelineanalyticsbreakdown() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotelineanalyticsbreakdownid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotelineanalyticsbreakdownid"] = value;
            }
        }
		
		public readonly Money msdyn_price_Base = null;
		
		public readonly DateTime? msdyn_EndDateTime = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_Price = null;
		
		public readonly EntityReference msdyn_QuoteLineDetail = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly DateTime? msdyn_StartDateTime = null;
		
		public readonly EntityReference msdyn_Quote = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly Money msdyn_Amount = null;
		
		public readonly Guid? msdyn_quotelineanalyticsbreakdownId = null;
		
		public readonly OptionSetValue msdyn_TransactionTypeCode = null;
		
		public readonly EntityReference msdyn_TransactionCategory = null;
		
		public readonly EntityReference msdyn_QuoteLineScheduleOfValue = null;
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_amount_Base = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionTypeCode
            {
                Cost = 192350000,
                ProjectContract = 192350004,
                UnbilledSales = 192350005,
                BilledSales = 192350006,
                ResourcingUnitCost = 192350007,
                InterOrganizationalSales = 192350008
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("fax")]
	public class Fax : Entity
    {
        public const string EntityLogicalName = "fax";
        public Fax() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string BillingCode = null;
		
		public readonly EntityCollection from = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityCollection to = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string Category = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string CoverPageName = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? NumberOfPages = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string FaxNumber = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string Tsid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("channelaccessprofile")]
	public class ChannelAccessProfile : Entity
    {
        public const string EntityLogicalName = "channelaccessprofile";
        public ChannelAccessProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? SubmitFeedback = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? ChannelAccessProfileIdUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? FacebookAccess = null;
		
		public readonly bool? TwitterAccess = null;
		
		public readonly bool? ViewArticleRating = null;
		
		public readonly bool? PhoneAccess = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? WebAccess = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? RateKnowledgeArticles = null;
		
		public readonly bool? IsGuestProfile = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? ChannelAccessProfileId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? HavePrivilegesChanged = null;
		
		public readonly bool? ViewKnowledgeArticles = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? EmailAccess = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("languageprovisioningstate")]
	public class LanguageProvisioningState : Entity
    {
        public const string EntityLogicalName = "languageprovisioningstate";
        public LanguageProvisioningState() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("languageprovisioningstateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["languageprovisioningstateid"] = value;
            }
        }
		
		public readonly OptionSetValue ProvisioningStage = null;
		
		public readonly int? LanguageId = null;
		
		public readonly Guid? LanguageProvisioningStateId = null;
		
		public readonly string SolutionFileVersion = null;
		
		public readonly string ApplicationVersion = null;
		
		public readonly string SolutionUniqueName = null;

        public new static class Options
        {
            public enum ProvisioningStage
            {
                FileBased = 1,
                MetadataHelperDependent = 2,
                SystemOnly = 3,
                Other = 4,
                Ribbon = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_transactioncategoryclassification")]
	public class msdyn_transactioncategoryclassification : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_transactioncategoryclassification";
        public msdyn_transactioncategoryclassification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_transactioncategoryclassificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_transactioncategoryclassificationid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_transactionclassification = null;
		
		public readonly Guid? msdyn_transactioncategoryclassificationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_transactioncategory = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_transactionclassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("salesliteratureitem")]
	public class SalesLiteratureItem : Entity
    {
        public const string EntityLogicalName = "salesliteratureitem";
        public SalesLiteratureItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesliteratureitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesliteratureitemid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SalesLiteratureId = null;
		
		public readonly string AttachedDocumentUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string AuthorName = null;
		
		public readonly string FileName = null;
		
		public readonly Guid? SalesLiteratureItemId = null;
		
		public readonly int? FileSize = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? FileType = null;
		
		public readonly OptionSetValue FileTypeCode = null;
		
		public readonly string KeyWords = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Abstract = null;
		
		public readonly string MimeType = null;
		
		public readonly string DocumentBody = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsCustomerViewable = null;
		
		public readonly string Mode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum FileTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("workflowwaitsubscription")]
	public class WorkflowWaitSubscription : Entity
    {
        public const string EntityLogicalName = "workflowwaitsubscription";
        public WorkflowWaitSubscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowwaitsubscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowwaitsubscriptionid"] = value;
            }
        }
		
		public readonly bool? IsDeleted = null;
		
		public readonly bool? IsModified = null;
		
		public readonly string WaitOnAttributeList = null;
		
		public readonly Guid? EntityId = null;
		
		public readonly Guid? WorkflowWaitSubscriptionId = null;
		
		public readonly string Data = null;
		
		public readonly string EntityName = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotproviderinstance")]
	public class msdyn_iotproviderinstance : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotproviderinstance";
        public msdyn_iotproviderinstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotproviderinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotproviderinstanceid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_ProviderInstanceId = null;
		
		public readonly Guid? msdyn_iotproviderinstanceId = null;
		
		public readonly EntityReference msdyn_IoTProvider = null;
		
		public readonly string msdyn_URL = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitymap")]
	public class EntityMap : Entity
    {
        public const string EntityLogicalName = "entitymap";
        public EntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitymapid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? EntityMapId = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly Guid? EntityMapIdUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_businessclosure")]
	public class msdyn_businessclosure : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_businessclosure";
        public msdyn_businessclosure() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_businessclosureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_businessclosureid"] = value;
            }
        }
		
		public readonly bool? msdyn_IsAllDayEvent = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_businessclosureId = null;
		
		public readonly int? msdyn_SelectedYear = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly DateTime? msdyn_StartTime = null;
		
		public readonly DateTime? msdyn_EndTime = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("businessdatalocalizedlabel")]
	public class BusinessDataLocalizedLabel : Entity
    {
        public const string EntityLogicalName = "businessdatalocalizedlabel";
        public BusinessDataLocalizedLabel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessdatalocalizedlabelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessdatalocalizedlabelid"] = value;
            }
        }
		
		public readonly int? ObjectColumnNumber = null;
		
		public readonly Guid? BusinessDataLocalizedLabelId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly string ObjectColumnName = null;
		
		public readonly int? LanguageId = null;
		
		public readonly string Label = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_purchaseorderproduct")]
	public class msdyn_purchaseorderproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_purchaseorderproduct";
        public msdyn_purchaseorderproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_purchaseorderproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_purchaseorderproductid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly double? msdyn_QtyReceived = null;
		
		public readonly EntityReference msdyn_AssociateToWarehouse = null;
		
		public readonly DateTime? msdyn_DateExpected = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Unit = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_purchaseorderproductId = null;
		
		public readonly EntityReference msdyn_AssociateToWorkOrder = null;
		
		public readonly bool? msdyn_IsOrdered = null;
		
		public readonly int? msdyn_LineOrder = null;
		
		public readonly Money msdyn_UnitCost = null;
		
		public readonly double? msdyn_QtyBilled = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly Money msdyn_totalcost_Base = null;
		
		public readonly double? msdyn_Quantity = null;
		
		public readonly EntityReference msdyn_AssociateToBooking = null;
		
		public readonly Money msdyn_unitcost_Base = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly EntityReference msdyn_PurchaseOrder = null;
		
		public readonly OptionSetValue msdyn_ItemStatus = null;
		
		public readonly Money msdyn_TotalCost = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_ItemStatus
            {
                Pending = 690970000,
                Received = 690970001,
                Canceled = 690970002
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_resourceterritory")]
	public class msdyn_resourceterritory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_resourceterritory";
        public msdyn_resourceterritory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_resourceterritoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_resourceterritoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Territory = null;
		
		public readonly EntityReference msdyn_Resource = null;
		
		public readonly Guid? msdyn_resourceterritoryId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_dataexport")]
	public class msdyn_dataexport : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_dataexport";
        public msdyn_dataexport() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_dataexportid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_dataexportid"] = value;
            }
        }
		
		public readonly Guid? msdyn_dataexportId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_pagingdata = null;
		
		public readonly int? msdyn_exportedrecordcount = null;
		
		public readonly string msdyn_linkedentitydata = null;
		
		public readonly OptionSetValue msdyn_exportstatus = null;
		
		public readonly string msdyn_datatoken = null;
		
		public readonly string msdyn_entityname = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_exportstatus
            {
                Submitted = 192350000,
                Exporting = 192350001,
                CompletedAllRecordsExtracted = 192350002,
                ExportedWithMoreRecordsToExtract = 192350003
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bpf_665e73aa18c247d886bfc50499c73b82")]
	public class msdyn_bpf_665e73aa18c247d886bfc50499c73b82 : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_bpf_665e73aa18c247d886bfc50499c73b82";
        public msdyn_bpf_665e73aa18c247d886bfc50499c73b82() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference bpf_msdyn_projectid = null;
		
		public readonly int? bpf_Duration = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string bpf_name = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdynsm_settingssitemap")]
	public class msdynsm_settingssitemap : OrganizationEntity
    {
        public const string EntityLogicalName = "msdynsm_settingssitemap";
        public msdynsm_settingssitemap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdynsm_settingssitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdynsm_settingssitemapid"] = value;
            }
        }
		
		public readonly Guid? msdynsm_settingssitemapId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdynsm_name = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_componentlayerdatasource")]
	public class msdyn_componentlayerdatasource : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_componentlayerdatasource";
        public msdyn_componentlayerdatasource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_componentlayerdatasourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_componentlayerdatasourceid"] = value;
            }
        }
		
		public readonly Guid? msdyn_componentlayerdatasourceId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("actioncardusersettings")]
	public class ActionCardUserSettings : Entity
    {
        public const string EntityLogicalName = "actioncardusersettings";
        public ActionCardUserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardusersettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardusersettingsid"] = value;
            }
        }
		
		public readonly bool? BoolCardOption = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsEnabled = null;
		
		public readonly int? IntCardOption = null;
		
		public readonly string StringCardOption = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CardTypeId = null;
		
		public readonly int? CardType = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ActionCardUserSettingsId = null;
		
		public readonly EntityReference OwnerId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("partnerapplication")]
	public class PartnerApplication : Entity
    {
        public const string EntityLogicalName = "partnerapplication";
        public PartnerApplication() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("partnerapplicationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["partnerapplicationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? TenantId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly OptionSetValue ApplicationRole = null;
		
		public readonly bool? UseAuthorizationServer = null;
		
		public readonly Guid? PartnerApplicationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Realm = null;
		
		public readonly string MetadataUrl = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string PrincipalId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ApplicationRole
            {
                Client = 0,
                Server = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("serviceendpoint")]
	public class ServiceEndpoint : Entity
    {
        public const string EntityLogicalName = "serviceendpoint";
        public ServiceEndpoint() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceendpointid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceendpointid"] = value;
            }
        }
		
		public readonly bool? IsAuthValueSet = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue NamespaceFormat = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsSASKeySet = null;
		
		public readonly OptionSetValue AuthType = null;
		
		public readonly string NamespaceAddress = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string SolutionNamespace = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string AuthValue = null;
		
		public readonly OptionSetValue MessageFormat = null;
		
		public readonly string SASKeyName = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue UserClaim = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Path = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ServiceEndpointId = null;
		
		public readonly OptionSetValue Contract = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ServiceEndpointIdUnique = null;
		
		public readonly OptionSetValue ConnectionMode = null;
		
		public readonly string Url = null;
		
		public readonly bool? IsSASTokenSet = null;
		
		public readonly string SASToken = null;
		
		public readonly string SASKey = null;

        public new static class Options
        {
            public enum NamespaceFormat
            {
                NamespaceName = 1,
                NamespaceAddress = 2
            }
            public enum AuthType
            {
                ACS = 1,
                SASKey = 2,
                SASToken = 3,
                WebhookKey = 4,
                HttpHeader = 5,
                HttpQueryString = 6
            }
            public enum MessageFormat
            {
                BinaryXML = 1,
                Json = 2,
                TextXML = 3
            }
            public enum UserClaim
            {
                None = 1,
                UserId = 2,
                UserInfo = 3
            }
            public enum Contract
            {
                OneWay = 1,
                Queue = 2,
                Rest = 3,
                TwoWay = 4,
                Topic = 5,
                QueuePersistent = 6,
                EventHub = 7,
                Webhook = 8
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ConnectionMode
            {
                Normal = 1,
                Federated = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("wizardpage")]
	public class WizardPage : Entity
    {
        public const string EntityLogicalName = "wizardpage";
        public WizardPage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardpageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardpageid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly int? PageSequenceNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PageUrl = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string PageDataToPost = null;
		
		public readonly EntityReference WebWizardId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? WizardPageId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_schedulingparameter")]
	public class msdyn_schedulingparameter : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_schedulingparameter";
        public msdyn_schedulingparameter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_schedulingparameterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_schedulingparameterid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_AutoUpdateBookingTravel = null;
		
		public readonly Guid? msdyn_schedulingparameterId = null;
		
		public readonly string msdyn_BackgroundJobsConfiguration = null;
		
		public readonly int? msdyn_ScheduleBoardRefreshIntervalSeconds = null;
		
		public readonly bool? msdyn_ConnectToMaps = null;
		
		public readonly OptionSetValue msdyn_DefaultRadiusUnit = null;
		
		public readonly bool? msdyn_enableOptimizer = null;
		
		public readonly string msdyn_MapApiKey = null;
		
		public readonly string msdyn_CustomGeoResourceField = null;
		
		public readonly string msdyn_CustomGeoLatitudeField = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_EnableCustomGeoLocation = null;
		
		public readonly string msdyn_CustomGeoLocationEntity = null;
		
		public readonly string msdyn_CustomGeoLongitudeField = null;
		
		public readonly bool? msdyn_DisableSanitizingHTMLTemplates = null;
		
		public readonly int? msdyn_GeoLocationExpiresAfterXMinutes = null;
		
		public readonly int? msdyn_GeoLocationRefreshIntervalSeconds = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_CustomGeoTimestampField = null;
		
		public readonly bool? msdyn_SAAutoFilterServiceTerritory = null;
		
		public readonly string msdyn_AdvancedSettings = null;
		
		public readonly int? msdyn_DefaultRadiusValue = null;

        public new static class Options
        {
            public enum msdyn_AutoUpdateBookingTravel
            {
                Disabled = 192350000,
                Enabled = 192350001
            }
            public enum msdyn_DefaultRadiusUnit
            {
                Miles = 192350000,
                KM = 192350001
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_connector")]
	public class msdyn_Connector : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_connector";
        public msdyn_Connector() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_connectorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_connectorid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string msdyn_DisplayName = null;
		
		public readonly Guid? msdyn_ConnectorId = null;
		
		public readonly Guid? msdyn_ConnectorIdUnique = null;
		
		public readonly string IntroducedVersion = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_Name = null;
		
		public readonly OptionSetValue msdyn_ConnectorType = null;
		
		public readonly string msdyn_Operations = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string msdyn_Payload = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly string msdyn_IconUri = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string msdyn_IconBrandColor = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_ConnectorType
            {
                CustomConnector = 1,
                NotSpecified = 0
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sharepointsite")]
	public class SharePointSite : Entity
    {
        public const string EntityLogicalName = "sharepointsite";
        public SharePointSite() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointsiteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointsiteid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ValidationStatus = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? UserId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsGridPresent = null;
		
		public readonly string FolderStructureEntity = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? SharePointSiteId = null;
		
		public readonly Guid? SiteCollectionId = null;
		
		public readonly OptionSetValue ServiceType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string RelativeUrl = null;
		
		public readonly EntityReference ParentSite = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string AbsoluteURL = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue ValidationStatusErrorCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? LastValidated = null;
		
		public readonly bool? IsPowerBISite = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsDefault = null;

        public new static class Options
        {
            public enum ValidationStatus
            {
                NotValidated = 1,
                InProgress = 2,
                Invalid = 3,
                Valid = 4,
                CouldNotValidate = 5
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum FolderStructureEntity
            {
                None = 0,
                Account = 1,
                Contact = 2
            }
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2,
                MSTeams = 3
            }
            public enum ValidationStatusErrorCode
            {
                ThisRecordSURLHasNotBeenValidated = 1,
                ThisRecordSURLIsValid = 2,
                ThisRecordSURLIsNotValid = 3,
                TheURLSchemesOfMicrosoftDynamics365AndSharePointAreDifferent = 4,
                TheURLCouldNotBeAccessedBecauseOfInternetExplorerSecuritySettings = 5,
                AuthenticationFailure = 6,
                InvalidCertificates = 7
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("azureserviceconnection")]
	public class AzureServiceConnection : Entity
    {
        public const string EntityLogicalName = "azureserviceconnection";
        public AzureServiceConnection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("azureserviceconnectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["azureserviceconnectionid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? LastConnectionTime = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string AccountKey = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string ServiceUri = null;
		
		public readonly OptionSetValue ConnectionType = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue LastConnectionStatusCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? AzureServiceConnectionId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ConnectionType
            {
                Recommendation = 1,
                TextAnalytics = 2
            }
            public enum LastConnectionStatusCode
            {
                Success = 1,
                Failure = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("rollupfield")]
	public class RollupField : Entity
    {
        public const string EntityLogicalName = "rollupfield";
        public RollupField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupfieldid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string EntityForDateAttribute = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string SourceAttribute = null;
		
		public readonly string DateAttribute = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? RollupFieldId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference MetricId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsStateParentEntityAttribute = null;
		
		public readonly string GoalAttribute = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string SourceEntity = null;
		
		public readonly int? SourceState = null;
		
		public readonly int? SourceStatus = null;

        public new static class Options
        {
            public enum EntityForDateAttribute
            {

            }
            public enum SourceEntity
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("queuemembercount")]
	public class QueueMemberCount : Entity
    {
        public const string EntityLogicalName = "queuemembercount";
        public QueueMemberCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembercountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembercountid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("queuemembercount")]
		public readonly string QueueMemberCount1 = null;
		
		public readonly Guid? QueueId = null;
		
		public readonly Guid? QueueMemberCountId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("canvasapp")]
	public class CanvasApp : Entity
    {
        public const string EntityLogicalName = "canvasapp";
        public CanvasApp() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("canvasappid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["canvasappid"] = value;
            }
        }
		
		public readonly string Status = null;
		
		public readonly string BackgroundColor = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string DisplayName = null;
		
		public readonly bool? IsHidden = null;
		
		public readonly bool? IsCdsUpgraded = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly string EmbeddedApp = null;
		
		public readonly Guid? CanvasAppId = null;
		
		public readonly Guid? CanvasAppRowId = null;
		
		public readonly string Tags = null;
		
		public readonly string AppVersion = null;
		
		public readonly string CreatedByClientVersion = null;
		
		public readonly string MinClientVersion = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Publisher = null;
		
		public readonly bool? BypassConsent = null;
		
		public readonly bool? AdminControlBypassConsent = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string AppOpenUri = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string AADCreatedById = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsFeaturedApp = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string GalleryItemId = null;
		
		public readonly DateTime? LastModifiedTime = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly bool? IsHeroApp = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ConnectionReferences = null;
		
		public readonly DateTime? LastPublishTime = null;
		
		public readonly string CommitMessage = null;
		
		public readonly string AADLastModifiedById = null;
		
		public readonly string AADLastPublishedById = null;
		
		public readonly string AuthorizationReferences = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("report")]
	public class Report : Entity
    {
        public const string EntityLogicalName = "report";
        public Report() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportid"] = value;
            }
        }
		
		public readonly int? CreatedInMajorVersion = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? SignatureMajorVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? SignatureLcid = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ReportNameOnSRS = null;
		
		public readonly string BodyUrl = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string CustomReportXml = null;
		
		public readonly Guid? SignatureId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string DefaultFilter = null;
		
		public readonly EntityReference ParentReportId = null;
		
		public readonly DateTime? SignatureDate = null;
		
		public readonly int? SignatureMinorVersion = null;
		
		public readonly string ScheduleXml = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsScheduledReport = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue ReportTypeCode = null;
		
		public readonly string QueryInfo = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string OriginalBodyText = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ReportId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? RdlHash = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly OptionSetValue ComponentState = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly bool? IsCustomReport = null;
		
		public readonly string BodyBinary = null;
		
		public readonly string BodyText = null;
		
		public readonly Guid? ReportIdUnique = null;
		
		public readonly string MimeType = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? FileSize = null;
		
		public readonly string FileName = null;

        public new static class Options
        {
            public enum ReportTypeCode
            {
                ReportingServicesReport = 1,
                OtherReport = 2,
                LinkedReport = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("translationprocess")]
	public class TranslationProcess : Entity
    {
        public const string EntityLogicalName = "translationprocess";
        public TranslationProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_orderlinetransactionclassification")]
	public class msdyn_orderlinetransactionclassification : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_orderlinetransactionclassification";
        public msdyn_orderlinetransactionclassification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_orderlinetransactionclassificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_orderlinetransactionclassificationid"] = value;
            }
        }
		
		public readonly OptionSetValue msdyn_TransactionClassification = null;
		
		public readonly bool? msdyn_Include = null;
		
		public readonly EntityReference msdyn_ContractLineId = null;
		
		public readonly Guid? msdyn_orderlinetransactionclassificationId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly string msdyn_ContractLine = null;
		
		public readonly OptionSetValue msdyn_BillingType = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_TransactionClassification
            {
                Commission = 690970000,
                Additional = 690970001,
                Tax = 690970002,
                Time = 192350000,
                Expense = 192350001,
                Material = 192350002,
                Milestone = 192350003,
                Fee = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_BillingType
            {
                NonChargeable = 192350000,
                Chargeable = 192350001,
                Complimentary = 192350002,
                NotAvailable = 192350003
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("entitydataprovider")]
	public class EntityDataProvider : Entity
    {
        public const string EntityLogicalName = "entitydataprovider";
        public EntityDataProvider() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitydataproviderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitydataproviderid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly Guid? DeletePlugin = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? CreatePlugin = null;
		
		public readonly string DataSourceLogicalName = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? UpdatePlugin = null;
		
		public readonly Guid? EntityDataProviderId = null;
		
		public readonly Guid? RetrievePlugin = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Description = null;
		
		public readonly Guid? RetrieveMultiplePlugin = null;
		
		public readonly Guid? EntityDataProviderIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("applicationfile")]
	public class ApplicationFile : Entity
    {
        public const string EntityLogicalName = "applicationfile";
        public ApplicationFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fileid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? FileId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Body = null;
		
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_msdyn_journal_msdyn_timeentry")]
	public class msdyn_msdyn_journal_msdyn_timeentry : Entity
    {
        public const string EntityLogicalName = "msdyn_msdyn_journal_msdyn_timeentry";
        public msdyn_msdyn_journal_msdyn_timeentry() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_msdyn_journal_msdyn_timeentryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_msdyn_journal_msdyn_timeentryid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? msdyn_msdyn_journal_msdyn_timeentryId = null;
		
		public readonly Guid? msdyn_journalid = null;
		
		public readonly Guid? msdyn_timeentryid = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("solution")]
	public class Solution : Entity
    {
        public const string EntityLogicalName = "solution";
        public Solution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutionid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? UpdatedOn = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsInternal = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FriendlyName = null;
		
		public readonly EntityReference ParentSolutionId = null;
		
		public readonly EntityReference PublisherId = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly string SolutionPackageVersion = null;
		
		public readonly OptionSetValue SolutionType = null;
		
		public readonly EntityReference ConfigurationPageId = null;
		
		public readonly string PinpointSolutionDefaultLocale = null;
		
		public readonly string PinpointAssetId = null;
		
		public readonly string Version = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string UniqueName = null;
		
		public readonly int? PinpointSolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? PinpointPublisherId = null;
		
		public readonly DateTime? InstalledOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum SolutionType
            {
                None = 0,
                Snapshot = 1,
                Internal = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_iotdevicedatahistory")]
	public class msdyn_iotdevicedatahistory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_iotdevicedatahistory";
        public msdyn_iotdevicedatahistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_iotdevicedatahistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_iotdevicedatahistoryid"] = value;
            }
        }
		
		public readonly bool? msdyn_ConnectionState = null;
		
		public readonly DateTime? msdyn_LastActivityTime = null;
		
		public readonly EntityReference msdyn_Device = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_iotdevicedatahistoryId = null;
		
		public readonly string msdyn_IoTHubDeviceId = null;
		
		public readonly string msdyn_StatusReason = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly DateTime? msdyn_ConnectionStateUpdatedTime = null;
		
		public readonly string msdyn_DeviceReportedProperties = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Enabled = 192350000,
                Disabled = 192350001,
                NotFound = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("importjob")]
	public class ImportJob : Entity
    {
        public const string EntityLogicalName = "importjob";
        public ImportJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importjobid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ImportContext = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly string Data = null;
		
		public readonly string SolutionName = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string OperationContext = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly double? Progress = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? ImportJobId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? StartedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_timeentry")]
	public class msdyn_timeentry : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_timeentry";
        public msdyn_timeentry() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_timeentryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_timeentryid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_projectTask = null;
		
		public readonly DateTime? msdyn_date = null;
		
		public readonly string msdyn_relatedItemId = null;
		
		public readonly Guid? msdyn_timeentryId = null;
		
		public readonly Guid? stageid = null;
		
		public readonly OptionSetValue msdyn_type = null;
		
		public readonly string msdyn_externalDescription = null;
		
		public readonly EntityReference msdyn_resourceCategory = null;
		
		public readonly OptionSetValue msdyn_targetEntryStatus = null;
		
		public readonly string traversedpath = null;
		
		public readonly EntityReference msdyn_transactioncategory = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly OptionSetValue msdyn_entryStatus = null;
		
		public readonly int? msdyn_duration = null;
		
		public readonly EntityReference msdyn_bookableresource = null;
		
		public readonly EntityReference msdyn_manager = null;
		
		public readonly OptionSetValue msdyn_relatedItemType = null;
		
		public readonly EntityReference msdyn_ResourceOrganizationalUnitId = null;
		
		public readonly EntityReference msdyn_project = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_type
            {
                Work = 192350000,
                Absence = 192350001,
                Vacation = 192350002
            }
            public enum msdyn_targetEntryStatus
            {
                Draft = 192350000,
                Returned = 192350001,
                Approved = 192350002,
                Submitted = 192350003,
                RecallRequested = 192350004
            }
            public enum msdyn_entryStatus
            {
                Draft = 192350000,
                Returned = 192350001,
                Approved = 192350002,
                Submitted = 192350003,
                RecallRequested = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_relatedItemType
            {
                None = 192350000,
                ResourceBooking = 192350001,
                ResourceAssignment = 192350002,
                ExchangeAppointments = 192350100
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementresourcecategory")]
	public class msdyn_requirementresourcecategory : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementresourcecategory";
        public msdyn_requirementresourcecategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementresourcecategoryid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_ResourceRequirement = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly bool? msdyn_isprimary = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly Guid? msdyn_requirementresourcecategoryId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("topicmodelconfiguration")]
	public class TopicModelConfiguration : Entity
    {
        public const string EntityLogicalName = "topicmodelconfiguration";
        public TopicModelConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelconfigurationid"] = value;
            }
        }
		
		public readonly EntityReference TopicModelId = null;
		
		public readonly string Description = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly Guid? SupportingSolutionId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? NgramSize = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string DataFilter = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly decimal? MinRelevanceScore = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? TimeFilterDuration = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? TopicModelConfigurationId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue TimeFilter = null;
		
		public readonly string SourceEntity = null;
		
		public readonly Guid? TopicModelConfigurationIdUnique = null;
		
		public readonly string StopWords = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum TimeFilter
            {
                LastNDays = 1,
                LastNWeeks = 2
            }
            public enum SourceEntity
            {
                Incident = 112
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_requirementgroup")]
	public class msdyn_requirementgroup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_requirementgroup";
        public msdyn_requirementgroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_requirementgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_requirementgroupid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_autogrouptype = null;
		
		public readonly bool? msdyn_istemplate = null;
		
		public readonly Guid? msdyn_requirementgroupId = null;
		
		public readonly EntityReference msdyn_requirementgrouptemplateid = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum msdyn_autogrouptype
            {
                None = 0,
                Crew = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcebookingexchangesyncidmapping")]
	public class BookableResourceBookingExchangeSyncIdMapping : Entity
    {
        public const string EntityLogicalName = "bookableresourcebookingexchangesyncidmapping";
        public BookableResourceBookingExchangeSyncIdMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingexchangesyncidmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingexchangesyncidmappingid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly int? Retries = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsDeletedInExchange = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly OptionSetValue SyncStatus = null;
		
		public readonly Guid? BookableResourceBookingExchangeSyncIdMappingId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? BookableResourceBookingId = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string LastSyncError = null;
		
		public readonly int? SyncVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum SyncStatus
            {
                Completed = 0,
                Retry = 1,
                Pending = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("displaystringmap")]
	public class DisplayStringMap : Entity
    {
        public const string EntityLogicalName = "displaystringmap";
        public DisplayStringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringmapid"] = value;
            }
        }
		
		public readonly Guid? DisplayStringId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? DisplayStringMapId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? DisplayStringMapIdUnique = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_entityrankingrule")]
	public class msdyn_entityrankingrule : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_entityrankingrule";
        public msdyn_entityrankingrule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_entityrankingruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_entityrankingruleid"] = value;
            }
        }
		
		public readonly int? msdyn_RulePriority = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly int? msdyn_ObjectTypeCode = null;
		
		public readonly bool? msdyn_enabled = null;
		
		public readonly bool? msdyn_OOBRule = null;
		
		public readonly int? msdyn_overriddenrank = null;
		
		public readonly Guid? msdyn_entityrankingruleId = null;
		
		public readonly string msdyn_FetchXmlRule = null;
		
		public readonly string msdyn_entityname = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessagefilter")]
	public class SdkMessageFilter : Entity
    {
        public const string EntityLogicalName = "sdkmessagefilter";
        public SdkMessageFilter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagefilterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagefilterid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly bool? IsCustomProcessingStepAllowed = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? WorkflowSdkStepEnabled = null;
		
		public readonly Guid? SdkMessageFilterIdUnique = null;
		
		public readonly int? RestrictionLevel = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string SecondaryObjectTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? Availability = null;
		
		public readonly Guid? SdkMessageFilterId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PrimaryObjectTypeCode
            {

            }
            public enum SecondaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("hierarchysecurityconfiguration")]
	public class HierarchySecurityConfiguration : Entity
    {
        public const string EntityLogicalName = "hierarchysecurityconfiguration";
        public HierarchySecurityConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchysecuritymodelingsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchysecuritymodelingsettingid"] = value;
            }
        }
		
		public readonly string EntityName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? HierarchySecurityModelingSettingId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_paymentdetail")]
	public class msdyn_paymentdetail : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_paymentdetail";
        public msdyn_paymentdetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_paymentdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_paymentdetailid"] = value;
            }
        }
		
		public readonly Guid? msdyn_paymentdetailId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_paymentamount_Base = null;
		
		public readonly EntityReference msdyn_Payment = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_Invoice = null;
		
		public readonly Money msdyn_PaymentAmount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference msdyn_Workorder = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("bookableresourcecharacteristic")]
	public class BookableResourceCharacteristic : Entity
    {
        public const string EntityLogicalName = "bookableresourcecharacteristic";
        public BookableResourceCharacteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecharacteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecharacteristicid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference msdyn_supportingrecord = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference Resource = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference Characteristic = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue msdyn_approvalstatus = null;
		
		public readonly EntityReference RatingValue = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? BookableResourceCharacteristicId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_approvalstatus
            {
                Saved = 192350000,
                PendingApproval = 192350001,
                Rejected = 192350002,
                Approved = 192350003,
                Recalled = 192350004
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("expiredprocess")]
	public class ExpiredProcess : Entity
    {
        public const string EntityLogicalName = "expiredprocess";
        public ExpiredProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("traceregarding")]
	public class TraceRegarding : Entity
    {
        public const string EntityLogicalName = "traceregarding";
        public TraceRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceregardingid"] = value;
            }
        }
		
		public readonly string RegardingObjectTypeCodeForSharing = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly Guid? TraceRegardingId = null;
		
		public readonly EntityReference RegardingObjectId = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quoteinvoicingsetup")]
	public class msdyn_quoteinvoicingsetup : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quoteinvoicingsetup";
        public msdyn_quoteinvoicingsetup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quoteinvoicingsetupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quoteinvoicingsetupid"] = value;
            }
        }
		
		public readonly int? msdyn_NumberOfOccurrences = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference msdyn_Quote = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_RecurrenceSettings = null;
		
		public readonly Money msdyn_AmountTotals = null;
		
		public readonly Money msdyn_amounttotals_Base = null;
		
		public readonly string msdyn_Description = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string msdyn_InternalFlags = null;
		
		public readonly Guid? msdyn_quoteinvoicingsetupId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("relationshiprole")]
	public class RelationshipRole : Entity
    {
        public const string EntityLogicalName = "relationshiprole";
        public RelationshipRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiproleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiproleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? RelationshipRoleId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_projectparameter")]
	public class msdyn_projectparameter : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_projectparameter";
        public msdyn_projectparameter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_projectparameterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_projectparameterid"] = value;
            }
        }
		
		public readonly bool? msdyn_Projectresourcerequirementsvisibletore = null;
		
		public readonly OptionSetValue msdyn_resourceallocationmode = null;
		
		public readonly bool? msdyn_Allowskillupdatebyresource = null;
		
		public readonly EntityReference msdyn_invoicefrequency = null;
		
		public readonly bool? msdyn_pricelistdefaultingiscurrencyagnostic = null;
		
		public readonly EntityReference msdyn_projectmanagerrole = null;
		
		public readonly EntityReference msdyn_teammemberrole = null;
		
		public readonly EntityReference msdyn_defaultWorkTemplate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference msdyn_defaultorganizationalunit = null;
		
		public readonly Guid? msdyn_projectparameterId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_resourceallocationmode
            {
                Centralized = 1,
                Hybrid = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("internaladdress")]
	public class InternalAddress : Entity
    {
        public const string EntityLogicalName = "internaladdress";
        public InternalAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("internaladdressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["internaladdressid"] = value;
            }
        }
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Composite = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Name = null;
		
		public readonly Guid? InternalAddressId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string County = null;
		
		public readonly string Country = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string City = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly double? Longitude = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string Line1 = null;
		
		public readonly string Telephone3 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ParentId = null;
		
		public readonly string PostalCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Line2 = null;
		
		public readonly string Line3 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {

            }
            public enum ObjectTypeCode
            {

            }
            public enum AddressTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_upgradestep")]
	public class msdyn_upgradestep : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_upgradestep";
        public msdyn_upgradestep() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_upgradestepid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_upgradestepid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_finished")]
		public readonly DateTime? msdyn_FinishedDate = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_Name = null;
		
		public readonly OptionSetValue msdyn_Status = null;
		
		public readonly int? msdyn_dbversion = null;
		
		public readonly Guid? msdyn_upgradestepId = null;
		
		public readonly EntityReference msdyn_UpgradeVersion = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_Errors = null;
		
		public readonly Guid? msdyn_StepID = null;
		
		public readonly string msdyn_Details = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_Status
            {
                Started = 100000000,
                Success = 100000001,
                Failure = 100000002
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("sdkmessageprocessingstepimage")]
	public class SdkMessageProcessingStepImage : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepimage";
        public SdkMessageProcessingStepImage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepimageid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string EntityAlias = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? SdkMessageProcessingStepImageId = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string RelatedAttributeName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string MessagePropertyName = null;
		
		public readonly OptionSetValue ImageType = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Attributes = null;
		
		public readonly EntityReference SdkMessageProcessingStepId = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SdkMessageProcessingStepImageIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ImageType
            {
                PreImage = 0,
                PostImage = 1,
                Both = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_customerasset")]
	public class msdyn_customerasset : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_customerasset";
        public msdyn_customerasset() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_customerassetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_customerassetid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_Product = null;
		
		public readonly EntityReference msdyn_Account = null;
		
		public readonly EntityReference msdyn_WorkOrderProduct = null;
		
		public readonly DateTime? msdyn_LastCommandSentTime = null;
		
		public readonly EntityReference msdyn_CustomerAssetCategory = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly OptionSetValue msdyn_RegistrationStatus = null;
		
		public readonly EntityReference msdyn_LastCommandSent = null;
		
		public readonly EntityReference msdyn_ParentAsset = null;
		
		public readonly double? msdyn_Longitude = null;
		
		public readonly Guid? msdyn_customerassetId = null;
		
		public readonly double? msdyn_Latitude = null;
		
		public readonly EntityReference msdyn_MasterAsset = null;
		
		public readonly string msdyn_DeviceId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_RegistrationStatus
            {
                Unknown = 192350000,
                Unregistered = 192350001,
                InProgress = 192350002,
                Registered = 192350003,
                Error = 192350004
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_journal")]
	public class msdyn_journal : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_journal";
        public msdyn_journal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_journalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_journalid"] = value;
            }
        }
		
		public readonly bool? msdyn_IsPosted = null;
		
		public readonly EntityReference msdyn_ProjectTask = null;
		
		public readonly DateTime? msdyn_Date = null;
		
		public readonly OptionSetValue msdyn_JournalType = null;
		
		public readonly DateTime? msdyn_TransactionDate = null;
		
		public readonly Guid? stageid = null;
		
		public readonly EntityReference msdyn_ExpenseCategory = null;
		
		public readonly EntityReference msdyn_ResourceCategory = null;
		
		public readonly EntityReference msdyn_DefaultProject = null;
		
		public readonly string traversedpath = null;
		
		public readonly Guid? processid = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_description = null;
		
		public readonly EntityReference msdyn_BookableResource = null;
		
		public readonly EntityReference msdyn_Project = null;
		
		public readonly Guid? msdyn_journalId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_JournalType
            {
                Entry = 192350000,
                TimeCorrection = 192350001,
                ExpenseCorrection = 192350002
            }
            public enum statuscode
            {
                Active = 1,
                DraftAdjustment = 192350000,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("productsubstitute")]
	public class ProductSubstitute : Entity
    {
        public const string EntityLogicalName = "productsubstitute";
        public ProductSubstitute() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productsubstituteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productsubstituteid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ProductSubstituteId = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly OptionSetValue Direction = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference SubstitutedProductId = null;
		
		public readonly OptionSetValue SalesRelationshipType = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Direction
            {
                UniDirectional = 0,
                BiDirectional = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SalesRelationshipType
            {
                UpSell = 0,
                CrossSell = 1,
                Accessory = 2,
                Substitute = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("connectionroleobjecttypecode")]
	public class ConnectionRoleObjectTypeCode : Entity
    {
        public const string EntityLogicalName = "connectionroleobjecttypecode";
        public ConnectionRoleObjectTypeCode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleobjecttypecodeid"] = value;
            }
        }
		
		public readonly Guid? ConnectionRoleObjectTypeCodeId = null;
		
		public readonly EntityReference ConnectionRoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string AssociatedObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_characteristicreqforteammember")]
	public class msdyn_characteristicreqforteammember : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_characteristicreqforteammember";
        public msdyn_characteristicreqforteammember() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_characteristicreqforteammemberid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_characteristicreqforteammemberid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly EntityReference msdyn_ratingvalue = null;
		
		public readonly EntityReference msdyn_resourcerequirementid = null;
		
		public readonly EntityReference msdyn_Characteristic = null;
		
		public readonly OptionSetValue msdyn_characteristictype = null;
		
		public readonly Guid? msdyn_characteristicreqforteammemberId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum msdyn_characteristictype
            {
                Skill = 1,
                Certification = 2
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_bookingsetupmetadata")]
	public class msdyn_bookingsetupmetadata : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_bookingsetupmetadata";
        public msdyn_bookingsetupmetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_bookingsetupmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_bookingsetupmetadataid"] = value;
            }
        }
		
		public readonly EntityReference msdyn_CloneEntityQuery = null;
		
		public readonly bool? msdyn_CancelBookingsWhenMoving = null;
		
		public readonly EntityReference msdyn_DefaultRequirementActiveStatus = null;
		
		public readonly bool? msdyn_DisableRequirementAutoCreation = null;
		
		public readonly bool? msdyn_enablequickbook = null;
		
		public readonly EntityReference msdyn_DefaultRequirementCanceledStatus = null;
		
		public readonly EntityReference msdyn_DefaultBookingCanceledStatus = null;
		
		public readonly EntityReference msdyn_RetrieveResourcesQuery = null;
		
		public readonly int? msdyn_ResourceAvailabilityRetrievalLimit = null;
		
		public readonly int? msdyn_AvailableDurationMinimumPercentage = null;
		
		public readonly Guid? msdyn_bookingsetupmetadataId = null;
		
		public readonly string msdyn_BookingStatusFieldLogicalName = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_EntityLogicalName = null;
		
		public readonly int? msdyn_DefaultBookingDuration = null;
		
		public readonly EntityReference msdyn_DefaultRequirementCompletedStatus = null;
		
		public readonly EntityReference msdyn_RetrieveConstraintsQuery = null;
		
		public readonly string msdyn_RequirementRelationshipLogicalName = null;
		
		public readonly EntityReference msdyn_DefaultBookingCommittedStatus = null;
		
		public readonly string msdyn_BookingRelationshipLogicalName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_postconfig")]
	public class msdyn_PostConfig : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_postconfig";
        public msdyn_PostConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postconfigid"] = value;
            }
        }
		
		public readonly string msdyn_FollowingViewId = null;
		
		public readonly string msdyn_EntityName = null;
		
		public readonly bool? msdyn_ConfigureWall = null;
		
		public readonly Guid? msdyn_PostConfigId = null;
		
		public readonly string msdyn_Status = null;
		
		public readonly int? msdyn_Otc = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_EntityDisplayName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string msdyn_FollowingViewId2 = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_quotebookingproduct")]
	public class msdyn_quotebookingproduct : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_quotebookingproduct";
        public msdyn_quotebookingproduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_quotebookingproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_quotebookingproductid"] = value;
            }
        }
		
		public readonly double? msdyn_quantity = null;
		
		public readonly int? msdyn_lineorder = null;
		
		public readonly Money msdyn_EstimatedSalesAmount = null;
		
		public readonly bool? msdyn_iscopied = null;
		
		public readonly EntityReference msdyn_product = null;
		
		public readonly EntityReference msdyn_quotebookingincident = null;
		
		public readonly Money msdyn_unitcostamount_Base = null;
		
		public readonly EntityReference msdyn_quote = null;
		
		public readonly EntityReference msdyn_unit = null;
		
		public readonly EntityReference msdyn_quotebookingsetup = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money msdyn_unitamount = null;
		
		public readonly double? msdyn_qtytobill = null;
		
		public readonly Guid? msdyn_quotebookingproductId = null;
		
		public readonly Money msdyn_unitamount_Base = null;
		
		public readonly EntityReference msdyn_customerasset = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("msdyn_Internalflags")]
		public readonly string msdyn_Internalflags = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Money msdyn_EstimatedCost = null;
		
		public readonly EntityReference msdyn_pricelist = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money msdyn_currency_Base = null;
		
		public readonly Money msdyn_currency = null;
		
		public readonly Money msdyn_estimatedcost_Base = null;
		
		public readonly Money msdyn_unitcostamount = null;
		
		public readonly Money msdyn_estimatedsalesamount_Base = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("service")]
	public class Service : Entity
    {
        public const string EntityLogicalName = "service";
        public Service() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Granularity = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly Guid? ServiceId = null;
		
		public readonly EntityReference ResourceSpecId = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsSchedulable = null;
		
		public readonly int? Duration = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference StrategyId = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? AnchorOffset = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? ShowResources = null;
		
		public readonly OptionSetValue InitialStatusCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum InitialStatusCode
            {
                Requested = 1,
                Tentative = 2,
                Pending = 3,
                Reserved = 4,
                InProgress = 6,
                Arrived = 7,
                Completed = 8,
                Canceled = 9,
                NoShow = 10
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("activitypointer")]
	public class ActivityPointer : Entity
    {
        public const string EntityLogicalName = "activitypointer";
        public ActivityPointer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SeriesId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Subject = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityCollection allparties = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference ServiceId = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                Task = 4212,
                RecurringAppointment = 4251,
                QuickCampaign = 4406,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                CaseResolution = 4206,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                SurveyInvite = 10041,
                SurveyResponse = 10042,
                BookingAlert = 10047,
                ProjectServiceApproval = 10075
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("externalparty")]
	public class ExternalParty : Entity
    {
        public const string EntityLogicalName = "externalparty";
        public ExternalParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string FullName = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string CorrelationKey = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? LastEnabledOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly string YomiFullName = null;
		
		public readonly Guid? ExternalPartyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string MiddleName = null;
		
		public readonly string EmailAddress = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string LastName = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly Guid? ExternalPartyIdUnique = null;
		
		public readonly DateTime? LastDisabledOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string YomiLastName = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string FirstName = null;
		
		public readonly string Type = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msfp_unsubscribedrecipient")]
	public class msfp_unsubscribedrecipient : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msfp_unsubscribedrecipient";
        public msfp_unsubscribedrecipient() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msfp_unsubscribedrecipientid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msfp_unsubscribedrecipientid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msfp_name = null;
		
		public readonly string msfp_emailaddress = null;
		
		public readonly Guid? msfp_unsubscribedrecipientId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("metadatadifference")]
	public class MetadataDifference : Entity
    {
        public const string EntityLogicalName = "metadatadifference";
        public MetadataDifference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metadatadifferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metadatadifferenceid"] = value;
            }
        }
		
		public readonly string IntroducedVersionString = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? MetadataDifferenceId = null;
		
		public readonly string DifferenceXml = null;
		
		public readonly double? IntroducedVersion = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_teamscollaboration")]
	public class msdyn_TeamsCollaboration : Entity
    {
        public const string EntityLogicalName = "msdyn_teamscollaboration";
        public msdyn_TeamsCollaboration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_teamscollaborationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_teamscollaborationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? msdyn_GroupId = null;
		
		public readonly string msdyn_ChannelFolderRelativeUrl = null;
		
		public readonly string msdyn_TeamId = null;
		
		public readonly string msdyn_TeamSiteUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? RegardingObjectId = null;
		
		public readonly Guid? msdyn_TenantId = null;
		
		public readonly int? RegardingObjectTypeCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string RegardingObjectTypeName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? msdyn_TeamsCollaborationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_TeamName = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string msdyn_ChannelName = null;
		
		public readonly string msdyn_ChannelId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("msdyn_shipvia")]
	public class msdyn_shipvia : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_shipvia";
        public msdyn_shipvia() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_shipviaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_shipviaid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_shipviaId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("asyncoperation")]
	public class AsyncOperation : Entity
    {
        public const string EntityLogicalName = "asyncoperation";
        public AsyncOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("asyncoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["asyncoperationid"] = value;
            }
        }
		
		public readonly Guid? ParentPluginExecutionId = null;
		
		public readonly double? ExecutionTimeSpan = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string FriendlyMessage = null;
		
		public readonly string Data = null;
		
		public readonly string HostId = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly string MessageName = null;
		
		public readonly Guid? AsyncOperationId = null;
		
		public readonly int? Depth = null;
		
		public readonly string PrimaryEntityType = null;
		
		public readonly string Message = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly bool? WorkflowIsBlocked = null;
		
		public readonly Guid? RequestId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string WorkflowState = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string WorkflowStageName = null;
		
		public readonly EntityReference OwningExtensionId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string DependencyToken = null;
		
		public readonly int? Subtype = null;
		
		public readonly int? Sequence = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference WorkflowActivationId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? RecurrenceStartTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsWaitingForEvent = null;
		
		public readonly string RecurrencePattern = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly OptionSetValue OperationType = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string RootExecutionContext = null;
		
		public readonly int? RetryCount = null;
		
		public readonly DateTime? PostponeUntil = null;
		
		public readonly Guid? CorrelationId = null;
		
		public readonly DateTime? CorrelationUpdatedTime = null;

        public new static class Options
        {
            public enum PrimaryEntityType
            {

            }
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum OperationType
            {
                SystemEvent = 1,
                BulkEmail = 2,
                ImportFileParse = 3,
                TransformParseData = 4,
                Import = 5,
                ActivityPropagation = 6,
                DuplicateDetectionRulePublish = 7,
                BulkDuplicateDetection = 8,
                SQMDataCollection = 9,
                Workflow = 10,
                QuickCampaign = 11,
                MatchcodeUpdate = 12,
                BulkDelete = 13,
                DeletionService = 14,
                IndexManagement = 15,
                CollectOrganizationStatistics = 16,
                ImportSubprocess = 17,
                CalculateOrganizationStorageSize = 18,
                CollectOrganizationDatabaseStatistics = 19,
                CollectionOrganizationSizeStatistics = 20,
                DatabaseTuning = 21,
                CalculateOrganizationMaximumStorageSize = 22,
                BulkDeleteSubprocess = 23,
                UpdateStatisticIntervals = 24,
                OrganizationFullTextCatalogIndex = 25,
                DatabaseLogBackup = 26,
                UpdateContractStates = 27,
                DBCCSHRINKDATABASEMaintenanceJob = 28,
                DBCCSHRINKFILEMaintenanceJob = 29,
                ReindexAllIndicesMaintenanceJob = 30,
                StorageLimitNotification = 31,
                CleanupInactiveWorkflowAssemblies = 32,
                RecurringSeriesExpansion = 35,
                ImportSampleData = 38,
                GoalRollUp = 40,
                AuditPartitionCreation = 41,
                CheckForLanguagePackUpdates = 42,
                ProvisionLanguagePack = 43,
                UpdateOrganizationDatabase = 44,
                UpdateSolution = 45,
                RegenerateEntityRowCountSnapshotData = 46,
                RegenerateReadShareSnapshotData = 47,
                OutgoingActivity = 50,
                IncomingEmailProcessing = 51,
                MailboxTestAccess = 52,
                EncryptionHealthCheck = 53,
                ExecuteAsyncRequest = 54,
                PostToYammer = 49,
                UpdateEntitlementStates = 56,
                CalculateRollupField = 57,
                MassCalculateRollupField = 58,
                ImportTranslation = 59,
                ConvertDateAndTimeBehavior = 62,
                EntityKeyIndexCreation = 63,
                UpdateKnowledgeArticleStates = 65,
                ResourceBookingSync = 68,
                RelationshipAssistantCards = 69,
                CleanupSolutionComponents = 71,
                AppModuleMetadataOperation = 72,
                ALMAnomalyDetectionOperation = 73,
                FlowNotification = 75,
                RibbonClientMetadataOperation = 76,
                CallbackRegistrationExpanderOperation = 79,
                CascadeAssign = 90,
                CascadeDelete = 91,
                EventExpanderOperation = 92,
                ImportSolutionMetadata = 93
            }
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("workflowlog")]
	public class WorkflowLog : Entity
    {
        public const string EntityLogicalName = "workflowlog";
        public WorkflowLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowlogid"] = value;
            }
        }
		
		public readonly OptionSetValue Status = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string InteractionActivityResult = null;
		
		public readonly string Description = null;
		
		public readonly string StepName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly Guid? WorkflowLogId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Message = null;
		
		public readonly string ActivityName = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ChildWorkflowInstanceId = null;
		
		public readonly string StageName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum Status
            {
                InProgress = 1,
                Succeeded = 2,
                Failed = 3,
                Canceled = 4,
                Waiting = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("post")]
	public class Post : Entity
    {
        public const string EntityLogicalName = "post";
        public Post() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference PostRegardingId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? YammerRetryCount = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? PostToYammer = null;
		
		public readonly Guid? PostId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Text = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? YammerPostState = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly OptionSetValue Source = null;

        public new static class Options
        {
            public enum Type
            {
                CheckIn = 1,
                Idea = 2,
                News = 3,
                PrivateMessage = 4,
                Question = 5,
                RePost = 6,
                Status = 7
            }
            public enum Source
            {
                AutoPost = 1,
                ManualPost = 2,
                ActionHubPost = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("phonetocaseprocess")]
	public class PhoneToCaseProcess : Entity
    {
        public const string EntityLogicalName = "phonetocaseprocess";
        public PhoneToCaseProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.Description("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? Duration = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("calendarrule")]
	public class CalendarRule : Entity
    {
        public const string EntityLogicalName = "calendarrule";
        public CalendarRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarruleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsSimple = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? SubCode = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly DateTime? EffectiveIntervalEnd = null;
		
		public readonly bool? IsSelected = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? Rank = null;
		
		public readonly bool? IsModified = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly Guid? CalendarRuleId = null;
		
		public readonly int? Duration = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly DateTime? EffectiveIntervalStart = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? Offset = null;
		
		public readonly EntityReference InnerCalendarId = null;
		
		public readonly string Pattern = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly double? Effort = null;
		
		public readonly int? ExtentCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TimeCode = null;
		
		public readonly bool? IsVaried = null;
		
		public readonly string GroupDesignator = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly DateTime? StartTime = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("appconfigmaster")]
	public class AppConfigMaster : Entity
    {
        public const string EntityLogicalName = "appconfigmaster";
        public AppConfigMaster() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appconfigmasterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appconfigmasterid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? AppConfigMasterId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ConfigType = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Validator = null;
		
		public readonly int? IsNavigationSetting = null;
		
		public readonly string ParentAppConfigMasterId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string DefaultValue = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Key]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContract]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalName("subscriptionsyncentryoffline")]
	public class SubscriptionSyncEntryOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoffline";
        public SubscriptionSyncEntryOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? SyncState = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;


    }

}